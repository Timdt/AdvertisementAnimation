%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 230.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Ленка
%%CreationDate: 8/6/2013
%%BoundingBox: 0 0 2000 2000
%%HiResBoundingBox: 0 0 2000 2000
%%CropBox: 0 0 2000 2000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:CreateDate>2013-08-06T09:14:27+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2013-08-06T09:14:27+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2013-08-06T09:14:27+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8Hb/nLXyuv5lf4ROkzfowXv6OOuesv996npc/q/D+6&#xA;5/tepXjvx7Yq94xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVIfO/nfy75K8u3Gva9cCCzgFEQUMk0h&#xA;B4xRLUcnamw+k0AJxV4T+RH55+e/zD/N7VYblVj8tPYyTRaaoBW0WKRFib1KBmdudHr1rsAAAFX0&#xA;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&#xA;bYq9FxV2KuxV2KuxV2KuxV2Kv//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">menu buttons</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:BABF6E2A5EFEE2118FDBAAB08757440E</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:BABF6E2A5EFEE2118FDBAAB08757440E</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:0C8C6F9963D4E211BC2BECBC79AF619D</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:B9BF6E2A5EFEE2118FDBAAB08757440E</stRef:instanceID>
            <stRef:documentID>xmp.did:B9BF6E2A5EFEE2118FDBAAB08757440E</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:0C8C6F9963D4E211BC2BECBC79AF619D</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0C8C6F9963D4E211BC2BECBC79AF619D</stEvt:instanceID>
                  <stEvt:when>2013-06-13T23:58:21+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1AA9839F03D8E211B7F8A8F64DDDEF2D</stEvt:instanceID>
                  <stEvt:when>2013-06-18T13:41:24+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2C1401ABE0D8E211AEF0C8CA13D3FADF</stEvt:instanceID>
                  <stEvt:when>2013-06-19T16:03:42+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2D1401ABE0D8E211AEF0C8CA13D3FADF</stEvt:instanceID>
                  <stEvt:when>2013-06-19T16:54:43+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2E1401ABE0D8E211AEF0C8CA13D3FADF</stEvt:instanceID>
                  <stEvt:when>2013-06-19T22:00:13+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:43713FE2B7FDE2119C99E2386326461F</stEvt:instanceID>
                  <stEvt:when>2013-08-05T13:14:59+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B9BF6E2A5EFEE2118FDBAAB08757440E</stEvt:instanceID>
                  <stEvt:when>2013-08-06T09:10:19+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:BABF6E2A5EFEE2118FDBAAB08757440E</stEvt:instanceID>
                  <stEvt:when>2013-08-06T09:14:27+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2000.000000</stDim:w>
            <stDim:h>2000.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -2000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 2000 li
2000 2000 li
2000 0 li
cp
clp
[1 0 0 1 0 0 ]ct
2000 2000 mo
0 2000 li
0 0 li
2000 0 li
2000 2000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
719.743 864.76 mo
732.518 874.469 789.917 916.591 824.26 916.591 cv
928.982 916.591 li
931.633 916.591 933.184 916.069 933.197 916.065 cv
933.439 915.973 933.557 915.94 933.809 915.875 cv
942.193 913.668 948.053 906.121 948.053 897.523 cv
948.053 889.435 942.844 882.218 935.094 879.566 cv
931.963 878.494 930.066 875.32 930.609 872.06 cv
931.152 868.798 933.975 866.405 937.281 866.405 cv
944.262 866.405 li
954.777 866.405 963.336 857.852 963.336 847.338 cv
963.336 839.249 958.127 832.037 950.379 829.389 cv
947.25 828.32 945.35 825.144 945.893 821.882 cv
946.436 818.62 949.256 816.228 952.563 816.228 cv
966.076 816.228 li
976.592 816.228 985.15 807.671 985.15 797.152 cv
985.15 789.06 979.951 781.852 972.215 779.212 cv
969.082 778.146 967.186 774.969 967.725 771.707 cv
968.268 768.442 971.09 766.051 974.396 766.051 cv
1078.09 766.051 li
1089.4 766.051 1105.14 756.438 1105.14 746.974 cv
1105.14 737.338 1089.27 727.018 1078.09 727.018 cv
902.797 727.018 li
884.322 727.018 877.223 719.647 874.518 713.463 cv
869.516 702.015 875.58 685.797 891.154 668.973 cv
912.861 645.516 924.393 619.232 921.246 600.374 cv
920.068 593.296 916.883 587.7 911.764 583.67 cv
907.43 588.218 901.137 595.468 893.66 604.082 cv
841.672 663.989 782.395 727.902 736.978 727.902 cv
719.742 727.902 li
719.743 864.76 li
cp
928.982 930.115 mo
824.26 930.115 li
780.947 930.115 711.711 875.704 708.782 873.387 cv
707.164 872.104 706.22 870.151 706.22 868.087 cv
706.22 721.141 li
706.22 717.404 709.245 714.377 712.98 714.377 cv
736.978 714.377 li
780.031 714.377 849.881 633.895 883.445 595.217 cv
894.1 582.943 901.799 574.073 906.393 569.994 cv
908.512 568.107 911.58 567.749 914.084 569.097 cv
925.336 575.147 932.426 585.19 934.588 598.148 cv
938.463 621.391 925.938 651.299 901.078 678.158 cv
888.369 691.888 884.828 703.276 886.912 708.049 cv
888.982 712.786 897.754 713.495 902.797 713.495 cv
1078.09 713.495 li
1096.36 713.495 1118.67 728.942 1118.67 746.974 cv
1118.67 765.032 1096.47 779.574 1078.09 779.574 cv
993.475 779.574 li
996.793 784.7 998.672 790.764 998.672 797.152 cv
998.672 813.325 986.832 826.788 971.367 829.322 cv
974.867 834.539 976.857 840.77 976.857 847.338 cv
976.857 861.522 967.75 873.616 955.074 878.089 cv
959.201 883.576 961.576 890.349 961.576 897.523 cv
961.576 912.163 951.701 925.014 937.527 928.88 cv
936.348 929.276 933.344 930.115 928.982 930.115 cv
cp
0 0 0 rgb
f
986.057 779.574 mo
940.201 779.574 li
936.467 779.574 933.439 776.548 933.439 772.813 cv
933.439 769.077 936.467 766.051 940.201 766.051 cv
986.057 766.051 li
989.791 766.051 992.818 769.077 992.818 772.813 cv
992.818 776.548 989.791 779.574 986.057 779.574 cv
cp
f
952.563 829.752 mo
927.354 829.752 li
923.619 829.752 920.592 826.726 920.592 822.99 cv
920.592 819.255 923.619 816.228 927.354 816.228 cv
952.563 816.228 li
956.299 816.228 959.326 819.255 959.326 822.99 cv
959.326 826.726 956.299 829.752 952.563 829.752 cv
cp
f
937.281 879.93 mo
910.883 879.93 li
907.148 879.93 904.121 876.902 904.121 873.168 cv
904.121 869.432 907.148 866.405 910.883 866.405 cv
937.281 866.405 li
941.016 866.405 944.043 869.432 944.043 873.168 cv
944.043 876.902 941.016 879.93 937.281 879.93 cv
cp
f
697.823 711.712 mo
696.225 711.712 694.923 713.014 694.923 714.61 cv
694.923 877.279 li
694.923 878.877 696.225 880.178 697.823 880.178 cv
703.323 880.178 li
704.92 880.178 706.22 878.877 706.22 877.279 cv
706.22 714.61 li
706.22 713.014 704.92 711.712 703.322 711.712 cv
697.823 711.712 li
cp
703.323 893.701 mo
697.823 893.701 li
688.767 893.701 681.4 886.333 681.4 877.279 cv
681.4 714.61 li
681.4 705.557 688.767 698.189 697.823 698.189 cv
703.322 698.189 li
712.377 698.189 719.742 705.557 719.742 714.61 cv
719.743 877.279 li
719.743 886.333 712.377 893.701 703.323 893.701 cv
cp
f
1725.85 883.09 mo
1845.18 883.09 li
1846.95 870.477 1853.28 857.129 1860.44 842.037 cv
1870.52 820.771 1881.95 796.667 1881.95 769.978 cv
1881.95 717.471 li
1881.95 717.349 1881.95 717.228 1881.96 717.106 cv
1881.98 716.79 1882.01 716.484 1882.05 716.18 cv
1882.05 652.159 li
1882.05 641.646 1873.5 633.092 1862.98 633.092 cv
1857.3 633.092 1851.93 635.697 1848.24 640.236 cv
1846.44 642.456 1843.43 643.294 1840.74 642.345 cv
1838.04 641.387 1836.23 638.834 1836.23 635.973 cv
1836.23 632.962 li
1836.23 622.443 1827.68 613.886 1817.16 613.886 cv
1811.48 613.886 1806.11 616.492 1802.43 621.033 cv
1800.62 623.261 1797.61 624.115 1794.91 623.15 cv
1792.22 622.194 1790.41 619.642 1790.41 616.777 cv
1790.41 609.569 li
1790.41 599.05 1781.86 590.493 1771.34 590.493 cv
1761.99 590.493 1753.92 597.521 1752.57 606.843 cv
1752.18 609.528 1750.23 611.721 1747.6 612.414 cv
1744.98 613.11 1742.2 612.163 1740.53 610.017 cv
1736.85 605.268 1731.38 602.54 1725.52 602.54 cv
1715.01 602.54 1706.45 611.097 1706.45 621.612 cv
1706.45 662.627 li
1706.45 662.938 1706.43 663.248 1706.38 663.559 cv
1706.04 665.989 1704.41 668.095 1702.12 668.981 cv
1699.82 669.875 1697.23 669.489 1695.34 667.918 cv
1693.53 666.407 1691.2 665.505 1689.11 665.505 cv
1688.03 665.505 1686.59 665.735 1685.84 666.83 cv
1681.62 673.013 1672.83 685.875 1672.83 716.469 cv
1672.83 748.16 1685.35 773.182 1698.61 799.669 cv
1711.21 824.861 1724.22 850.854 1725.85 883.09 cv
cp
1851.46 896.613 mo
1719.26 896.613 li
1715.53 896.613 1712.5 893.588 1712.5 889.852 cv
1712.5 857.643 1699.88 832.421 1686.52 805.72 cv
1673.14 778.991 1659.31 751.355 1659.31 716.469 cv
1659.31 681.697 1669.69 666.504 1674.67 659.204 cv
1677.8 654.614 1683.07 651.981 1689.11 651.981 cv
1690.37 651.981 1691.66 652.101 1692.92 652.328 cv
1692.92 621.612 li
1692.92 603.637 1707.55 589.016 1725.52 589.016 cv
1731.74 589.016 1737.69 590.783 1742.81 594.04 cv
1748.38 583.821 1759.23 576.969 1771.34 576.969 cv
1787.23 576.969 1800.5 588.402 1803.37 603.477 cv
1807.63 601.444 1812.33 600.362 1817.16 600.362 cv
1831.72 600.362 1844.07 609.953 1848.25 623.145 cv
1852.76 620.816 1857.79 619.567 1862.98 619.567 cv
1880.95 619.567 1895.58 634.189 1895.58 652.159 cv
1895.58 716.469 li
1895.58 716.945 1895.54 717.403 1895.47 717.858 cv
1895.47 769.978 li
1895.47 799.714 1883.35 825.279 1872.65 847.833 cv
1864.91 864.17 1858.22 878.284 1858.22 889.852 cv
1858.22 893.588 1855.19 896.613 1851.46 896.613 cv
cp
f
1745.88 650.844 mo
1742.14 650.844 1739.12 647.817 1739.12 644.083 cv
1739.12 605.875 li
1739.12 602.141 1742.14 599.113 1745.88 599.113 cv
1749.61 599.113 1752.64 602.141 1752.64 605.875 cv
1752.64 644.083 li
1752.64 647.817 1749.61 650.844 1745.88 650.844 cv
cp
f
1797.17 663.928 mo
1793.44 663.928 1790.41 660.903 1790.41 657.167 cv
1790.41 616.777 li
1790.41 613.042 1793.44 610.016 1797.17 610.016 cv
1800.91 610.016 1803.94 613.042 1803.94 616.777 cv
1803.94 657.167 li
1803.94 660.903 1800.91 663.928 1797.17 663.928 cv
cp
f
1843 669.159 mo
1839.26 669.159 1836.23 666.132 1836.23 662.397 cv
1836.23 635.973 li
1836.23 632.236 1839.26 629.21 1843 629.21 cv
1846.73 629.21 1849.76 632.236 1849.76 635.973 cv
1849.76 662.397 li
1849.76 666.132 1846.73 669.159 1843 669.159 cv
cp
f
1699.69 728.032 mo
1695.95 728.032 1692.92 725.005 1692.92 721.271 cv
1692.92 662.627 li
1692.92 658.892 1695.95 655.864 1699.69 655.864 cv
1703.42 655.864 1706.45 658.892 1706.45 662.627 cv
1706.45 721.271 li
1706.45 725.005 1703.42 728.032 1699.69 728.032 cv
cp
f
1715.84 896.613 mo
1714.24 896.613 1712.94 897.912 1712.94 899.511 cv
1712.94 905.007 li
1712.94 906.608 1714.24 907.909 1715.84 907.909 cv
1856.52 907.909 li
1858.12 907.909 1859.42 906.608 1859.42 905.007 cv
1859.42 899.511 li
1859.42 897.912 1858.12 896.613 1856.52 896.613 cv
1715.84 896.613 li
cp
1856.52 921.434 mo
1715.84 921.434 li
1706.79 921.434 1699.42 914.064 1699.42 905.007 cv
1699.42 899.511 li
1699.42 890.454 1706.79 883.09 1715.84 883.09 cv
1856.52 883.09 li
1865.57 883.09 1872.94 890.454 1872.94 899.511 cv
1872.94 905.007 li
1872.94 914.064 1865.57 921.434 1856.52 921.434 cv
cp
f
1332.81 925.922 mo
1452.15 925.922 li
1453.97 913.875 1460.29 901.179 1467.41 886.839 cv
1477.48 866.609 1488.88 843.682 1488.88 818.366 cv
1488.88 768.286 li
1488.88 768.172 1488.88 768.057 1488.88 767.943 cv
1488.9 767.637 1488.94 767.332 1488.98 767.024 cv
1488.98 706.011 li
1488.98 696.152 1480.42 688.132 1469.9 688.132 cv
1464.17 688.132 1458.76 690.618 1455.08 694.948 cv
1453.24 697.107 1450.25 697.891 1447.59 696.915 cv
1444.93 695.937 1443.16 693.402 1443.16 690.567 cv
1443.16 687.7 li
1443.16 677.841 1434.61 669.821 1424.09 669.821 cv
1418.34 669.821 1412.94 672.31 1409.25 676.646 cv
1407.41 678.804 1404.42 679.59 1401.76 678.613 cv
1399.1 677.638 1397.34 675.104 1397.34 672.268 cv
1397.34 665.39 li
1397.34 655.532 1388.78 647.514 1378.26 647.514 cv
1372.78 647.514 1367.2 649.803 1363.7 653.485 cv
1361.79 655.487 1358.86 656.136 1356.28 655.104 cv
1353.72 654.078 1352.03 651.589 1352.03 648.824 cv
1352.03 564.87 li
1352.03 554.174 1343.9 545.794 1333.51 545.794 cv
1323.35 545.794 1315.69 553.995 1315.69 564.87 cv
1315.69 731.286 li
1315.69 734.442 1313.51 737.178 1310.43 737.877 cv
1307.37 738.596 1304.21 737.063 1302.84 734.22 cv
1289.77 707.095 1274.92 683.275 1261.02 667.153 cv
1257.39 662.951 1252.12 660.538 1246.56 660.538 cv
1242 660.538 1237.58 662.179 1234.12 665.16 cv
1226.15 672.021 1225.26 684.09 1232.13 692.06 cv
1243.17 704.866 1252.07 729.318 1261.49 755.208 cv
1266.11 767.893 1270.89 781.011 1275.81 792.256 cv
1275.88 792.421 1275.95 792.589 1276.01 792.76 cv
1286.33 822.636 1297.75 840.783 1307.82 856.796 cv
1320.95 877.668 1331.5 894.442 1332.81 925.922 cv
cp
1458.38 939.445 mo
1326.18 939.445 li
1322.45 939.445 1319.42 936.419 1319.42 932.685 cv
1319.42 900.644 1309.75 885.272 1296.37 863.996 cv
1286.46 848.235 1274.12 828.626 1263.31 797.432 cv
1258.26 785.853 1253.45 772.625 1248.79 759.834 cv
1240.19 736.23 1231.31 711.822 1221.88 700.887 cv
1210.15 687.269 1211.68 666.646 1225.29 654.914 cv
1231.21 649.815 1238.76 647.012 1246.56 647.012 cv
1256.06 647.012 1265.06 651.134 1271.27 658.321 cv
1281.46 670.143 1292.08 685.777 1302.16 703.679 cv
1302.16 564.87 li
1302.16 546.59 1315.94 532.271 1333.51 532.271 cv
1351.48 532.271 1365.56 546.59 1365.56 564.87 cv
1365.56 636.422 li
1369.56 634.845 1373.9 633.991 1378.26 633.991 cv
1394.08 633.991 1407.3 644.9 1410.25 659.315 cv
1414.53 657.348 1419.24 656.296 1424.09 656.296 cv
1438.58 656.296 1450.9 665.455 1455.13 678.078 cv
1459.65 675.819 1464.7 674.608 1469.9 674.608 cv
1487.88 674.608 1502.5 688.695 1502.5 706.011 cv
1502.5 767.34 li
1502.5 767.803 1502.46 768.252 1502.4 768.69 cv
1502.4 818.366 li
1502.4 846.859 1490.25 871.301 1479.53 892.863 cv
1471.81 908.383 1465.14 921.79 1465.14 932.685 cv
1465.14 936.419 1462.11 939.445 1458.38 939.445 cv
cp
f
1358.79 700.999 mo
1355.06 700.999 1352.03 697.972 1352.03 694.237 cv
1352.03 639.316 li
1352.03 635.581 1355.06 632.555 1358.79 632.555 cv
1362.53 632.555 1365.56 635.581 1365.56 639.316 cv
1365.56 694.237 li
1365.56 697.972 1362.53 700.999 1358.79 700.999 cv
cp
f
1308.93 761.176 mo
1305.19 761.176 1302.16 758.15 1302.16 754.414 cv
1302.16 719.114 li
1302.16 715.38 1305.19 712.353 1308.93 712.353 cv
1312.66 712.353 1315.69 715.38 1315.69 719.114 cv
1315.69 754.414 li
1315.69 758.15 1312.66 761.176 1308.93 761.176 cv
cp
f
1403.05 706.234 mo
1399.32 706.234 1396.29 703.208 1396.29 699.472 cv
1396.29 660.251 li
1396.29 656.517 1399.32 653.49 1403.05 653.49 cv
1406.79 653.49 1409.82 656.517 1409.82 660.251 cv
1409.82 699.472 li
1409.82 703.208 1406.79 706.234 1403.05 706.234 cv
cp
f
1448.84 716.688 mo
1445.1 716.688 1442.08 713.663 1442.08 709.927 cv
1442.08 679.86 li
1442.08 676.124 1445.1 673.099 1448.84 673.099 cv
1452.57 673.099 1455.6 676.124 1455.6 679.86 cv
1455.6 709.927 li
1455.6 713.663 1452.57 716.688 1448.84 716.688 cv
cp
f
1318.58 941.316 mo
1316.99 941.316 1315.69 942.615 1315.69 944.21 cv
1315.69 949.707 li
1315.69 951.305 1316.99 952.605 1318.58 952.605 cv
1459.27 952.605 li
1460.86 952.605 1462.16 951.305 1462.16 949.707 cv
1462.16 944.21 li
1462.16 942.615 1460.86 941.316 1459.27 941.316 cv
1318.58 941.316 li
cp
1459.27 966.13 mo
1318.58 966.13 li
1309.53 966.13 1302.16 958.762 1302.16 949.707 cv
1302.16 944.21 li
1302.16 935.157 1309.53 927.792 1318.58 927.792 cv
1459.27 927.792 li
1468.32 927.792 1475.69 935.157 1475.69 944.21 cv
1475.69 949.707 li
1475.69 958.762 1468.32 966.13 1459.27 966.13 cv
cp
f
96.7813 860.059 mo
109.556 869.769 166.955 911.891 201.296 911.891 cv
306.018 911.891 li
308.66 911.891 310.209 911.37 310.225 911.364 cv
310.468 911.27 310.588 911.235 310.843 911.169 cv
319.232 908.96 325.092 901.414 325.092 892.815 cv
325.092 884.727 319.883 877.512 312.131 874.867 cv
309 873.801 307.102 870.624 307.643 867.362 cv
308.185 864.098 311.006 861.705 314.315 861.705 cv
321.296 861.705 li
331.814 861.705 340.372 853.148 340.372 842.63 cv
340.372 834.707 335.282 827.546 327.708 824.816 cv
324.616 823.7 322.775 820.525 323.34 817.29 cv
323.907 814.053 326.717 811.693 330.001 811.693 cv
476.686 811.693 li
487.198 811.693 495.754 803.135 495.754 792.619 cv
495.754 782.102 487.198 773.543 476.686 773.543 cv
464.062 773.543 li
460.678 773.543 457.813 771.043 457.361 767.688 cv
456.906 764.335 459 761.163 462.263 760.264 cv
471.844 757.621 482.185 749.992 482.185 742.271 cv
482.185 732.432 466.053 721.479 455.123 721.479 cv
279.837 721.479 li
261.257 721.479 254.176 714.2 251.508 708.091 cv
246.639 696.949 252.719 680.977 268.19 664.266 cv
293.188 637.256 305.627 614.418 303.214 599.965 cv
302.434 595.287 300.032 591.433 295.909 588.277 cv
292.444 591.689 287.727 596.568 282.19 602.293 cv
244.239 641.536 165.269 723.194 114.014 723.194 cv
96.7813 723.194 li
96.7813 860.059 li
cp
306.018 925.416 mo
201.296 925.416 li
157.986 925.416 88.7476 871.002 85.8223 868.684 cv
84.2021 867.4 83.2573 865.449 83.2573 863.384 cv
83.2573 716.433 li
83.2573 712.697 86.2837 709.67 90.019 709.67 cv
114.014 709.67 li
159.534 709.67 238.673 627.835 272.468 592.89 cv
280.839 584.234 286.888 577.981 290.596 574.691 cv
292.716 572.807 295.791 572.45 298.286 573.793 cv
308.69 579.389 314.837 587.444 316.555 597.739 cv
319.761 616.956 306.828 642.428 278.115 673.453 cv
265.52 687.058 261.917 698.14 263.9 702.676 cv
265.367 706.031 271.175 707.957 279.837 707.957 cv
455.123 707.957 li
473.014 707.957 495.708 724.112 495.708 742.271 cv
495.708 749.621 492.087 756.247 486.645 761.576 cv
499.761 765.795 509.276 778.117 509.276 792.619 cv
509.276 810.596 494.656 825.216 476.686 825.216 cv
348.754 825.216 li
352.036 830.319 353.895 836.331 353.895 842.63 cv
353.895 856.814 344.79 868.912 332.115 873.386 cv
336.239 878.872 338.615 885.642 338.615 892.815 cv
338.615 907.455 328.743 920.31 314.568 924.172 cv
313.382 924.573 310.377 925.416 306.018 925.416 cv
cp
f
464.062 773.543 mo
309.085 773.543 li
305.351 773.543 302.324 770.518 302.324 766.783 cv
302.324 763.047 305.35 760.021 309.085 760.021 cv
464.061 760.021 li
467.796 760.021 470.824 763.047 470.824 766.783 cv
470.824 770.518 467.796 773.543 464.062 773.543 cv
cp
f
326.738 825.216 mo
296.271 825.216 li
292.535 825.216 289.509 822.189 289.509 818.454 cv
289.509 814.719 292.535 811.693 296.271 811.693 cv
326.738 811.693 li
330.472 811.693 333.499 814.719 333.499 818.454 cv
333.499 822.189 330.472 825.216 326.738 825.216 cv
cp
f
321.296 875.848 mo
285.78 875.848 li
282.045 875.848 279.019 872.822 279.019 869.088 cv
279.019 865.352 282.045 862.324 285.78 862.324 cv
321.296 862.324 li
325.031 862.324 328.058 865.352 328.058 869.088 cv
328.058 872.822 325.031 875.848 321.296 875.848 cv
cp
f
74.8599 709.354 mo
73.2617 709.354 71.9604 710.655 71.9604 712.254 cv
71.9604 875.248 li
71.9604 876.846 73.2617 878.145 74.8599 878.145 cv
80.3569 878.145 li
81.9565 878.145 83.2573 876.846 83.2573 875.248 cv
83.2573 712.254 li
83.2573 710.655 81.9565 709.354 80.3569 709.354 cv
74.8599 709.354 li
cp
80.3569 891.667 mo
74.8599 891.667 li
65.8047 891.667 58.437 884.302 58.437 875.248 cv
58.437 712.254 li
58.437 703.197 65.8047 695.831 74.8599 695.831 cv
80.3569 695.831 li
89.4136 695.831 96.7813 703.197 96.7813 712.254 cv
96.7813 875.248 li
96.7813 884.302 89.4136 891.667 80.3569 891.667 cv
cp
f
733.286 1359.57 mo
762.69 1381.2 802.188 1404.63 824.26 1404.63 cv
928.98 1404.63 li
929.188 1404.63 929.352 1404.63 929.465 1404.61 cv
929.738 1404.53 930.008 1404.46 930.359 1404.36 cv
932.801 1403.72 934.508 1401.56 934.508 1399.11 cv
934.508 1397.54 933.777 1396.08 932.559 1395.06 cv
910.881 1395.06 li
899.684 1395.06 890.574 1385.95 890.574 1374.76 cv
890.574 1363.56 899.684 1354.45 910.881 1354.45 cv
944.26 1354.45 li
947.307 1354.45 949.789 1351.97 949.789 1348.93 cv
949.789 1347.35 949.063 1345.89 947.846 1344.88 cv
927.352 1344.88 li
916.154 1344.88 907.045 1335.78 907.045 1324.58 cv
907.045 1313.38 916.154 1304.27 927.352 1304.27 cv
966.074 1304.27 li
969.121 1304.27 971.604 1301.79 971.604 1298.74 cv
971.604 1297.17 970.885 1295.71 969.678 1294.71 cv
940.199 1294.71 li
929.002 1294.71 919.895 1285.6 919.895 1274.4 cv
919.895 1263.2 929.002 1254.09 940.199 1254.09 cv
1078.09 1254.09 li
1082.4 1254.09 1088.35 1250.92 1090.85 1248.42 cv
1088.37 1245.73 1082.23 1242.15 1078.09 1242.15 cv
902.797 1242.15 li
875.637 1242.15 865.645 1228.57 862.109 1220.48 cv
854.744 1203.62 861.529 1182.63 881.213 1161.36 cv
899.52 1141.58 907.588 1122.24 908.166 1109.63 cv
906.785 1111.21 905.357 1112.85 903.889 1114.55 cv
847.469 1179.56 788.107 1243.03 736.977 1243.03 cv
733.286 1243.03 li
733.286 1359.57 li
cp
f
1078.09 1267.64 mo
986.055 1267.64 li
974.395 1267.64 li
940.199 1267.64 li
936.465 1267.64 933.438 1270.67 933.438 1274.4 cv
933.438 1278.14 936.465 1281.16 940.199 1281.16 cv
973.053 1281.16 li
980.311 1284.03 985.148 1290.96 985.148 1298.74 cv
985.148 1309.26 976.59 1317.82 966.074 1317.82 cv
952.563 1317.82 li
927.352 1317.82 li
923.617 1317.82 920.59 1320.84 920.59 1324.58 cv
920.59 1328.31 923.617 1331.34 927.352 1331.34 cv
951.219 1331.34 li
958.486 1334.21 963.334 1341.14 963.334 1348.93 cv
963.334 1359.44 954.777 1367.99 944.26 1367.99 cv
937.279 1367.99 li
910.881 1367.99 li
907.146 1367.99 904.119 1371.02 904.119 1374.76 cv
904.119 1378.49 907.146 1381.52 910.881 1381.52 cv
935.932 1381.52 li
943.203 1384.4 948.051 1391.33 948.051 1399.11 cv
948.051 1407.71 942.191 1415.26 933.807 1417.46 cv
933.555 1417.53 933.438 1417.56 933.195 1417.65 cv
933.182 1417.66 931.631 1418.18 928.98 1418.18 cv
824.26 1418.18 li
789.916 1418.18 732.517 1376.06 719.742 1366.35 cv
719.742 1229.49 li
736.977 1229.49 li
782.395 1229.49 841.67 1165.58 893.66 1105.67 cv
901.135 1097.06 907.428 1089.8 911.762 1085.26 cv
916.881 1089.29 920.066 1094.88 921.246 1101.96 cv
924.391 1120.82 912.861 1147.1 891.152 1170.56 cv
875.578 1187.39 869.516 1203.6 874.518 1215.05 cv
877.223 1221.24 884.322 1228.61 902.797 1228.61 cv
1078.09 1228.61 li
1089.26 1228.61 1105.14 1238.93 1105.14 1248.56 cv
1105.14 1258.03 1089.4 1267.64 1078.09 1267.64 cv
cp
706.219 1378.87 mo
706.219 1380.46 704.92 1381.77 703.322 1381.77 cv
697.822 1381.77 li
696.225 1381.77 694.923 1380.46 694.923 1378.87 cv
694.923 1216.2 li
694.923 1214.6 696.225 1213.3 697.822 1213.3 cv
703.322 1213.3 li
704.92 1213.3 706.219 1214.6 706.219 1216.2 cv
706.219 1222.73 li
706.219 1369.67 li
706.219 1378.87 li
cp
1078.09 1215.08 mo
902.797 1215.08 li
897.752 1215.08 888.982 1214.37 886.912 1209.64 cv
884.826 1204.86 888.369 1193.48 901.076 1179.75 cv
925.936 1152.89 938.463 1122.98 934.588 1099.74 cv
932.426 1086.78 925.334 1076.74 914.084 1070.69 cv
911.58 1069.34 908.512 1069.7 906.393 1071.58 cv
901.797 1075.66 894.098 1084.53 883.445 1096.81 cv
849.879 1135.48 780.031 1215.97 736.977 1215.97 cv
719.729 1215.97 li
719.605 1207.02 712.297 1199.78 703.322 1199.78 cv
697.822 1199.78 li
688.767 1199.78 681.4 1207.14 681.4 1216.2 cv
681.4 1378.87 li
681.4 1387.92 688.767 1395.29 697.822 1395.29 cv
703.322 1395.29 li
711.005 1395.29 717.451 1389.98 719.234 1382.84 cv
740.725 1398.47 790.408 1431.7 824.26 1431.7 cv
928.98 1431.7 li
933.344 1431.7 936.346 1430.86 937.525 1430.47 cv
951.699 1426.6 961.576 1413.75 961.576 1399.11 cv
961.576 1391.94 959.199 1385.17 955.074 1379.68 cv
967.75 1375.21 976.855 1363.11 976.855 1348.93 cv
976.855 1342.36 974.865 1336.13 971.365 1330.91 cv
986.832 1328.38 998.67 1314.92 998.67 1298.74 cv
998.67 1292.35 996.791 1286.29 993.473 1281.16 cv
1078.09 1281.16 li
1096.47 1281.16 1118.67 1266.62 1118.67 1248.56 cv
1118.67 1230.53 1096.35 1215.08 1078.09 1215.08 cv
cp
f
1738.17 1371.13 mo
1834.35 1371.13 li
1837.54 1360.29 1842.76 1349.3 1848.19 1337.84 cv
1857.67 1317.84 1868.4 1295.21 1868.4 1271.57 cv
1868.4 1219.06 li
1868.4 1218.64 1868.42 1218.23 1868.45 1217.82 cv
1868.46 1217.57 1868.48 1217.29 1868.51 1216.98 cv
1868.51 1153.75 li
1868.51 1150.81 1866.2 1148.4 1863.3 1148.23 cv
1863.3 1163.99 li
1863.3 1175.18 1854.2 1184.29 1843 1184.29 cv
1831.8 1184.29 1822.69 1175.18 1822.69 1163.99 cv
1822.69 1134.55 li
1822.69 1131.61 1820.38 1129.19 1817.48 1129.03 cv
1817.48 1158.76 li
1817.48 1169.95 1808.37 1179.06 1797.17 1179.06 cv
1785.98 1179.06 1776.87 1169.95 1776.87 1158.76 cv
1776.87 1111.16 li
1776.87 1108.11 1774.39 1105.63 1771.34 1105.63 cv
1769.03 1105.63 1766.89 1107.28 1766.18 1109.52 cv
1766.18 1145.67 li
1766.18 1156.87 1757.07 1165.98 1745.88 1165.98 cv
1734.68 1165.98 1725.57 1156.87 1725.57 1145.67 cv
1725.57 1117.67 li
1725.55 1117.67 1725.54 1117.67 1725.52 1117.67 cv
1722.47 1117.67 1719.99 1120.15 1719.99 1123.2 cv
1719.99 1222.86 li
1719.99 1234.06 1710.88 1243.17 1699.69 1243.17 cv
1695.61 1243.17 1691.81 1241.96 1688.63 1239.88 cv
1692.55 1258.9 1701.16 1276.09 1710.72 1295.19 cv
1722.29 1318.3 1734.18 1342.08 1738.17 1371.13 cv
cp
f
1882.05 1217.77 mo
1882.01 1218.07 1881.98 1218.38 1881.96 1218.7 cv
1881.95 1218.82 1881.95 1218.94 1881.95 1219.06 cv
1881.95 1271.57 li
1881.95 1298.26 1870.52 1322.36 1860.44 1343.63 cv
1853.28 1358.72 1846.95 1372.07 1845.18 1384.68 cv
1725.85 1384.68 li
1724.22 1352.44 1711.21 1326.45 1698.61 1301.26 cv
1685.35 1274.77 1672.83 1249.75 1672.83 1218.06 cv
1672.83 1187.46 1681.62 1174.6 1685.84 1168.42 cv
1686.59 1167.32 1688.03 1167.09 1689.11 1167.09 cv
1690.35 1167.09 1691.67 1167.45 1692.92 1168.02 cv
1692.92 1222.86 li
1692.92 1226.59 1695.95 1229.62 1699.69 1229.62 cv
1703.42 1229.62 1706.45 1226.59 1706.45 1222.86 cv
1706.45 1164.22 li
1706.45 1123.2 li
1706.45 1112.69 1715.01 1104.13 1725.52 1104.13 cv
1730.67 1104.13 1735.51 1106.24 1739.12 1109.97 cv
1739.12 1145.67 li
1739.12 1149.41 1742.14 1152.43 1745.88 1152.43 cv
1749.61 1152.43 1752.64 1149.41 1752.64 1145.67 cv
1752.64 1108.08 li
1754.14 1098.93 1762.11 1092.08 1771.34 1092.08 cv
1781.86 1092.08 1790.41 1100.64 1790.41 1111.16 cv
1790.41 1118.37 li
1790.41 1158.76 li
1790.41 1162.49 1793.44 1165.52 1797.17 1165.52 cv
1800.91 1165.52 1803.94 1162.49 1803.94 1158.76 cv
1803.94 1120.97 li
1807.5 1117.46 1812.21 1115.47 1817.16 1115.47 cv
1827.68 1115.47 1836.23 1124.03 1836.23 1134.55 cv
1836.23 1137.56 li
1836.23 1163.99 li
1836.23 1167.72 1839.26 1170.75 1843 1170.75 cv
1846.73 1170.75 1849.76 1167.72 1849.76 1163.99 cv
1849.76 1140.17 li
1853.33 1136.66 1858.04 1134.68 1862.98 1134.68 cv
1873.5 1134.68 1882.05 1143.24 1882.05 1153.75 cv
1882.05 1217.77 li
cp
1859.42 1406.6 mo
1859.42 1408.2 1858.12 1409.5 1856.52 1409.5 cv
1715.84 1409.5 li
1714.24 1409.5 1712.94 1408.2 1712.94 1406.6 cv
1712.94 1401.1 li
1712.94 1399.5 1714.24 1398.2 1715.84 1398.2 cv
1719.26 1398.2 li
1851.46 1398.2 li
1856.52 1398.2 li
1858.12 1398.2 1859.42 1399.5 1859.42 1401.1 cv
1859.42 1406.6 li
cp
1862.98 1121.16 mo
1857.79 1121.16 1852.76 1122.41 1848.25 1124.73 cv
1844.07 1111.54 1831.72 1101.95 1817.16 1101.95 cv
1812.33 1101.95 1807.63 1103.03 1803.37 1105.06 cv
1800.5 1089.99 1787.23 1078.56 1771.34 1078.56 cv
1759.23 1078.56 1748.38 1085.41 1742.81 1095.63 cv
1737.69 1092.37 1731.74 1090.6 1725.52 1090.6 cv
1707.55 1090.6 1692.92 1105.23 1692.92 1123.2 cv
1692.92 1153.92 li
1691.66 1153.69 1690.37 1153.57 1689.11 1153.57 cv
1683.07 1153.57 1677.8 1156.2 1674.67 1160.79 cv
1669.69 1168.09 1659.31 1183.29 1659.31 1218.06 cv
1659.31 1252.95 1673.14 1280.58 1686.52 1307.31 cv
1698.98 1332.22 1710.8 1355.85 1712.32 1385.07 cv
1704.96 1386.68 1699.42 1393.25 1699.42 1401.1 cv
1699.42 1406.6 li
1699.42 1415.65 1706.79 1423.02 1715.84 1423.02 cv
1856.52 1423.02 li
1865.57 1423.02 1872.94 1415.65 1872.94 1406.6 cv
1872.94 1401.1 li
1872.94 1392.84 1866.8 1386 1858.85 1384.86 cv
1860.7 1374.65 1866.32 1362.78 1872.65 1349.42 cv
1883.35 1326.87 1895.47 1301.3 1895.47 1271.57 cv
1895.47 1219.45 li
1895.54 1218.99 1895.58 1218.53 1895.58 1218.06 cv
1895.58 1153.75 li
1895.58 1135.78 1880.95 1121.16 1862.98 1121.16 cv
cp
f
1345.25 1413.97 mo
1441.48 1413.97 li
1444.72 1403.66 1449.88 1393.26 1455.27 1382.43 cv
1464.68 1363.5 1475.33 1342.09 1475.33 1319.96 cv
1475.33 1269.88 li
1475.33 1269.56 1475.34 1269.23 1475.35 1268.91 cv
1475.38 1268.54 1475.4 1268.19 1475.43 1267.84 cv
1475.43 1207.6 li
1475.43 1205.05 1472.29 1202.9 1469.14 1203.31 cv
1469.14 1211.52 li
1469.14 1222.71 1460.04 1231.82 1448.84 1231.82 cv
1437.64 1231.82 1428.53 1222.71 1428.53 1211.52 cv
1428.53 1186.78 li
1427.48 1185.64 1425.52 1184.72 1423.36 1185 cv
1423.36 1201.06 li
1423.36 1212.26 1414.25 1221.37 1403.05 1221.37 cv
1391.86 1221.37 1382.75 1212.26 1382.75 1201.06 cv
1382.75 1164.51 li
1381.95 1163.63 1380.71 1162.89 1379.1 1162.7 cv
1379.1 1195.83 li
1379.1 1207.02 1369.99 1216.13 1358.79 1216.13 cv
1347.6 1216.13 1338.49 1207.02 1338.49 1195.83 cv
1338.49 1066.46 li
1338.49 1063.25 1336.4 1060.93 1333.51 1060.93 cv
1330.36 1060.93 1329.23 1063.91 1329.23 1066.46 cv
1329.23 1256 li
1329.23 1267.2 1320.13 1276.31 1308.93 1276.31 cv
1297.73 1276.31 1288.62 1267.2 1288.62 1256 cv
1288.62 1237.58 li
1276.56 1213.21 1263.17 1191.98 1250.77 1177.59 cv
1248.87 1175.39 1245.19 1175.08 1242.95 1177.01 cv
1240.65 1179 1240.39 1182.5 1242.39 1184.81 cv
1255.05 1199.5 1264.36 1225.08 1274.22 1252.17 cv
1278.77 1264.65 1283.47 1277.55 1288.22 1288.42 cv
1288.45 1288.93 1288.64 1289.44 1288.82 1289.94 cv
1298.62 1318.33 1309.6 1335.78 1319.28 1351.17 cv
1331.22 1370.15 1341.74 1386.88 1345.25 1413.97 cv
cp
f
1488.98 1268.62 mo
1488.94 1268.92 1488.9 1269.23 1488.88 1269.53 cv
1488.88 1269.65 1488.88 1269.76 1488.88 1269.88 cv
1488.88 1319.96 li
1488.88 1345.27 1477.48 1368.2 1467.41 1388.43 cv
1460.29 1402.77 1453.97 1415.47 1452.15 1427.51 cv
1332.81 1427.51 li
1331.5 1396.03 1320.95 1379.26 1307.82 1358.39 cv
1297.75 1342.37 1286.33 1324.23 1276.01 1294.35 cv
1275.95 1294.18 1275.88 1294.01 1275.81 1293.85 cv
1270.89 1282.6 1266.11 1269.48 1261.49 1256.8 cv
1252.07 1230.91 1243.17 1206.46 1232.13 1193.65 cv
1225.26 1185.68 1226.15 1173.61 1234.12 1166.75 cv
1237.58 1163.77 1242 1162.13 1246.56 1162.13 cv
1252.12 1162.13 1257.39 1164.54 1261.02 1168.74 cv
1274.69 1184.59 1289.26 1207.89 1302.16 1234.44 cv
1302.16 1256 li
1302.16 1259.74 1305.19 1262.77 1308.93 1262.77 cv
1312.66 1262.77 1315.69 1259.74 1315.69 1256 cv
1315.69 1232.88 li
1315.69 1220.7 li
1315.69 1066.46 li
1315.69 1055.58 1323.35 1047.38 1333.51 1047.38 cv
1343.9 1047.38 1352.03 1055.76 1352.03 1066.46 cv
1352.03 1140.91 li
1352.03 1150.41 li
1352.03 1195.83 li
1352.03 1199.56 1355.06 1202.59 1358.79 1202.59 cv
1362.53 1202.59 1365.56 1199.56 1365.56 1195.83 cv
1365.56 1153.42 li
1369.01 1150.73 1373.66 1149.1 1378.26 1149.1 cv
1386.67 1149.1 1393.81 1154.24 1396.35 1161.33 cv
1396.33 1161.5 1396.29 1161.67 1396.29 1161.84 cv
1396.29 1201.06 li
1396.29 1204.8 1399.32 1207.82 1403.05 1207.82 cv
1406.79 1207.82 1409.82 1204.8 1409.82 1201.06 cv
1409.82 1177.64 li
1413.48 1173.69 1418.62 1171.41 1424.09 1171.41 cv
1432.4 1171.41 1439.47 1176.43 1442.08 1183.4 cv
1442.08 1211.52 li
1442.08 1215.25 1445.1 1218.28 1448.84 1218.28 cv
1452.57 1218.28 1455.6 1215.25 1455.6 1211.52 cv
1455.6 1195.99 li
1459.27 1192.01 1464.42 1189.72 1469.9 1189.72 cv
1480.42 1189.72 1488.98 1197.74 1488.98 1207.6 cv
1488.98 1268.62 li
cp
1462.16 1451.3 mo
1462.16 1452.89 1460.86 1454.2 1459.27 1454.2 cv
1318.58 1454.2 li
1316.99 1454.2 1315.69 1452.89 1315.69 1451.3 cv
1315.69 1445.8 li
1315.69 1444.21 1316.99 1442.91 1318.58 1442.91 cv
1459.27 1442.91 li
1460.86 1442.91 1462.16 1444.21 1462.16 1445.8 cv
1462.16 1451.3 li
cp
1469.9 1176.2 mo
1464.77 1176.2 1459.79 1177.39 1455.31 1179.59 cv
1455.09 1178.82 1454.75 1178.11 1454.29 1177.48 cv
1449.43 1166 1437.73 1157.89 1424.09 1157.89 cv
1419.24 1157.89 1414.53 1158.94 1410.25 1160.91 cv
1407.3 1146.49 1394.08 1135.58 1378.26 1135.58 cv
1373.9 1135.58 1369.56 1136.43 1365.56 1138.01 cv
1365.56 1066.46 li
1365.56 1048.18 1351.48 1033.86 1333.51 1033.86 cv
1315.94 1033.86 1302.16 1048.18 1302.16 1066.46 cv
1302.16 1205.27 li
1292.08 1187.37 1281.46 1171.73 1271.27 1159.91 cv
1265.06 1152.72 1256.06 1148.6 1246.56 1148.6 cv
1238.76 1148.6 1231.21 1151.41 1225.29 1156.5 cv
1211.68 1168.24 1210.15 1188.86 1221.88 1202.48 cv
1231.31 1213.41 1240.19 1237.82 1248.79 1261.42 cv
1253.45 1274.22 1258.26 1287.44 1263.31 1299.02 cv
1274.12 1330.21 1286.46 1349.83 1296.37 1365.59 cv
1309.05 1385.74 1318.38 1400.63 1319.33 1429.38 cv
1318.58 1429.38 li
1309.53 1429.38 1302.16 1436.75 1302.16 1445.8 cv
1302.16 1451.3 li
1302.16 1460.35 1309.53 1467.72 1318.58 1467.72 cv
1459.27 1467.72 li
1468.32 1467.72 1475.69 1460.35 1475.69 1451.3 cv
1475.69 1445.8 li
1475.69 1438.91 1471.42 1433.01 1465.39 1430.58 cv
1466.63 1420.4 1472.65 1408.26 1479.53 1394.45 cv
1490.25 1372.89 1502.4 1348.45 1502.4 1319.96 cv
1502.4 1270.28 li
1502.46 1269.84 1502.5 1269.39 1502.5 1268.93 cv
1502.5 1207.6 li
1502.5 1190.28 1487.88 1176.2 1469.9 1176.2 cv
cp
f
110.324 1354.86 mo
139.721 1376.5 179.216 1399.94 201.295 1399.94 cv
306.018 1399.94 li
306.208 1399.94 306.36 1399.93 306.472 1399.92 cv
306.75 1399.83 307.044 1399.75 307.425 1399.65 cv
309.839 1399.02 311.547 1396.85 311.547 1394.41 cv
311.547 1393.13 311.076 1391.93 310.25 1390.98 cv
285.779 1390.98 li
274.583 1390.98 265.474 1381.87 265.474 1370.68 cv
265.474 1359.48 274.583 1350.37 285.779 1350.37 cv
309.383 1350.37 li
310.997 1349.96 312.645 1349.75 314.314 1349.75 cv
321.295 1349.75 li
324.345 1349.75 326.827 1347.27 326.827 1344.22 cv
326.827 1342.76 326.155 1341.36 325.046 1340.35 cv
296.269 1340.35 li
285.073 1340.35 275.964 1331.24 275.964 1320.04 cv
275.964 1308.84 285.073 1299.74 296.269 1299.74 cv
326.736 1299.74 li
327.285 1299.74 327.83 1299.76 328.377 1299.81 cv
328.919 1299.76 329.461 1299.74 330.001 1299.74 cv
476.685 1299.74 li
479.73 1299.74 482.209 1297.25 482.209 1294.21 cv
482.209 1291.16 479.73 1288.68 476.685 1288.68 cv
309.085 1288.68 li
297.889 1288.68 288.779 1279.57 288.779 1268.37 cv
288.779 1257.17 297.889 1248.06 309.085 1248.06 cv
460.805 1248.06 li
464.042 1246.79 466.635 1244.94 467.979 1243.59 cv
465.54 1240.58 458.939 1236.61 455.123 1236.61 cv
279.837 1236.61 li
252.563 1236.61 242.604 1223.13 239.095 1215.1 cv
231.868 1198.56 238.67 1177.8 258.25 1156.65 cv
272.208 1141.57 280.757 1129.26 285.414 1120.03 cv
241.84 1164.94 168.16 1238.33 114.014 1238.33 cv
110.324 1238.33 li
110.324 1354.86 li
cp
f
476.685 1313.28 mo
330.001 1313.28 li
329.44 1313.28 328.901 1313.37 328.374 1313.5 cv
327.847 1313.37 327.306 1313.28 326.736 1313.28 cv
296.269 1313.28 li
292.535 1313.28 289.508 1316.31 289.508 1320.04 cv
289.508 1323.78 292.535 1326.8 296.269 1326.8 cv
326.736 1326.8 li
327.244 1326.8 327.736 1326.74 328.212 1326.63 cv
335.495 1329.5 340.371 1336.48 340.371 1344.22 cv
340.371 1354.74 331.813 1363.29 321.295 1363.29 cv
314.314 1363.29 li
313.328 1363.29 312.396 1363.53 311.542 1363.91 cv
285.779 1363.91 li
282.044 1363.91 279.018 1366.94 279.018 1370.68 cv
279.018 1374.41 282.044 1377.44 285.779 1377.44 cv
314.408 1377.44 li
320.875 1380.62 325.091 1387.14 325.091 1394.41 cv
325.091 1403 319.232 1410.55 310.842 1412.76 cv
310.588 1412.83 310.467 1412.86 310.225 1412.95 cv
310.208 1412.96 308.659 1413.48 306.018 1413.48 cv
201.295 1413.48 li
166.954 1413.48 109.555 1371.36 96.7808 1361.65 cv
96.7798 1224.78 li
114.014 1224.78 li
165.269 1224.78 244.239 1143.13 282.189 1103.88 cv
287.727 1098.16 292.443 1093.28 295.909 1089.87 cv
300.031 1093.02 302.434 1096.88 303.214 1101.55 cv
305.626 1116.01 293.188 1138.84 268.189 1165.85 cv
252.719 1182.57 246.638 1198.54 251.507 1209.68 cv
254.175 1215.79 261.257 1223.07 279.837 1223.07 cv
455.123 1223.07 li
466.053 1223.07 482.185 1234.02 482.185 1243.86 cv
482.185 1251.37 472.408 1258.78 463.056 1261.61 cv
309.085 1261.61 li
305.35 1261.61 302.324 1264.64 302.324 1268.37 cv
302.324 1272.11 305.35 1275.13 309.085 1275.13 cv
464.061 1275.13 li
476.685 1275.13 li
487.198 1275.13 495.753 1283.69 495.753 1294.21 cv
495.753 1304.72 487.198 1313.28 476.685 1313.28 cv
cp
83.2568 1376.84 mo
83.2568 1378.43 81.9565 1379.73 80.3564 1379.73 cv
74.8594 1379.73 li
73.2612 1379.73 71.96 1378.43 71.96 1376.84 cv
71.96 1213.84 li
71.96 1212.24 73.2612 1210.94 74.8589 1210.94 cv
80.3564 1210.94 li
81.9556 1210.94 83.2568 1212.24 83.2568 1213.84 cv
83.2568 1218.02 li
83.2568 1364.97 li
83.2568 1376.84 li
cp
486.644 1263.17 mo
492.087 1257.84 495.708 1251.21 495.708 1243.86 cv
495.708 1225.7 473.013 1209.55 455.123 1209.55 cv
279.837 1209.55 li
271.174 1209.55 265.366 1207.62 263.899 1204.26 cv
261.917 1199.73 265.52 1188.65 278.114 1175.04 cv
306.828 1144.02 319.761 1118.54 316.555 1099.33 cv
314.836 1089.03 308.69 1080.98 298.286 1075.38 cv
295.791 1074.04 292.715 1074.4 290.595 1076.28 cv
286.888 1079.57 280.839 1085.82 272.468 1094.48 cv
238.673 1129.42 159.533 1211.26 114.014 1211.26 cv
96.5566 1211.26 li
95.3115 1203.43 88.5317 1197.42 80.3564 1197.42 cv
74.8589 1197.42 li
65.8042 1197.42 58.437 1204.79 58.437 1213.84 cv
58.437 1376.84 li
58.437 1385.89 65.8042 1393.26 74.8594 1393.26 cv
80.3564 1393.26 li
88.8696 1393.26 95.8862 1386.75 96.6982 1378.45 cv
118.405 1394.2 167.661 1427 201.295 1427 cv
306.018 1427 li
310.376 1427 313.381 1426.16 314.567 1425.76 cv
328.742 1421.9 338.615 1409.04 338.615 1394.41 cv
338.615 1387.23 336.239 1380.46 332.115 1374.97 cv
344.789 1370.5 353.894 1358.4 353.894 1344.22 cv
353.894 1337.92 352.034 1331.91 348.754 1326.8 cv
476.685 1326.8 li
494.655 1326.8 509.276 1312.18 509.276 1294.21 cv
509.276 1279.71 499.761 1267.38 486.644 1263.17 cv
cp
f
71.8647 1729.06 mo
58.3198 1729.06 li
58.3198 1715.51 li
71.8647 1715.51 li
71.8647 1729.06 li
cp
f
71.8647 1742.6 mo
58.3198 1742.6 li
58.3198 1729.06 li
71.8647 1729.06 li
71.8647 1742.6 li
cp
f
71.8647 1756.14 mo
58.3198 1756.14 li
58.3198 1742.6 li
71.8647 1742.6 li
71.8647 1756.14 li
cp
f
71.8647 1769.69 mo
58.3198 1769.69 li
58.3198 1756.14 li
71.8647 1756.14 li
71.8647 1769.69 li
cp
f
71.8647 1783.23 mo
58.3198 1783.23 li
58.3198 1769.69 li
71.8647 1769.69 li
71.8647 1783.23 li
cp
f
71.8647 1796.78 mo
58.3198 1796.78 li
58.3198 1783.23 li
71.8647 1783.23 li
71.8647 1796.78 li
cp
f
71.8647 1810.32 mo
58.3198 1810.32 li
58.3198 1796.78 li
71.8647 1796.78 li
71.8647 1810.32 li
cp
f
71.8647 1823.87 mo
58.3198 1823.87 li
58.3198 1810.32 li
71.8647 1810.32 li
71.8647 1823.87 li
cp
f
71.8647 1837.41 mo
58.3198 1837.41 li
58.3198 1823.87 li
71.8647 1823.87 li
71.8647 1837.41 li
cp
f
71.8647 1850.95 mo
58.3198 1850.95 li
58.3198 1837.41 li
71.8647 1837.41 li
71.8647 1850.95 li
cp
f
71.8647 1864.5 mo
58.3198 1864.5 li
58.3198 1850.95 li
71.8647 1850.95 li
71.8647 1864.5 li
cp
f
71.8647 1878.04 mo
58.3198 1878.04 li
58.3198 1864.5 li
71.8647 1864.5 li
71.8647 1878.04 li
cp
f
78.6367 1891.59 mo
65.0923 1891.59 li
65.0923 1878.04 li
78.6367 1878.04 li
78.6367 1891.59 li
cp
f
92.1812 1891.59 mo
78.6367 1891.59 li
78.6367 1878.04 li
92.1812 1878.04 li
92.1812 1891.59 li
cp
f
78.6367 1715.51 mo
65.0923 1715.51 li
65.0923 1701.97 li
78.6367 1701.97 li
78.6367 1715.51 li
cp
f
84.6128 1701.97 mo
71.0684 1701.97 li
71.0684 1688.42 li
84.6128 1688.42 li
84.6128 1701.97 li
cp
f
84.6128 1905.13 mo
71.0684 1905.13 li
71.0684 1891.59 li
84.6128 1891.59 li
84.6128 1905.13 li
cp
f
92.1812 1715.51 mo
78.6367 1715.51 li
78.6367 1701.97 li
92.1812 1701.97 li
92.1812 1715.51 li
cp
f
98.9536 1878.04 mo
85.4092 1878.04 li
85.4092 1864.5 li
98.9536 1864.5 li
98.9536 1878.04 li
cp
f
112.498 1884.82 mo
98.9536 1884.82 li
98.9536 1871.27 li
112.498 1871.27 li
112.498 1884.82 li
cp
f
126.042 1891.59 mo
112.498 1891.59 li
112.498 1878.04 li
126.042 1878.04 li
126.042 1891.59 li
cp
f
139.586 1898.36 mo
126.042 1898.36 li
126.042 1884.82 li
139.586 1884.82 li
139.586 1898.36 li
cp
f
153.131 1908.17 mo
139.586 1908.17 li
139.586 1894.63 li
153.131 1894.63 li
153.131 1908.17 li
cp
f
166.675 1914.95 mo
153.131 1914.95 li
153.131 1901.4 li
166.675 1901.4 li
166.675 1914.95 li
cp
f
180.22 1921.72 mo
166.675 1921.72 li
166.675 1908.17 li
180.22 1908.17 li
180.22 1921.72 li
cp
f
193.764 1927.49 mo
180.22 1927.49 li
180.22 1913.94 li
193.764 1913.94 li
193.764 1927.49 li
cp
f
207.308 1927.49 mo
193.764 1927.49 li
193.764 1913.94 li
207.308 1913.94 li
207.308 1927.49 li
cp
f
220.853 1927.49 mo
207.308 1927.49 li
207.308 1913.94 li
220.853 1913.94 li
220.853 1927.49 li
cp
f
234.397 1927.49 mo
220.853 1927.49 li
220.853 1913.94 li
234.397 1913.94 li
234.397 1927.49 li
cp
f
247.941 1927.49 mo
234.397 1927.49 li
234.397 1913.94 li
247.941 1913.94 li
247.941 1927.49 li
cp
f
261.486 1927.49 mo
247.941 1927.49 li
247.941 1913.94 li
261.486 1913.94 li
261.486 1927.49 li
cp
f
275.03 1927.49 mo
261.486 1927.49 li
261.486 1913.94 li
275.03 1913.94 li
275.03 1927.49 li
cp
f
288.574 1927.49 mo
275.03 1927.49 li
275.03 1913.94 li
288.574 1913.94 li
288.574 1927.49 li
cp
f
302.119 1927.49 mo
288.574 1927.49 li
288.574 1913.94 li
302.119 1913.94 li
302.119 1927.49 li
cp
f
315.664 1927.49 mo
302.119 1927.49 li
302.119 1913.94 li
315.664 1913.94 li
315.664 1927.49 li
cp
f
329.208 1921.72 mo
315.664 1921.72 li
315.664 1908.17 li
329.208 1908.17 li
329.208 1921.72 li
cp
f
340.514 1908.17 mo
326.97 1908.17 li
326.97 1894.63 li
340.514 1894.63 li
340.514 1908.17 li
cp
f
340.514 1894.63 mo
326.97 1894.63 li
326.97 1881.09 li
340.514 1881.09 li
340.514 1894.63 li
cp
f
340.514 1867.54 mo
326.97 1867.54 li
326.97 1854 li
340.514 1854 li
340.514 1867.54 li
cp
f
354.058 1854.91 mo
340.514 1854.91 li
340.514 1841.37 li
354.058 1841.37 li
354.058 1854.91 li
cp
f
347.286 1841.37 mo
333.742 1841.37 li
333.742 1827.82 li
347.286 1827.82 li
347.286 1841.37 li
cp
f
306.653 1827.29 mo
293.108 1827.29 li
293.108 1813.75 li
306.653 1813.75 li
306.653 1827.29 li
cp
f
320.197 1827.29 mo
306.653 1827.29 li
306.653 1813.75 li
320.197 1813.75 li
320.197 1827.29 li
cp
f
333.742 1827.29 mo
320.197 1827.29 li
320.197 1813.75 li
333.742 1813.75 li
333.742 1827.29 li
cp
f
347.286 1827.29 mo
333.742 1827.29 li
333.742 1813.75 li
347.286 1813.75 li
347.286 1827.29 li
cp
f
360.831 1827.29 mo
347.286 1827.29 li
347.286 1813.75 li
360.831 1813.75 li
360.831 1827.29 li
cp
f
374.375 1827.29 mo
360.831 1827.29 li
360.831 1813.75 li
374.375 1813.75 li
374.375 1827.29 li
cp
f
387.919 1827.29 mo
374.375 1827.29 li
374.375 1813.75 li
387.919 1813.75 li
387.919 1827.29 li
cp
f
401.463 1827.29 mo
387.919 1827.29 li
387.919 1813.75 li
401.463 1813.75 li
401.463 1827.29 li
cp
f
415.008 1827.29 mo
401.463 1827.29 li
401.463 1813.75 li
415.008 1813.75 li
415.008 1827.29 li
cp
f
428.552 1827.29 mo
415.008 1827.29 li
415.008 1813.75 li
428.552 1813.75 li
428.552 1827.29 li
cp
f
442.096 1827.29 mo
428.552 1827.29 li
428.552 1813.75 li
442.096 1813.75 li
442.096 1827.29 li
cp
f
455.641 1827.29 mo
442.096 1827.29 li
442.096 1813.75 li
455.641 1813.75 li
455.641 1827.29 li
cp
f
469.186 1827.29 mo
455.641 1827.29 li
455.641 1813.75 li
469.186 1813.75 li
469.186 1827.29 li
cp
f
482.73 1827.29 mo
469.186 1827.29 li
469.186 1813.75 li
482.73 1813.75 li
482.73 1827.29 li
cp
f
496.274 1820.52 mo
482.73 1820.52 li
482.73 1806.97 li
496.274 1806.97 li
496.274 1820.52 li
cp
f
489.502 1762.92 mo
475.958 1762.92 li
475.958 1749.37 li
489.502 1749.37 li
489.502 1762.92 li
cp
f
496.274 1749.37 mo
482.73 1749.37 li
482.73 1735.83 li
496.274 1735.83 li
496.274 1749.37 li
cp
f
489.502 1735.83 mo
475.958 1735.83 li
475.958 1722.28 li
489.502 1722.28 li
489.502 1735.83 li
cp
f
475.958 1729.06 mo
462.413 1729.06 li
462.413 1715.51 li
475.958 1715.51 li
475.958 1729.06 li
cp
f
462.413 1722.28 mo
448.869 1722.28 li
448.869 1708.74 li
462.413 1708.74 li
462.413 1722.28 li
cp
f
448.869 1722.28 mo
435.325 1722.28 li
435.325 1708.74 li
448.869 1708.74 li
448.869 1722.28 li
cp
f
435.325 1722.28 mo
421.78 1722.28 li
421.78 1708.74 li
435.325 1708.74 li
435.325 1722.28 li
cp
f
421.78 1722.28 mo
408.236 1722.28 li
408.236 1708.74 li
421.78 1708.74 li
421.78 1722.28 li
cp
f
408.236 1722.28 mo
394.691 1722.28 li
394.691 1708.74 li
408.236 1708.74 li
408.236 1722.28 li
cp
f
394.691 1722.28 mo
381.147 1722.28 li
381.147 1708.74 li
394.691 1708.74 li
394.691 1722.28 li
cp
f
381.147 1722.28 mo
367.602 1722.28 li
367.602 1708.74 li
381.147 1708.74 li
381.147 1722.28 li
cp
f
367.602 1722.28 mo
354.058 1722.28 li
354.058 1708.74 li
367.602 1708.74 li
367.602 1722.28 li
cp
f
354.058 1722.28 mo
340.514 1722.28 li
340.514 1708.74 li
354.058 1708.74 li
354.058 1722.28 li
cp
f
340.514 1722.28 mo
326.97 1722.28 li
326.97 1708.74 li
340.514 1708.74 li
340.514 1722.28 li
cp
f
326.97 1722.28 mo
313.425 1722.28 li
313.425 1708.74 li
326.97 1708.74 li
326.97 1722.28 li
cp
f
313.425 1722.28 mo
299.881 1722.28 li
299.881 1708.74 li
313.425 1708.74 li
313.425 1722.28 li
cp
f
299.881 1722.28 mo
286.336 1722.28 li
286.336 1708.74 li
299.881 1708.74 li
299.881 1722.28 li
cp
f
286.336 1722.28 mo
272.792 1722.28 li
272.792 1708.74 li
286.336 1708.74 li
286.336 1722.28 li
cp
f
272.792 1718.2 mo
259.248 1718.2 li
259.248 1704.66 li
272.792 1704.66 li
272.792 1718.2 li
cp
f
264.213 1704.66 mo
250.668 1704.66 li
250.668 1691.11 li
264.213 1691.11 li
264.213 1704.66 li
cp
f
268.258 1691.11 mo
254.714 1691.11 li
254.714 1677.57 li
268.258 1677.57 li
268.258 1691.11 li
cp
f
277.757 1677.57 mo
264.213 1677.57 li
264.213 1664.02 li
277.757 1664.02 li
277.757 1677.57 li
cp
f
289.341 1664.14 mo
275.797 1664.14 li
275.797 1650.6 li
289.341 1650.6 li
289.341 1664.14 li
cp
f
300.925 1650.6 mo
287.381 1650.6 li
287.381 1637.05 li
300.925 1637.05 li
300.925 1650.6 li
cp
f
310.042 1637.05 mo
296.499 1637.05 li
296.499 1623.51 li
310.042 1623.51 li
310.042 1637.05 li
cp
f
314.47 1623.51 mo
300.925 1623.51 li
300.925 1609.97 li
314.47 1609.97 li
314.47 1623.51 li
cp
f
316.815 1609.97 mo
303.271 1609.97 li
303.271 1596.42 li
316.815 1596.42 li
316.815 1609.97 li
cp
f
313.425 1596.42 mo
299.881 1596.42 li
299.881 1582.88 li
313.425 1582.88 li
313.425 1596.42 li
cp
f
299.881 1589.65 mo
286.336 1589.65 li
286.336 1576.1 li
299.881 1576.1 li
299.881 1589.65 li
cp
f
286.336 1600.41 mo
272.792 1600.41 li
272.792 1586.86 li
286.336 1586.86 li
286.336 1600.41 li
cp
f
277.757 1613.95 mo
264.213 1613.95 li
264.213 1600.41 li
277.757 1600.41 li
277.757 1613.95 li
cp
f
509.519 1810.41 mo
495.975 1810.41 li
495.975 1796.86 li
509.519 1796.86 li
509.519 1810.41 li
cp
f
509.519 1796.78 mo
495.975 1796.78 li
495.975 1783.23 li
509.519 1783.23 li
509.519 1796.78 li
cp
f
503.046 1783.23 mo
489.502 1783.23 li
489.502 1769.69 li
503.046 1769.69 li
503.046 1783.23 li
cp
f
489.502 1775.62 mo
475.958 1775.62 li
475.958 1762.07 li
489.502 1762.07 li
489.502 1775.62 li
cp
f
475.958 1775.62 mo
462.413 1775.62 li
462.413 1762.07 li
475.958 1762.07 li
475.958 1775.62 li
cp
f
462.413 1775.62 mo
448.869 1775.62 li
448.869 1762.07 li
462.413 1762.07 li
462.413 1775.62 li
cp
f
448.869 1775.62 mo
435.325 1775.62 li
435.325 1762.07 li
448.869 1762.07 li
448.869 1775.62 li
cp
f
435.325 1775.62 mo
421.78 1775.62 li
421.78 1762.07 li
435.325 1762.07 li
435.325 1775.62 li
cp
f
421.78 1775.62 mo
408.236 1775.62 li
408.236 1762.07 li
421.78 1762.07 li
421.78 1775.62 li
cp
f
408.236 1775.62 mo
394.691 1775.62 li
394.691 1762.07 li
408.236 1762.07 li
408.236 1775.62 li
cp
f
394.691 1775.62 mo
381.147 1775.62 li
381.147 1762.07 li
394.691 1762.07 li
394.691 1775.62 li
cp
f
381.147 1775.62 mo
367.602 1775.62 li
367.602 1762.07 li
381.147 1762.07 li
381.147 1775.62 li
cp
f
367.602 1775.62 mo
354.058 1775.62 li
354.058 1762.07 li
367.602 1762.07 li
367.602 1775.62 li
cp
f
354.058 1775.62 mo
340.514 1775.62 li
340.514 1762.07 li
354.058 1762.07 li
354.058 1775.62 li
cp
f
340.514 1775.62 mo
326.97 1775.62 li
326.97 1762.07 li
340.514 1762.07 li
340.514 1775.62 li
cp
f
326.97 1775.62 mo
313.425 1775.62 li
313.425 1762.07 li
326.97 1762.07 li
326.97 1775.62 li
cp
f
313.425 1775.62 mo
299.881 1775.62 li
299.881 1762.07 li
313.425 1762.07 li
313.425 1775.62 li
cp
f
333.742 1881.09 mo
320.197 1881.09 li
320.197 1867.54 li
333.742 1867.54 li
333.742 1881.09 li
cp
f
320.197 1881.09 mo
306.653 1881.09 li
306.653 1867.54 li
320.197 1867.54 li
320.197 1881.09 li
cp
f
306.653 1881.09 mo
293.108 1881.09 li
293.108 1867.54 li
306.653 1867.54 li
306.653 1881.09 li
cp
f
293.108 1881.09 mo
279.564 1881.09 li
279.564 1867.54 li
293.108 1867.54 li
293.108 1881.09 li
cp
f
98.9536 1864.5 mo
85.4092 1864.5 li
85.4092 1850.95 li
98.9536 1850.95 li
98.9536 1864.5 li
cp
f
98.9536 1850.95 mo
85.4092 1850.95 li
85.4092 1837.41 li
98.9536 1837.41 li
98.9536 1850.95 li
cp
f
98.9536 1837.41 mo
85.4092 1837.41 li
85.4092 1823.87 li
98.9536 1823.87 li
98.9536 1837.41 li
cp
f
98.9536 1823.87 mo
85.4092 1823.87 li
85.4092 1810.32 li
98.9536 1810.32 li
98.9536 1823.87 li
cp
f
98.9536 1810.32 mo
85.4092 1810.32 li
85.4092 1796.78 li
98.9536 1796.78 li
98.9536 1810.32 li
cp
f
98.9536 1796.78 mo
85.4092 1796.78 li
85.4092 1783.23 li
98.9536 1783.23 li
98.9536 1796.78 li
cp
f
98.9536 1783.23 mo
85.4092 1783.23 li
85.4092 1769.69 li
98.9536 1769.69 li
98.9536 1783.23 li
cp
f
98.9536 1769.69 mo
85.4092 1769.69 li
85.4092 1756.14 li
98.9536 1756.14 li
98.9536 1769.69 li
cp
f
98.9536 1756.14 mo
85.4092 1756.14 li
85.4092 1742.6 li
98.9536 1742.6 li
98.9536 1756.14 li
cp
f
98.9536 1742.6 mo
85.4092 1742.6 li
85.4092 1729.06 li
98.9536 1729.06 li
98.9536 1742.6 li
cp
f
98.9536 1729.06 mo
85.4092 1729.06 li
85.4092 1715.51 li
98.9536 1715.51 li
98.9536 1729.06 li
cp
f
112.498 1729.06 mo
98.9536 1729.06 li
98.9536 1715.51 li
112.498 1715.51 li
112.498 1729.06 li
cp
f
126.042 1729.06 mo
112.498 1729.06 li
112.498 1715.51 li
126.042 1715.51 li
126.042 1729.06 li
cp
f
139.586 1726.19 mo
126.042 1726.19 li
126.042 1712.64 li
139.586 1712.64 li
139.586 1726.19 li
cp
f
153.131 1719.41 mo
139.586 1719.41 li
139.586 1705.87 li
153.131 1705.87 li
153.131 1719.41 li
cp
f
166.675 1711.43 mo
153.131 1711.43 li
153.131 1697.88 li
166.675 1697.88 li
166.675 1711.43 li
cp
f
180.22 1699.14 mo
166.675 1699.14 li
166.675 1685.6 li
180.22 1685.6 li
180.22 1699.14 li
cp
f
193.764 1689.84 mo
180.22 1689.84 li
180.22 1676.29 li
193.764 1676.29 li
193.764 1689.84 li
cp
f
207.308 1678.83 mo
193.764 1678.83 li
193.764 1665.28 li
207.308 1665.28 li
207.308 1678.83 li
cp
f
220.853 1668.11 mo
207.308 1668.11 li
207.308 1654.56 li
220.853 1654.56 li
220.853 1668.11 li
cp
f
234.397 1657.37 mo
220.853 1657.37 li
220.853 1643.83 li
234.397 1643.83 li
234.397 1657.37 li
cp
f
247.941 1644.94 mo
234.397 1644.94 li
234.397 1631.4 li
247.941 1631.4 li
247.941 1644.94 li
cp
f
270.985 1620.72 mo
257.44 1620.72 li
257.44 1607.18 li
270.985 1607.18 li
270.985 1620.72 li
cp
f
259.248 1631.4 mo
245.703 1631.4 li
245.703 1617.85 li
259.248 1617.85 li
259.248 1631.4 li
cp
f
693.62 1729.06 mo
680.076 1729.06 li
680.076 1715.51 li
693.62 1715.51 li
693.62 1729.06 li
cp
f
693.62 1742.6 mo
680.076 1742.6 li
680.076 1729.06 li
693.62 1729.06 li
693.62 1742.6 li
cp
f
693.62 1756.14 mo
680.076 1756.14 li
680.076 1742.6 li
693.62 1742.6 li
693.62 1756.14 li
cp
f
693.62 1769.69 mo
680.076 1769.69 li
680.076 1756.14 li
693.62 1756.14 li
693.62 1769.69 li
cp
f
693.62 1783.23 mo
680.076 1783.23 li
680.076 1769.69 li
693.62 1769.69 li
693.62 1783.23 li
cp
f
693.62 1796.78 mo
680.076 1796.78 li
680.076 1783.23 li
693.62 1783.23 li
693.62 1796.78 li
cp
f
693.62 1810.32 mo
680.076 1810.32 li
680.076 1796.78 li
693.62 1796.78 li
693.62 1810.32 li
cp
f
693.62 1823.87 mo
680.076 1823.87 li
680.076 1810.32 li
693.62 1810.32 li
693.62 1823.87 li
cp
f
693.62 1837.41 mo
680.076 1837.41 li
680.076 1823.87 li
693.62 1823.87 li
693.62 1837.41 li
cp
f
693.62 1850.95 mo
680.076 1850.95 li
680.076 1837.41 li
693.62 1837.41 li
693.62 1850.95 li
cp
f
693.62 1864.5 mo
680.076 1864.5 li
680.076 1850.95 li
693.62 1850.95 li
693.62 1864.5 li
cp
f
693.62 1878.04 mo
680.076 1878.04 li
680.076 1864.5 li
693.62 1864.5 li
693.62 1878.04 li
cp
f
700.392 1891.59 mo
686.848 1891.59 li
686.848 1878.04 li
700.392 1878.04 li
700.392 1891.59 li
cp
f
713.937 1891.59 mo
700.392 1891.59 li
700.392 1878.04 li
713.937 1878.04 li
713.937 1891.59 li
cp
f
700.392 1715.51 mo
686.848 1715.51 li
686.848 1701.97 li
700.392 1701.97 li
700.392 1715.51 li
cp
f
706.368 1701.97 mo
692.824 1701.97 li
692.824 1688.42 li
706.368 1688.42 li
706.368 1701.97 li
cp
f
706.368 1905.13 mo
692.824 1905.13 li
692.824 1891.59 li
706.368 1891.59 li
706.368 1905.13 li
cp
f
713.937 1715.51 mo
700.392 1715.51 li
700.392 1701.97 li
713.937 1701.97 li
713.937 1715.51 li
cp
f
720.708 1878.04 mo
707.165 1878.04 li
707.165 1864.5 li
720.708 1864.5 li
720.708 1878.04 li
cp
f
734.253 1884.82 mo
720.708 1884.82 li
720.708 1871.27 li
734.253 1871.27 li
734.253 1884.82 li
cp
f
747.797 1891.59 mo
734.253 1891.59 li
734.253 1878.04 li
747.797 1878.04 li
747.797 1891.59 li
cp
f
761.342 1898.36 mo
747.797 1898.36 li
747.797 1884.82 li
761.342 1884.82 li
761.342 1898.36 li
cp
f
774.887 1908.18 mo
761.342 1908.18 li
761.342 1894.63 li
774.887 1894.63 li
774.887 1908.18 li
cp
f
788.431 1914.95 mo
774.887 1914.95 li
774.887 1901.4 li
788.431 1901.4 li
788.431 1914.95 li
cp
f
801.975 1921.72 mo
788.431 1921.72 li
788.431 1908.18 li
801.975 1908.18 li
801.975 1921.72 li
cp
f
815.52 1927.49 mo
801.975 1927.49 li
801.975 1913.94 li
815.52 1913.94 li
815.52 1927.49 li
cp
f
829.064 1927.49 mo
815.52 1927.49 li
815.52 1913.94 li
829.064 1913.94 li
829.064 1927.49 li
cp
f
842.607 1927.49 mo
829.064 1927.49 li
829.064 1913.94 li
842.607 1913.94 li
842.607 1927.49 li
cp
f
856.152 1927.49 mo
842.607 1927.49 li
842.607 1913.94 li
856.152 1913.94 li
856.152 1927.49 li
cp
f
869.695 1927.49 mo
856.152 1927.49 li
856.152 1913.94 li
869.695 1913.94 li
869.695 1927.49 li
cp
f
883.242 1927.49 mo
869.695 1927.49 li
869.695 1913.94 li
883.242 1913.94 li
883.242 1927.49 li
cp
f
896.785 1927.49 mo
883.242 1927.49 li
883.242 1913.94 li
896.785 1913.94 li
896.785 1927.49 li
cp
f
910.33 1927.49 mo
896.785 1927.49 li
896.785 1913.94 li
910.33 1913.94 li
910.33 1927.49 li
cp
f
923.873 1927.49 mo
910.33 1927.49 li
910.33 1913.94 li
923.873 1913.94 li
923.873 1927.49 li
cp
f
937.42 1927.49 mo
923.873 1927.49 li
923.873 1913.94 li
937.42 1913.94 li
937.42 1927.49 li
cp
f
950.963 1921.72 mo
937.42 1921.72 li
937.42 1908.18 li
950.963 1908.18 li
950.963 1921.72 li
cp
f
962.27 1908.18 mo
948.725 1908.18 li
948.725 1894.63 li
962.27 1894.63 li
962.27 1908.18 li
cp
f
962.27 1894.63 mo
948.725 1894.63 li
948.725 1881.09 li
962.27 1881.09 li
962.27 1894.63 li
cp
f
966.234 1867.54 mo
952.691 1867.54 li
952.691 1854 li
966.234 1854 li
966.234 1867.54 li
cp
f
975.813 1854.38 mo
962.27 1854.38 li
962.27 1840.83 li
975.813 1840.83 li
975.813 1854.38 li
cp
f
969.041 1840.83 mo
955.498 1840.83 li
955.498 1827.29 li
969.041 1827.29 li
969.041 1840.83 li
cp
f
928.408 1830.57 mo
914.865 1830.57 li
914.865 1817.02 li
928.408 1817.02 li
928.408 1830.57 li
cp
f
941.951 1830.57 mo
928.408 1830.57 li
928.408 1817.02 li
941.951 1817.02 li
941.951 1830.57 li
cp
f
955.498 1830.57 mo
941.951 1830.57 li
941.951 1817.02 li
955.498 1817.02 li
955.498 1830.57 li
cp
f
969.041 1830.57 mo
955.498 1830.57 li
955.498 1817.02 li
969.041 1817.02 li
969.041 1830.57 li
cp
f
982.586 1823.79 mo
969.041 1823.79 li
969.041 1810.25 li
982.586 1810.25 li
982.586 1823.79 li
cp
f
996.131 1816.25 mo
982.586 1816.25 li
982.586 1802.71 li
996.131 1802.71 li
996.131 1816.25 li
cp
f
996.131 1802.71 mo
982.586 1802.71 li
982.586 1789.16 li
996.131 1789.16 li
996.131 1802.71 li
cp
f
989.359 1789.16 mo
975.813 1789.16 li
975.813 1775.62 li
989.359 1775.62 li
989.359 1789.16 li
cp
f
1111.26 1762.92 mo
1097.71 1762.92 li
1097.71 1749.37 li
1111.26 1749.37 li
1111.26 1762.92 li
cp
f
1118.03 1749.37 mo
1104.48 1749.37 li
1104.48 1735.83 li
1118.03 1735.83 li
1118.03 1749.37 li
cp
f
1111.26 1735.83 mo
1097.71 1735.83 li
1097.71 1722.28 li
1111.26 1722.28 li
1111.26 1735.83 li
cp
f
1097.71 1729.06 mo
1084.17 1729.06 li
1084.17 1715.51 li
1097.71 1715.51 li
1097.71 1729.06 li
cp
f
1084.17 1722.28 mo
1070.62 1722.28 li
1070.62 1708.74 li
1084.17 1708.74 li
1084.17 1722.28 li
cp
f
1070.62 1722.28 mo
1057.08 1722.28 li
1057.08 1708.74 li
1070.62 1708.74 li
1070.62 1722.28 li
cp
f
1057.08 1722.28 mo
1043.54 1722.28 li
1043.54 1708.74 li
1057.08 1708.74 li
1057.08 1722.28 li
cp
f
1043.54 1722.28 mo
1029.99 1722.28 li
1029.99 1708.74 li
1043.54 1708.74 li
1043.54 1722.28 li
cp
f
1029.99 1722.28 mo
1016.45 1722.28 li
1016.45 1708.74 li
1029.99 1708.74 li
1029.99 1722.28 li
cp
f
1016.45 1722.28 mo
1002.9 1722.28 li
1002.9 1708.74 li
1016.45 1708.74 li
1016.45 1722.28 li
cp
f
1002.9 1722.28 mo
989.359 1722.28 li
989.359 1708.74 li
1002.9 1708.74 li
1002.9 1722.28 li
cp
f
989.359 1722.28 mo
975.813 1722.28 li
975.813 1708.74 li
989.359 1708.74 li
989.359 1722.28 li
cp
f
975.813 1722.28 mo
962.27 1722.28 li
962.27 1708.74 li
975.813 1708.74 li
975.813 1722.28 li
cp
f
962.27 1722.28 mo
948.725 1722.28 li
948.725 1708.74 li
962.27 1708.74 li
962.27 1722.28 li
cp
f
948.725 1722.28 mo
935.182 1722.28 li
935.182 1708.74 li
948.725 1708.74 li
948.725 1722.28 li
cp
f
935.182 1722.28 mo
921.637 1722.28 li
921.637 1708.74 li
935.182 1708.74 li
935.182 1722.28 li
cp
f
921.637 1722.28 mo
908.092 1722.28 li
908.092 1708.74 li
921.637 1708.74 li
921.637 1722.28 li
cp
f
908.092 1722.28 mo
894.547 1722.28 li
894.547 1708.74 li
908.092 1708.74 li
908.092 1722.28 li
cp
f
894.547 1718.2 mo
881.004 1718.2 li
881.004 1704.66 li
894.547 1704.66 li
894.547 1718.2 li
cp
f
885.969 1704.66 mo
872.424 1704.66 li
872.424 1691.11 li
885.969 1691.11 li
885.969 1704.66 li
cp
f
890.014 1691.11 mo
876.469 1691.11 li
876.469 1677.57 li
890.014 1677.57 li
890.014 1691.11 li
cp
f
899.512 1677.57 mo
885.969 1677.57 li
885.969 1664.02 li
899.512 1664.02 li
899.512 1677.57 li
cp
f
911.096 1664.14 mo
897.553 1664.14 li
897.553 1650.6 li
911.096 1650.6 li
911.096 1664.14 li
cp
f
922.682 1650.6 mo
909.137 1650.6 li
909.137 1637.05 li
922.682 1637.05 li
922.682 1650.6 li
cp
f
931.799 1637.05 mo
918.256 1637.05 li
918.256 1623.51 li
931.799 1623.51 li
931.799 1637.05 li
cp
f
936.227 1623.51 mo
922.682 1623.51 li
922.682 1609.97 li
936.227 1609.97 li
936.227 1623.51 li
cp
f
938.572 1609.97 mo
925.027 1609.97 li
925.027 1596.42 li
938.572 1596.42 li
938.572 1609.97 li
cp
f
935.182 1596.42 mo
921.637 1596.42 li
921.637 1582.88 li
935.182 1582.88 li
935.182 1596.42 li
cp
f
921.637 1589.65 mo
908.092 1589.65 li
908.092 1576.1 li
921.637 1576.1 li
921.637 1589.65 li
cp
f
908.092 1600.41 mo
894.547 1600.41 li
894.547 1586.86 li
908.092 1586.86 li
908.092 1600.41 li
cp
f
899.512 1613.95 mo
885.969 1613.95 li
885.969 1600.41 li
899.512 1600.41 li
899.512 1613.95 li
cp
f
1097.71 1775.62 mo
1084.17 1775.62 li
1084.17 1762.07 li
1097.71 1762.07 li
1097.71 1775.62 li
cp
f
1084.17 1775.62 mo
1070.62 1775.62 li
1070.62 1762.07 li
1084.17 1762.07 li
1084.17 1775.62 li
cp
f
1070.62 1775.62 mo
1057.08 1775.62 li
1057.08 1762.07 li
1070.62 1762.07 li
1070.62 1775.62 li
cp
f
1057.08 1775.62 mo
1043.54 1775.62 li
1043.54 1762.07 li
1057.08 1762.07 li
1057.08 1775.62 li
cp
f
1043.54 1775.62 mo
1029.99 1775.62 li
1029.99 1762.07 li
1043.54 1762.07 li
1043.54 1775.62 li
cp
f
1029.99 1775.62 mo
1016.45 1775.62 li
1016.45 1762.07 li
1029.99 1762.07 li
1029.99 1775.62 li
cp
f
1016.45 1775.62 mo
1002.9 1775.62 li
1002.9 1762.07 li
1016.45 1762.07 li
1016.45 1775.62 li
cp
f
1002.9 1775.62 mo
989.359 1775.62 li
989.359 1762.07 li
1002.9 1762.07 li
1002.9 1775.62 li
cp
f
989.359 1775.62 mo
975.813 1775.62 li
975.813 1762.07 li
989.359 1762.07 li
989.359 1775.62 li
cp
f
975.813 1775.62 mo
962.27 1775.62 li
962.27 1762.07 li
975.813 1762.07 li
975.813 1775.62 li
cp
f
962.27 1775.62 mo
948.725 1775.62 li
948.725 1762.07 li
962.27 1762.07 li
962.27 1775.62 li
cp
f
948.725 1775.62 mo
935.182 1775.62 li
935.182 1762.07 li
948.725 1762.07 li
948.725 1775.62 li
cp
f
935.182 1775.62 mo
921.637 1775.62 li
921.637 1762.07 li
935.182 1762.07 li
935.182 1775.62 li
cp
f
955.498 1881.09 mo
941.951 1881.09 li
941.951 1867.54 li
955.498 1867.54 li
955.498 1881.09 li
cp
f
941.951 1881.09 mo
928.408 1881.09 li
928.408 1867.54 li
941.951 1867.54 li
941.951 1881.09 li
cp
f
928.408 1881.09 mo
914.865 1881.09 li
914.865 1867.54 li
928.408 1867.54 li
928.408 1881.09 li
cp
f
914.865 1881.09 mo
901.32 1881.09 li
901.32 1867.54 li
914.865 1867.54 li
914.865 1881.09 li
cp
f
720.708 1864.5 mo
707.165 1864.5 li
707.165 1850.95 li
720.708 1850.95 li
720.708 1864.5 li
cp
f
720.708 1850.95 mo
707.165 1850.95 li
707.165 1837.41 li
720.708 1837.41 li
720.708 1850.95 li
cp
f
720.708 1837.41 mo
707.165 1837.41 li
707.165 1823.87 li
720.708 1823.87 li
720.708 1837.41 li
cp
f
720.708 1823.87 mo
707.165 1823.87 li
707.165 1810.32 li
720.708 1810.32 li
720.708 1823.87 li
cp
f
720.708 1810.32 mo
707.165 1810.32 li
707.165 1796.78 li
720.708 1796.78 li
720.708 1810.32 li
cp
f
720.708 1796.78 mo
707.165 1796.78 li
707.165 1783.23 li
720.708 1783.23 li
720.708 1796.78 li
cp
f
720.708 1783.23 mo
707.165 1783.23 li
707.165 1769.69 li
720.708 1769.69 li
720.708 1783.23 li
cp
f
720.708 1769.69 mo
707.165 1769.69 li
707.165 1756.14 li
720.708 1756.14 li
720.708 1769.69 li
cp
f
720.708 1756.14 mo
707.165 1756.14 li
707.165 1742.6 li
720.708 1742.6 li
720.708 1756.14 li
cp
f
720.708 1742.6 mo
707.165 1742.6 li
707.165 1729.06 li
720.708 1729.06 li
720.708 1742.6 li
cp
f
720.708 1729.06 mo
707.165 1729.06 li
707.165 1715.51 li
720.708 1715.51 li
720.708 1729.06 li
cp
f
734.253 1729.06 mo
720.708 1729.06 li
720.708 1715.51 li
734.253 1715.51 li
734.253 1729.06 li
cp
f
747.797 1729.06 mo
734.253 1729.06 li
734.253 1715.51 li
747.797 1715.51 li
747.797 1729.06 li
cp
f
761.342 1726.19 mo
747.797 1726.19 li
747.797 1712.64 li
761.342 1712.64 li
761.342 1726.19 li
cp
f
774.887 1719.41 mo
761.342 1719.41 li
761.342 1705.87 li
774.887 1705.87 li
774.887 1719.41 li
cp
f
788.431 1711.43 mo
774.887 1711.43 li
774.887 1697.88 li
788.431 1697.88 li
788.431 1711.43 li
cp
f
801.975 1699.14 mo
788.431 1699.14 li
788.431 1685.6 li
801.975 1685.6 li
801.975 1699.14 li
cp
f
815.52 1689.84 mo
801.975 1689.84 li
801.975 1676.29 li
815.52 1676.29 li
815.52 1689.84 li
cp
f
829.064 1678.83 mo
815.52 1678.83 li
815.52 1665.28 li
829.064 1665.28 li
829.064 1678.83 li
cp
f
842.607 1668.11 mo
829.064 1668.11 li
829.064 1654.56 li
842.607 1654.56 li
842.607 1668.11 li
cp
f
856.152 1657.37 mo
842.607 1657.37 li
842.607 1643.83 li
856.152 1643.83 li
856.152 1657.37 li
cp
f
869.695 1644.94 mo
856.152 1644.94 li
856.152 1631.4 li
869.695 1631.4 li
869.695 1644.94 li
cp
f
892.74 1620.72 mo
879.195 1620.72 li
879.195 1607.18 li
892.74 1607.18 li
892.74 1620.72 li
cp
f
881.004 1631.4 mo
867.459 1631.4 li
867.459 1617.85 li
881.004 1617.85 li
881.004 1631.4 li
cp
f
1328.22 1953.11 mo
1328.22 1966.65 li
1314.68 1966.65 li
1314.68 1953.11 li
1328.22 1953.11 li
cp
f
1341.77 1953.11 mo
1341.77 1966.65 li
1328.22 1966.65 li
1328.22 1953.11 li
1341.77 1953.11 li
cp
f
1355.31 1953.11 mo
1355.31 1966.65 li
1341.77 1966.65 li
1341.77 1953.11 li
1355.31 1953.11 li
cp
f
1368.85 1953.11 mo
1368.85 1966.65 li
1355.31 1966.65 li
1355.31 1953.11 li
1368.85 1953.11 li
cp
f
1382.4 1953.11 mo
1382.4 1966.65 li
1368.85 1966.65 li
1368.85 1953.11 li
1382.4 1953.11 li
cp
f
1395.94 1953.11 mo
1395.94 1966.65 li
1382.4 1966.65 li
1382.4 1953.11 li
1395.94 1953.11 li
cp
f
1409.51 1953.11 mo
1409.51 1966.65 li
1395.96 1966.65 li
1395.96 1953.11 li
1409.51 1953.11 li
cp
f
1423.05 1953.11 mo
1423.05 1966.65 li
1409.51 1966.65 li
1409.51 1953.11 li
1423.05 1953.11 li
cp
f
1436.6 1953.11 mo
1436.6 1966.65 li
1423.05 1966.65 li
1423.05 1953.11 li
1436.6 1953.11 li
cp
f
1450.14 1953.11 mo
1450.14 1966.65 li
1436.6 1966.65 li
1436.6 1953.11 li
1450.14 1953.11 li
cp
f
1463.69 1946.34 mo
1463.69 1959.88 li
1450.14 1959.88 li
1450.14 1946.34 li
1463.69 1946.34 li
cp
f
1463.69 1932.79 mo
1463.69 1946.34 li
1450.14 1946.34 li
1450.14 1932.79 li
1463.69 1932.79 li
cp
f
1314.68 1946.34 mo
1314.68 1959.88 li
1301.13 1959.88 li
1301.13 1946.34 li
1314.68 1946.34 li
cp
f
1301.13 1940.36 mo
1301.13 1953.91 li
1287.59 1953.91 li
1287.59 1940.36 li
1301.13 1940.36 li
cp
f
1477.23 1940.36 mo
1477.23 1953.91 li
1463.69 1953.91 li
1463.69 1940.36 li
1477.23 1940.36 li
cp
f
1314.68 1932.79 mo
1314.68 1946.34 li
1301.13 1946.34 li
1301.13 1932.79 li
1314.68 1932.79 li
cp
f
1450.14 1926.02 mo
1450.14 1939.56 li
1436.6 1939.56 li
1436.6 1926.02 li
1450.14 1926.02 li
cp
f
1456.92 1912.47 mo
1456.92 1926.02 li
1443.37 1926.02 li
1443.37 1912.47 li
1456.92 1912.47 li
cp
f
1463.69 1898.93 mo
1463.69 1912.47 li
1450.14 1912.47 li
1450.14 1898.93 li
1463.69 1898.93 li
cp
f
1470.46 1885.39 mo
1470.46 1898.93 li
1456.92 1898.93 li
1456.92 1885.39 li
1470.46 1885.39 li
cp
f
1480.28 1871.84 mo
1480.28 1885.39 li
1466.73 1885.39 li
1466.73 1871.84 li
1480.28 1871.84 li
cp
f
1487.04 1858.3 mo
1487.04 1871.84 li
1473.5 1871.84 li
1473.5 1858.3 li
1487.04 1858.3 li
cp
f
1493.82 1844.75 mo
1493.82 1858.3 li
1480.28 1858.3 li
1480.28 1844.75 li
1493.82 1844.75 li
cp
f
1500.59 1831.21 mo
1500.59 1844.75 li
1487.04 1844.75 li
1487.04 1831.21 li
1500.59 1831.21 li
cp
f
1505.66 1817.67 mo
1505.66 1831.21 li
1492.12 1831.21 li
1492.12 1817.67 li
1505.66 1817.67 li
cp
f
1505.66 1804.12 mo
1505.66 1817.67 li
1492.12 1817.67 li
1492.12 1804.12 li
1505.66 1804.12 li
cp
f
1505.66 1790.58 mo
1505.66 1804.12 li
1492.12 1804.12 li
1492.12 1790.58 li
1505.66 1790.58 li
cp
f
1505.66 1777.03 mo
1505.66 1790.58 li
1492.12 1790.58 li
1492.12 1777.03 li
1505.66 1777.03 li
cp
f
1505.66 1763.49 mo
1505.66 1777.03 li
1492.12 1777.03 li
1492.12 1763.49 li
1505.66 1763.49 li
cp
f
1505.66 1749.94 mo
1505.66 1763.49 li
1492.12 1763.49 li
1492.12 1749.94 li
1505.66 1749.94 li
cp
f
1505.66 1736.4 mo
1505.66 1749.94 li
1492.12 1749.94 li
1492.12 1736.4 li
1505.66 1736.4 li
cp
f
1505.66 1722.85 mo
1505.66 1736.4 li
1492.12 1736.4 li
1492.12 1722.85 li
1505.66 1722.85 li
cp
f
1505.66 1709.31 mo
1505.66 1722.85 li
1492.12 1722.85 li
1492.12 1709.31 li
1505.66 1709.31 li
cp
f
1499.9 1682.22 mo
1499.9 1695.76 li
1486.35 1695.76 li
1486.35 1682.22 li
1499.9 1682.22 li
cp
f
1504.55 1695.76 mo
1504.55 1709.31 li
1491.01 1709.31 li
1491.01 1695.76 li
1504.55 1695.76 li
cp
f
1486.35 1670.62 mo
1486.35 1684.17 li
1472.81 1684.17 li
1472.81 1670.62 li
1486.35 1670.62 li
cp
f
1472.81 1670.62 mo
1472.81 1684.17 li
1459.26 1684.17 li
1459.26 1670.62 li
1472.81 1670.62 li
cp
f
1459.26 1680.05 mo
1459.26 1693.6 li
1445.72 1693.6 li
1445.72 1680.05 li
1459.26 1680.05 li
cp
f
1459.26 1690.94 mo
1459.26 1704.48 li
1445.72 1704.48 li
1445.72 1690.94 li
1459.26 1690.94 li
cp
f
1459.26 1704.48 mo
1459.26 1718.03 li
1445.72 1718.03 li
1445.72 1704.48 li
1459.26 1704.48 li
cp
f
1459.26 1718.03 mo
1459.26 1731.57 li
1445.72 1731.57 li
1445.72 1718.03 li
1459.26 1718.03 li
cp
f
1436.6 1926.02 mo
1436.6 1939.56 li
1423.05 1939.56 li
1423.05 1926.02 li
1436.6 1926.02 li
cp
f
1423.05 1926.02 mo
1423.05 1939.56 li
1409.51 1939.56 li
1409.51 1926.02 li
1423.05 1926.02 li
cp
f
1409.51 1926.02 mo
1409.51 1939.56 li
1395.96 1939.56 li
1395.96 1926.02 li
1409.51 1926.02 li
cp
f
1395.94 1926.02 mo
1395.94 1939.56 li
1382.4 1939.56 li
1382.4 1926.02 li
1395.94 1926.02 li
cp
f
1382.4 1926.02 mo
1382.4 1939.56 li
1368.85 1939.56 li
1368.85 1926.02 li
1382.4 1926.02 li
cp
f
1368.85 1926.02 mo
1368.85 1939.56 li
1355.31 1939.56 li
1355.31 1926.02 li
1368.85 1926.02 li
cp
f
1355.31 1926.02 mo
1355.31 1939.56 li
1341.77 1939.56 li
1341.77 1926.02 li
1355.31 1926.02 li
cp
f
1341.77 1926.02 mo
1341.77 1939.56 li
1328.22 1939.56 li
1328.22 1926.02 li
1341.77 1926.02 li
cp
f
1328.22 1926.02 mo
1328.22 1939.56 li
1314.68 1939.56 li
1314.68 1926.02 li
1328.22 1926.02 li
cp
f
1328.22 1912.47 mo
1328.22 1926.02 li
1314.68 1926.02 li
1314.68 1912.47 li
1328.22 1912.47 li
cp
f
1328.22 1898.93 mo
1328.22 1912.47 li
1314.68 1912.47 li
1314.68 1898.93 li
1328.22 1898.93 li
cp
f
1325.35 1885.39 mo
1325.35 1898.93 li
1311.8 1898.93 li
1311.8 1885.39 li
1325.35 1885.39 li
cp
f
1318.58 1871.84 mo
1318.58 1885.39 li
1305.03 1885.39 li
1305.03 1871.84 li
1318.58 1871.84 li
cp
f
1310.59 1858.3 mo
1310.59 1871.84 li
1297.05 1871.84 li
1297.05 1858.3 li
1310.59 1858.3 li
cp
f
1303.82 1844.75 mo
1303.82 1858.3 li
1290.28 1858.3 li
1290.28 1844.75 li
1303.82 1844.75 li
cp
f
1295.4 1831.21 mo
1295.4 1844.75 li
1281.85 1844.75 li
1281.85 1831.21 li
1295.4 1831.21 li
cp
f
1288.62 1817.67 mo
1288.62 1831.21 li
1275.08 1831.21 li
1275.08 1817.67 li
1288.62 1817.67 li
cp
f
1281.85 1804.12 mo
1281.85 1817.67 li
1268.31 1817.67 li
1268.31 1804.12 li
1281.85 1804.12 li
cp
f
1278.08 1790.58 mo
1278.08 1804.12 li
1264.54 1804.12 li
1264.54 1790.58 li
1278.08 1790.58 li
cp
f
1271.31 1777.03 mo
1271.31 1790.58 li
1257.77 1790.58 li
1257.77 1777.03 li
1271.31 1777.03 li
cp
f
1266.65 1763.49 mo
1266.65 1777.03 li
1253.11 1777.03 li
1253.11 1763.49 li
1266.65 1763.49 li
cp
f
1261.33 1749.94 mo
1261.33 1763.49 li
1247.79 1763.49 li
1247.79 1749.94 li
1261.33 1749.94 li
cp
f
1257.77 1736.4 mo
1257.77 1749.94 li
1244.22 1749.94 li
1244.22 1736.4 li
1257.77 1736.4 li
cp
f
1250.99 1722.85 mo
1250.99 1736.4 li
1237.45 1736.4 li
1237.45 1722.85 li
1250.99 1722.85 li
cp
f
1245.45 1709.31 mo
1245.45 1722.85 li
1231.91 1722.85 li
1231.91 1709.31 li
1245.45 1709.31 li
cp
f
1238.68 1696.04 mo
1238.68 1709.58 li
1225.13 1709.58 li
1225.13 1696.04 li
1238.68 1696.04 li
cp
f
1230.04 1682.49 mo
1230.04 1696.04 li
1216.49 1696.04 li
1216.49 1682.49 li
1230.04 1682.49 li
cp
f
1226.27 1668.57 mo
1226.27 1682.12 li
1212.72 1682.12 li
1212.72 1668.57 li
1226.27 1668.57 li
cp
f
1234.6 1655.03 mo
1234.6 1668.57 li
1221.06 1668.57 li
1221.06 1655.03 li
1234.6 1655.03 li
cp
f
1248.15 1648.26 mo
1248.15 1661.8 li
1234.6 1661.8 li
1234.6 1648.26 li
1248.15 1648.26 li
cp
f
1261.69 1650.69 mo
1261.69 1664.24 li
1248.15 1664.24 li
1248.15 1650.69 li
1261.69 1650.69 li
cp
f
1275.08 1655.03 mo
1275.08 1668.57 li
1261.54 1668.57 li
1261.54 1655.03 li
1275.08 1655.03 li
cp
f
1281.85 1668.57 mo
1281.85 1682.12 li
1268.31 1682.12 li
1268.31 1668.57 li
1281.85 1668.57 li
cp
f
1290.28 1681.66 mo
1290.28 1695.21 li
1276.73 1695.21 li
1276.73 1681.66 li
1290.28 1681.66 li
cp
f
1298.92 1695.21 mo
1298.92 1708.75 li
1285.38 1708.75 li
1285.38 1695.21 li
1298.92 1695.21 li
cp
f
1303.82 1708.75 mo
1303.82 1722.29 li
1290.28 1722.29 li
1290.28 1708.75 li
1303.82 1708.75 li
cp
f
1313.13 1722.29 mo
1313.13 1735.84 li
1299.59 1735.84 li
1299.59 1722.29 li
1313.13 1722.29 li
cp
f
1316.02 1735.84 mo
1316.02 1749.38 li
1302.47 1749.38 li
1302.47 1735.84 li
1316.02 1735.84 li
cp
f
1316.02 1749.38 mo
1316.02 1762.93 li
1302.47 1762.93 li
1302.47 1749.38 li
1316.02 1749.38 li
cp
f
1316.02 1708.75 mo
1316.02 1722.29 li
1302.47 1722.29 li
1302.47 1708.75 li
1316.02 1708.75 li
cp
f
1316.02 1695.21 mo
1316.02 1708.75 li
1302.47 1708.75 li
1302.47 1695.21 li
1316.02 1695.21 li
cp
f
1316.02 1681.66 mo
1316.02 1695.21 li
1302.47 1695.21 li
1302.47 1681.66 li
1316.02 1681.66 li
cp
f
1316.02 1668.12 mo
1316.02 1681.66 li
1302.47 1681.66 li
1302.47 1668.12 li
1316.02 1668.12 li
cp
f
1316.02 1654.57 mo
1316.02 1668.12 li
1302.47 1668.12 li
1302.47 1654.57 li
1316.02 1654.57 li
cp
f
1316.02 1641.03 mo
1316.02 1654.57 li
1302.47 1654.57 li
1302.47 1641.03 li
1316.02 1641.03 li
cp
f
1316.02 1627.48 mo
1316.02 1641.03 li
1302.47 1641.03 li
1302.47 1627.48 li
1316.02 1627.48 li
cp
f
1316.02 1613.94 mo
1316.02 1627.48 li
1302.47 1627.48 li
1302.47 1613.94 li
1316.02 1613.94 li
cp
f
1316.02 1600.39 mo
1316.02 1613.94 li
1302.47 1613.94 li
1302.47 1600.39 li
1316.02 1600.39 li
cp
f
1316.02 1586.85 mo
1316.02 1600.39 li
1302.47 1600.39 li
1302.47 1586.85 li
1316.02 1586.85 li
cp
f
1316.02 1573.31 mo
1316.02 1586.85 li
1302.47 1586.85 li
1302.47 1573.31 li
1316.02 1573.31 li
cp
f
1316.02 1559.76 mo
1316.02 1573.31 li
1302.47 1573.31 li
1302.47 1559.76 li
1316.02 1559.76 li
cp
f
1318.68 1546.22 mo
1318.68 1559.76 li
1305.13 1559.76 li
1305.13 1546.22 li
1318.68 1546.22 li
cp
f
1332.22 1536.94 mo
1332.22 1550.49 li
1318.68 1550.49 li
1318.68 1536.94 li
1332.22 1536.94 li
cp
f
1345.77 1536.94 mo
1345.77 1550.49 li
1332.22 1550.49 li
1332.22 1536.94 li
1345.77 1536.94 li
cp
f
1359.31 1540.83 mo
1359.31 1554.38 li
1345.77 1554.38 li
1345.77 1540.83 li
1359.31 1540.83 li
cp
f
1362.64 1554.38 mo
1362.64 1567.92 li
1349.09 1567.92 li
1349.09 1554.38 li
1362.64 1554.38 li
cp
f
1366.08 1567.92 mo
1366.08 1581.46 li
1352.54 1581.46 li
1352.54 1567.92 li
1366.08 1567.92 li
cp
f
1366.08 1581.46 mo
1366.08 1595.01 li
1352.54 1595.01 li
1352.54 1581.46 li
1366.08 1581.46 li
cp
f
1366.08 1595.01 mo
1366.08 1608.55 li
1352.54 1608.55 li
1352.54 1595.01 li
1366.08 1595.01 li
cp
f
1366.08 1608.55 mo
1366.08 1622.1 li
1352.54 1622.1 li
1352.54 1608.55 li
1366.08 1608.55 li
cp
f
1366.08 1622.1 mo
1366.08 1635.64 li
1352.54 1635.64 li
1352.54 1622.1 li
1366.08 1622.1 li
cp
f
1366.08 1635.64 mo
1366.08 1649.19 li
1352.54 1649.19 li
1352.54 1635.64 li
1366.08 1635.64 li
cp
f
1366.08 1649.19 mo
1366.08 1662.73 li
1352.54 1662.73 li
1352.54 1649.19 li
1366.08 1649.19 li
cp
f
1390.9 1635.64 mo
1390.9 1649.19 li
1377.36 1649.19 li
1377.36 1635.64 li
1390.9 1635.64 li
cp
f
1377.36 1641.73 mo
1377.36 1655.28 li
1363.81 1655.28 li
1363.81 1641.73 li
1377.36 1641.73 li
cp
f
1404.44 1641.73 mo
1404.44 1655.28 li
1390.9 1655.28 li
1390.9 1641.73 li
1404.44 1641.73 li
cp
f
1406.18 1655.28 mo
1406.18 1668.82 li
1392.64 1668.82 li
1392.64 1655.28 li
1406.18 1655.28 li
cp
f
1410.15 1668.57 mo
1410.15 1682.12 li
1396.6 1682.12 li
1396.6 1668.57 li
1410.15 1668.57 li
cp
f
1423.69 1658.52 mo
1423.69 1672.06 li
1410.15 1672.06 li
1410.15 1658.52 li
1423.69 1658.52 li
cp
f
1437.24 1658.52 mo
1437.24 1672.06 li
1423.69 1672.06 li
1423.69 1658.52 li
1437.24 1658.52 li
cp
f
1450.78 1667.53 mo
1450.78 1681.07 li
1437.24 1681.07 li
1437.24 1667.53 li
1450.78 1667.53 li
cp
f
1410.15 1681.66 mo
1410.15 1695.21 li
1396.6 1695.21 li
1396.6 1681.66 li
1410.15 1681.66 li
cp
f
1410.15 1695.21 mo
1410.15 1708.75 li
1396.6 1708.75 li
1396.6 1695.21 li
1410.15 1695.21 li
cp
f
1366.08 1662.73 mo
1366.08 1676.27 li
1352.54 1676.27 li
1352.54 1662.73 li
1366.08 1662.73 li
cp
f
1366.08 1676.27 mo
1366.08 1689.82 li
1352.54 1689.82 li
1352.54 1676.27 li
1366.08 1676.27 li
cp
f
1366.08 1689.82 mo
1366.08 1703.36 li
1352.54 1703.36 li
1352.54 1689.82 li
1366.08 1689.82 li
cp
f
1316.02 1722.29 mo
1316.02 1735.84 li
1302.47 1735.84 li
1302.47 1722.29 li
1316.02 1722.29 li
cp
f
1733.54 1903.76 mo
1733.54 1917.3 li
1719.99 1917.3 li
1719.99 1903.76 li
1733.54 1903.76 li
cp
f
1747.08 1903.76 mo
1747.08 1917.3 li
1733.54 1917.3 li
1733.54 1903.76 li
1747.08 1903.76 li
cp
f
1760.63 1903.76 mo
1760.63 1917.3 li
1747.08 1917.3 li
1747.08 1903.76 li
1760.63 1903.76 li
cp
f
1774.17 1903.76 mo
1774.17 1917.3 li
1760.63 1917.3 li
1760.63 1903.76 li
1774.17 1903.76 li
cp
f
1787.71 1903.76 mo
1787.71 1917.3 li
1774.17 1917.3 li
1774.17 1903.76 li
1787.71 1903.76 li
cp
f
1801.26 1903.76 mo
1801.26 1917.3 li
1787.71 1917.3 li
1787.71 1903.76 li
1801.26 1903.76 li
cp
f
1814.82 1903.76 mo
1814.82 1917.3 li
1801.28 1917.3 li
1801.28 1903.76 li
1814.82 1903.76 li
cp
f
1828.37 1903.76 mo
1828.37 1917.3 li
1814.82 1917.3 li
1814.82 1903.76 li
1828.37 1903.76 li
cp
f
1841.91 1903.76 mo
1841.91 1917.3 li
1828.37 1917.3 li
1828.37 1903.76 li
1841.91 1903.76 li
cp
f
1855.46 1903.76 mo
1855.46 1917.3 li
1841.91 1917.3 li
1841.91 1903.76 li
1855.46 1903.76 li
cp
f
1869 1896.99 mo
1869 1910.53 li
1855.46 1910.53 li
1855.46 1896.99 li
1869 1896.99 li
cp
f
1869 1883.44 mo
1869 1896.99 li
1855.46 1896.99 li
1855.46 1883.44 li
1869 1883.44 li
cp
f
1719.99 1896.99 mo
1719.99 1910.53 li
1706.45 1910.53 li
1706.45 1896.99 li
1719.99 1896.99 li
cp
f
1706.45 1891.01 mo
1706.45 1904.56 li
1692.9 1904.56 li
1692.9 1891.01 li
1706.45 1891.01 li
cp
f
1882.55 1891.01 mo
1882.55 1904.56 li
1869 1904.56 li
1869 1891.01 li
1882.55 1891.01 li
cp
f
1719.99 1883.44 mo
1719.99 1896.99 li
1706.45 1896.99 li
1706.45 1883.44 li
1719.99 1883.44 li
cp
f
1855.46 1876.67 mo
1855.46 1890.21 li
1841.91 1890.21 li
1841.91 1876.67 li
1855.46 1876.67 li
cp
f
1846.97 1863.13 mo
1846.97 1876.67 li
1833.42 1876.67 li
1833.42 1863.13 li
1846.97 1863.13 li
cp
f
1853.74 1849.58 mo
1853.74 1863.13 li
1840.2 1863.13 li
1840.2 1849.58 li
1853.74 1849.58 li
cp
f
1860.51 1836.04 mo
1860.51 1849.58 li
1846.97 1849.58 li
1846.97 1836.04 li
1860.51 1836.04 li
cp
f
1870.33 1822.49 mo
1870.33 1836.04 li
1856.78 1836.04 li
1856.78 1822.49 li
1870.33 1822.49 li
cp
f
1877.1 1808.95 mo
1877.1 1822.49 li
1863.56 1822.49 li
1863.56 1808.95 li
1877.1 1808.95 li
cp
f
1883.87 1795.4 mo
1883.87 1808.95 li
1870.33 1808.95 li
1870.33 1795.4 li
1883.87 1795.4 li
cp
f
1890.64 1781.86 mo
1890.64 1795.4 li
1877.1 1795.4 li
1877.1 1781.86 li
1890.64 1781.86 li
cp
f
1895.72 1768.31 mo
1895.72 1781.86 li
1882.17 1781.86 li
1882.17 1768.31 li
1895.72 1768.31 li
cp
f
1895.72 1754.77 mo
1895.72 1768.31 li
1882.17 1768.31 li
1882.17 1754.77 li
1895.72 1754.77 li
cp
f
1895.72 1741.23 mo
1895.72 1754.77 li
1882.17 1754.77 li
1882.17 1741.23 li
1895.72 1741.23 li
cp
f
1895.72 1727.68 mo
1895.72 1741.23 li
1882.17 1741.23 li
1882.17 1727.68 li
1895.72 1727.68 li
cp
f
1895.72 1714.14 mo
1895.72 1727.68 li
1882.17 1727.68 li
1882.17 1714.14 li
1895.72 1714.14 li
cp
f
1895.72 1700.59 mo
1895.72 1714.14 li
1882.17 1714.14 li
1882.17 1700.59 li
1895.72 1700.59 li
cp
f
1895.72 1687.05 mo
1895.72 1700.59 li
1882.17 1700.59 li
1882.17 1687.05 li
1895.72 1687.05 li
cp
f
1895.72 1673.5 mo
1895.72 1687.05 li
1882.17 1687.05 li
1882.17 1673.5 li
1895.72 1673.5 li
cp
f
1895.72 1659.96 mo
1895.72 1673.5 li
1882.17 1673.5 li
1882.17 1659.96 li
1895.72 1659.96 li
cp
f
1889.95 1632.87 mo
1889.95 1646.41 li
1876.41 1646.41 li
1876.41 1632.87 li
1889.95 1632.87 li
cp
f
1894.61 1646.41 mo
1894.61 1659.96 li
1881.06 1659.96 li
1881.06 1646.41 li
1894.61 1646.41 li
cp
f
1876.41 1621.27 mo
1876.41 1634.82 li
1862.86 1634.82 li
1862.86 1621.27 li
1876.41 1621.27 li
cp
f
1862.86 1621.27 mo
1862.86 1634.82 li
1849.32 1634.82 li
1849.32 1621.27 li
1862.86 1621.27 li
cp
f
1849.32 1630.71 mo
1849.32 1644.25 li
1835.78 1644.25 li
1835.78 1630.71 li
1849.32 1630.71 li
cp
f
1849.32 1641.59 mo
1849.32 1655.13 li
1835.78 1655.13 li
1835.78 1641.59 li
1849.32 1641.59 li
cp
f
1849.32 1655.13 mo
1849.32 1668.68 li
1835.78 1668.68 li
1835.78 1655.13 li
1849.32 1655.13 li
cp
f
1849.32 1668.68 mo
1849.32 1682.22 li
1835.78 1682.22 li
1835.78 1668.68 li
1849.32 1668.68 li
cp
f
1841.91 1876.67 mo
1841.91 1890.21 li
1828.37 1890.21 li
1828.37 1876.67 li
1841.91 1876.67 li
cp
f
1828.37 1876.67 mo
1828.37 1890.21 li
1814.82 1890.21 li
1814.82 1876.67 li
1828.37 1876.67 li
cp
f
1814.82 1876.67 mo
1814.82 1890.21 li
1801.28 1890.21 li
1801.28 1876.67 li
1814.82 1876.67 li
cp
f
1801.26 1876.67 mo
1801.26 1890.21 li
1787.71 1890.21 li
1787.71 1876.67 li
1801.26 1876.67 li
cp
f
1787.71 1876.67 mo
1787.71 1890.21 li
1774.17 1890.21 li
1774.17 1876.67 li
1787.71 1876.67 li
cp
f
1774.17 1876.67 mo
1774.17 1890.21 li
1760.63 1890.21 li
1760.63 1876.67 li
1774.17 1876.67 li
cp
f
1760.63 1876.67 mo
1760.63 1890.21 li
1747.08 1890.21 li
1747.08 1876.67 li
1760.63 1876.67 li
cp
f
1747.08 1876.67 mo
1747.08 1890.21 li
1733.54 1890.21 li
1733.54 1876.67 li
1747.08 1876.67 li
cp
f
1733.54 1876.67 mo
1733.54 1890.21 li
1719.99 1890.21 li
1719.99 1876.67 li
1733.54 1876.67 li
cp
f
1731.82 1863.13 mo
1731.82 1876.67 li
1718.27 1876.67 li
1718.27 1863.13 li
1731.82 1863.13 li
cp
f
1725.05 1849.58 mo
1725.05 1863.13 li
1711.5 1863.13 li
1711.5 1849.58 li
1725.05 1849.58 li
cp
f
1715.4 1836.04 mo
1715.4 1849.58 li
1701.86 1849.58 li
1701.86 1836.04 li
1715.4 1836.04 li
cp
f
1708.63 1822.49 mo
1708.63 1836.04 li
1695.08 1836.04 li
1695.08 1822.49 li
1708.63 1822.49 li
cp
f
1700.65 1808.95 mo
1700.65 1822.49 li
1687.1 1822.49 li
1687.1 1808.95 li
1700.65 1808.95 li
cp
f
1693.87 1795.4 mo
1693.87 1808.95 li
1680.33 1808.95 li
1680.33 1795.4 li
1693.87 1795.4 li
cp
f
1685.45 1781.86 mo
1685.45 1795.4 li
1671.9 1795.4 li
1671.9 1781.86 li
1685.45 1781.86 li
cp
f
1678.68 1768.31 mo
1678.68 1781.86 li
1665.13 1781.86 li
1665.13 1768.31 li
1678.68 1768.31 li
cp
f
1674.72 1754.77 mo
1674.72 1768.31 li
1661.18 1768.31 li
1661.18 1754.77 li
1674.72 1754.77 li
cp
f
1673.09 1740.97 mo
1673.09 1754.51 li
1659.54 1754.51 li
1659.54 1740.97 li
1673.09 1740.97 li
cp
f
1692.53 1646.68 mo
1692.53 1660.22 li
1678.99 1660.22 li
1678.99 1646.68 li
1692.53 1646.68 li
cp
f
1682.95 1659.74 mo
1682.95 1673.28 li
1669.4 1673.28 li
1669.4 1659.74 li
1682.95 1659.74 li
cp
f
1676.18 1673.25 mo
1676.18 1686.79 li
1662.63 1686.79 li
1662.63 1673.25 li
1676.18 1673.25 li
cp
f
1673.09 1686.79 mo
1673.09 1700.33 li
1659.54 1700.33 li
1659.54 1686.79 li
1673.09 1686.79 li
cp
f
1673.09 1700.33 mo
1673.09 1713.88 li
1659.54 1713.88 li
1659.54 1700.33 li
1673.09 1700.33 li
cp
f
1673.09 1713.88 mo
1673.09 1727.42 li
1659.54 1727.42 li
1659.54 1713.88 li
1673.09 1713.88 li
cp
f
1673.09 1727.42 mo
1673.09 1740.97 li
1659.54 1740.97 li
1659.54 1727.42 li
1673.09 1727.42 li
cp
f
1706.07 1686.49 mo
1706.07 1700.03 li
1692.53 1700.03 li
1692.53 1686.49 li
1706.07 1686.49 li
cp
f
1706.07 1700.03 mo
1706.07 1713.58 li
1692.53 1713.58 li
1692.53 1700.03 li
1706.07 1700.03 li
cp
f
1706.07 1659.4 mo
1706.07 1672.94 li
1692.53 1672.94 li
1692.53 1659.4 li
1706.07 1659.4 li
cp
f
1706.07 1645.85 mo
1706.07 1659.4 li
1692.53 1659.4 li
1692.53 1645.85 li
1706.07 1645.85 li
cp
f
1706.07 1632.31 mo
1706.07 1645.85 li
1692.53 1645.85 li
1692.53 1632.31 li
1706.07 1632.31 li
cp
f
1706.07 1618.77 mo
1706.07 1632.31 li
1692.53 1632.31 li
1692.53 1618.77 li
1706.07 1618.77 li
cp
f
1711.5 1605.22 mo
1711.5 1618.77 li
1697.96 1618.77 li
1697.96 1605.22 li
1711.5 1605.22 li
cp
f
1718.27 1592.38 mo
1718.27 1605.93 li
1704.73 1605.93 li
1704.73 1592.38 li
1718.27 1592.38 li
cp
f
1731.82 1586.29 mo
1731.82 1599.84 li
1718.27 1599.84 li
1718.27 1586.29 li
1731.82 1586.29 li
cp
f
1745.36 1594.09 mo
1745.36 1607.64 li
1731.82 1607.64 li
1731.82 1594.09 li
1745.36 1594.09 li
cp
f
1756.14 1599.84 mo
1756.14 1613.38 li
1742.59 1613.38 li
1742.59 1599.84 li
1756.14 1599.84 li
cp
f
1780.95 1586.29 mo
1780.95 1599.84 li
1767.41 1599.84 li
1767.41 1586.29 li
1780.95 1586.29 li
cp
f
1767.41 1592.38 mo
1767.41 1605.93 li
1753.87 1605.93 li
1753.87 1592.38 li
1767.41 1592.38 li
cp
f
1794.5 1592.38 mo
1794.5 1605.93 li
1780.95 1605.93 li
1780.95 1592.38 li
1794.5 1592.38 li
cp
f
1796.24 1605.93 mo
1796.24 1619.47 li
1782.69 1619.47 li
1782.69 1605.93 li
1796.24 1605.93 li
cp
f
1800.2 1619.22 mo
1800.2 1632.77 li
1786.66 1632.77 li
1786.66 1619.22 li
1800.2 1619.22 li
cp
f
1813.75 1609.17 mo
1813.75 1622.71 li
1800.2 1622.71 li
1800.2 1609.17 li
1813.75 1609.17 li
cp
f
1827.29 1609.17 mo
1827.29 1622.71 li
1813.75 1622.71 li
1813.75 1609.17 li
1827.29 1609.17 li
cp
f
1840.84 1618.18 mo
1840.84 1631.72 li
1827.29 1631.72 li
1827.29 1618.18 li
1840.84 1618.18 li
cp
f
1800.2 1632.31 mo
1800.2 1645.85 li
1786.66 1645.85 li
1786.66 1632.31 li
1800.2 1632.31 li
cp
f
1800.2 1645.85 mo
1800.2 1659.4 li
1786.66 1659.4 li
1786.66 1645.85 li
1800.2 1645.85 li
cp
f
1756.14 1613.38 mo
1756.14 1626.92 li
1742.59 1626.92 li
1742.59 1613.38 li
1756.14 1613.38 li
cp
f
1756.14 1626.92 mo
1756.14 1640.47 li
1742.59 1640.47 li
1742.59 1626.92 li
1756.14 1626.92 li
cp
f
1756.14 1640.47 mo
1756.14 1654.01 li
1742.59 1654.01 li
1742.59 1640.47 li
1756.14 1640.47 li
cp
f
1706.07 1672.94 mo
1706.07 1686.49 li
1692.53 1686.49 li
1692.53 1672.94 li
1706.07 1672.94 li
cp
f
1081.21 219.306 mo
934.141 219.306 li
900.377 219.306 li
866.611 219.306 872.555 193.749 893.482 171.138 cv
931.213 130.373 938.008 85.2588 908.717 69.5063 cv
888.426 87.5161 790.088 220.218 729.309 220.218 cv
714.891 220.218 704.554 220.218 704.554 220.218 cv
704.554 371.814 li
704.554 371.814 776.583 428.831 819.354 428.831 cv
823.58 428.831 828.146 428.831 832.855 428.831 cv
927.389 428.831 li
931.658 428.831 934.141 427.861 934.141 427.861 cv
945.572 424.854 954.039 414.546 954.039 402.184 cv
954.039 390.479 946.441 380.646 935.951 377.057 cv
943.152 377.057 li
957.871 377.057 969.805 365.125 969.805 350.409 cv
969.805 338.704 962.207 328.874 951.717 325.291 cv
965.656 325.291 li
980.371 325.291 992.309 313.354 992.309 298.636 cv
992.309 286.939 984.729 277.103 974.24 273.526 cv
1081.21 273.526 li
1095.93 273.526 1116.1 261.586 1116.1 246.868 cv
1116.1 232.15 1095.93 219.306 1081.21 219.306 cv
cp
f
704.554 381.297 mo
704.554 386.802 700.089 391.264 694.589 391.264 cv
688.916 391.264 li
683.417 391.264 678.949 386.802 678.949 381.297 cv
678.949 213.482 li
678.949 207.98 683.417 203.516 688.916 203.516 cv
694.589 203.516 li
700.089 203.516 704.554 207.98 704.554 213.482 cv
704.554 381.297 li
cp
f
1794.69 78.4619 mo
1781.28 78.4619 1770.29 88.4126 1768.42 101.308 cv
1763.55 95.0195 1756 90.8901 1747.42 90.8901 cv
1732.71 90.8901 1720.77 102.828 1720.77 117.542 cv
1720.77 159.854 li
1720.76 159.953 li
1714.3 154.574 1704.8 154.285 1700.72 160.259 cv
1695.41 168.044 1686.09 182.544 1686.09 215.4 cv
1686.09 284.264 1740.96 324.692 1740.96 394.271 cv
1877.34 394.271 li
1877.34 363.32 1915.78 322.242 1915.78 270.602 cv
1915.78 252.715 1915.78 233.464 1915.78 216.435 cv
1915.8 216.083 1915.88 215.755 1915.88 215.4 cv
1915.88 149.056 li
1915.88 134.343 1903.95 122.409 1889.23 122.409 cv
1880.87 122.409 1873.51 126.336 1868.62 132.356 cv
1868.62 129.25 li
1868.62 114.532 1856.68 102.596 1841.96 102.596 cv
1833.61 102.596 1826.23 106.525 1821.34 112.554 cv
1821.34 105.117 li
1821.34 90.4019 1809.41 78.4619 1794.69 78.4619 cv
cp
f
1882.57 394.271 mo
1888.08 394.271 1892.54 398.733 1892.54 404.234 cv
1892.54 409.905 li
1892.54 415.413 1888.08 419.875 1882.57 419.875 cv
1737.44 419.875 li
1731.93 419.875 1727.47 415.413 1727.47 409.905 cv
1727.47 404.234 li
1727.47 398.733 1731.93 394.271 1737.44 394.271 cv
1882.57 394.271 li
cp
f
1484.42 179.191 mo
1476.06 179.191 1468.7 182.938 1463.82 188.681 cv
1463.82 185.722 li
1463.82 171.684 1451.88 160.301 1437.16 160.301 cv
1428.8 160.301 1421.42 164.05 1416.54 169.801 cv
1416.54 162.705 li
1416.54 148.675 1404.6 137.289 1389.88 137.289 cv
1382.11 137.289 1374.64 140.533 1369.8 145.615 cv
1369.8 59.0049 li
1369.8 44.2842 1358.43 32.3496 1343.72 32.3496 cv
1329 32.3496 1318.35 44.2842 1318.35 59.0049 cv
1318.35 230.688 li
1305.05 203.066 1289.3 177.464 1274.22 159.971 cv
1264.61 148.835 1247.79 147.572 1236.62 157.181 cv
1225.48 166.791 1224.23 183.618 1233.84 194.772 cv
1249.91 213.415 1262.74 261.981 1277.8 296.385 cv
1303.44 370.607 1336.16 377.428 1336.16 438.458 cv
1472.54 438.458 li
1472.54 408.946 1510.97 369.767 1510.97 320.523 cv
1510.97 303.461 1510.97 285.105 1510.97 268.858 cv
1510.99 268.537 1511.08 268.223 1511.08 267.882 cv
1511.08 204.613 li
1511.08 190.577 1499.14 179.191 1484.42 179.191 cv
cp
f
1473.45 440.388 mo
1478.96 440.388 1483.42 444.847 1483.42 450.349 cv
1483.42 456.021 li
1483.42 461.527 1478.96 465.987 1473.45 465.987 cv
1328.32 465.987 li
1322.81 465.987 1318.35 461.527 1318.35 456.021 cv
1318.35 450.349 li
1318.35 444.847 1322.81 440.388 1328.32 440.388 cv
1473.45 440.388 li
cp
f
463.014 267.306 mo
449.99 267.306 li
462.708 263.799 475.663 253.811 475.663 242.018 cv
475.663 227.303 455.484 213.594 440.769 213.594 cv
293.698 213.594 li
259.936 213.594 li
226.169 213.594 232.107 188.896 253.039 166.286 cv
290.764 125.523 304.958 90.1055 275.664 74.3535 cv
255.376 92.3569 149.645 215.363 88.8657 215.363 cv
74.4419 215.363 64.1094 215.363 64.1094 215.363 cv
64.1094 366.964 li
64.1094 366.964 136.141 423.983 178.909 423.983 cv
183.137 423.983 187.703 423.983 192.413 423.983 cv
286.946 423.983 li
291.212 423.983 293.698 423.01 293.698 423.01 cv
305.127 420.001 313.598 409.694 313.598 397.329 cv
313.598 385.624 305.998 375.79 295.504 372.209 cv
302.707 372.209 li
317.43 372.209 329.362 360.27 329.362 345.555 cv
329.362 334.017 321.955 324.316 311.688 320.613 cv
463.014 320.613 li
477.729 320.613 489.661 308.677 489.661 293.961 cv
489.661 279.246 477.729 267.306 463.014 267.306 cv
cp
f
38.5054 211.051 mo
38.5054 205.543 42.9673 201.084 48.4722 201.084 cv
54.1436 201.084 li
59.6479 201.084 64.1094 205.543 64.1094 211.051 cv
64.1094 379.204 li
64.1094 384.708 59.6479 389.168 54.1436 389.168 cv
48.4722 389.168 li
42.9673 389.168 38.5054 384.708 38.5054 379.204 cv
38.5054 211.051 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.1.0
%%For: (\713\745\755\752\740) ()
%%Title: (230.eps)
%%CreationDate: 8/6/2013 9:14 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2NJZ8VW0md'0<+La;BagG_\@;M^h#3-H2[!*Yra9W)FU1a=MG^fN/G=6<p#sn<1cJs2qBi"K]+=if"fJ>;RlIGapFL]pE
%*n3^[>ciZJ=Lf*A@3l8=W"N]VnEV`/Y<MBhl:kmF<O3t0`^)HiZQ*=c=I:C'29M["h_n!\e)T;(qI2SPp*Q!CBJ:?#<\'.o42]4i
%c2mm@;u+*c(l\GkW=M&G,Pn:GOa_$=#JKhEI,(,j<&J&kr.R@a4e]'X"8o7Z)oM+%FKbFj^@1H+*7O@(r1!$\s(/f$S^PGje.=E^
%or.:SB!i9@T9TqjH3aDjFPN;X8&J+]d'U6TAC0`#8On4qSP_WDB8(e;C%h6^Vh:tmVW(e,O4,$_FE+APqui)fJ#-hOOT,I[O8LTR
%/\q:p'B4MEg&+Y@3NC#_7)jNBU5:TKBqU&MP1$NYrBWD%!$EdS8`4QcGC2109RF(Y[/8AZH^Q1*25@9Y!&>YE:@Ui"O]6rqWPhY?
%NM@o)KLoKLP9?Qk_CV@@m5L%RH@PR6s&cBcmWJ5LA%hWEnT;DC?aRjN&-VnQrJOaTKAQCrYWjFE.Y\\D4\nRp]n("'m[u`,@)IDW
%nUG\>S^.#'2^PIF%8O/i1j_=,Zd[s:cC[6rBqtuZIaT2'N8F&'mt<t@<O4Y2P0_">R`>SK?8[TGh-h!EPs!15IO6mdjR9Dm"!+*t
%1JjBG%pomQ4s0M0qSQ;hea1JSEIZ<0i5#433j.W%^P2Jbc^V-mSb@dB1L]pPn^R4H"P'F)(q2BXCQ+:Y+lJijFlJ#sZ,g<pTRZ;,
%_S;iu:/CLS)"?Y?Ld(#5dIFET4Hn[a?X=.9l'IINUXPEdiVr&m?WLogUYT6fBAD`LbKBG4DnRdnabg;4T=.PmdpBH25Ikc/=1#ha
%Y9L`XchXd:s82TkMgS;/9N&lQ+OJ^/O5=8dicT&\S`*o:D.e6:Oj6N@%6NSWs2+KCec18Ndii84hAtrLh%Ii"&E<I0DDO)eOp9dH
%/i6O?H:W(e2r'nThW:psP8E.G]%m;VG]u".:QB:I5/dGJ_:_P0j5KU'9QPSB3NVS+7K\DOBqTt;2L.EMDgn-@Cu[qdcnBn*c5W=j
%TRSZ`S/h77Mu$fMHTTRlhd2+r\r?;N,F3gj#FkbQk84G[hX:tHrDctb3R!JC:LJ6D[LYGI!2F,[C[([i^Q=QNL%(WpbJeO-W=SqC
%O2da(50<h)RX]hV7rM*"R\*-oA<m#JYJ5J[op<'nIu3Gf,AK]M3/GI3MN^#Z<Lh%(#3/nBLmrB7DNiKZ'/C>d1f6i9'M0mU-]Ope
%[*p-,djU4),ZSQEk%X57?da8Sq"9sYgj@\6!r<R"A3c6mT]f/m(%eD9`f8[[8$:0s*R!Z]rfWAV@X9^#SOV;#IE23!kDV^?djX!u
%^]QF2B$b3M>)d-hdAT!=NM;OoZA*+iNMI.FU.3c@lKrnuhQ5>p[<b]rlWINDds=oQlVTgH#IS`W<GU/([<erU,<]AVCRLT>1N#Yu
%*2-MRS3I)Jc=?(pPDf-Qf<B?*lCCE'hNQ+40D.&\6Io#(7sUI,=Z^D1:&_Vae[&F[A9jJP.SI)nM_d,kptn?E<D,2L6e,12'e3:Q
%8l_U!?\gbaYYd^?:7GrBXec2`PY+ju0%r6.Zlj&rd5?dQC.*_8Ob+dO88.<5g;"hKdrmW_>ALUZ3Gl*sccDQPD3'JQ![<FI&OtSa
%W&2,mk,.e;BPor=(<m;pX7Q70Dh_e.l8^ccjsRKNc-/sq(sD8ZIVgl.,2n-0R4*b+-6_r?Ls1_._mYspc-FS[bg=V>4O<RlH*/H0
%ee;Ls4(C)4prn">??tCZ=#9<u\S&jFhX%@@8A^`flS&a!G0gSboS5skW6q4]aQZJiIh_i)kn59>LXBW3KV^o_Dt&DZRIAPISYd29
%]uNP8Bs)J#nN>-U]U%1@7c)?nH+O=hnu[eZ+G:LZD,XKr78_QlHI4.07B:+N6Gj_8W>=*A3b`q?/L.f&&GOb4O.4)6m97+C&EcL#
%JI-=j,*'m(1Maq&%H>kanS=UR2^AlnM3Cltk_qL5B[BKeQe.)KS&Fu:6>gK$]hY((%W0Ooip8NR=TQd<<l"=!RJkRET/lKIEMbs=
%P$[[HGV@D<_K.UkVR[Y9s8@4i1N/@c/C1tsbfWPPmXhECrmV%+?;Q,%BFuEJ+(>rDNJ.=3@7pR^+aKn-9g,S5%K=fb>@C2"aXTNR
%56W4M.M)pu.Zb>eX$BO1:AI3S)<L%^GFC7epl(JcSX"S$X8,;eq37[G:@b1j2,=j^9oL!RjG?G45nYW08d.f43h`IN88G/I`XL,_
%5:1*6P17a4E=1,+TLdGj$rra%B*j)QO9W98Q4O5CM`T%@-HhJdA-la#nF2h9^PZut&LL(.1*5rj=N%sk2BhR.XKe^9YilLP=[RoB
%-10][&s/D*@k"bHd_*D\C6PV>q(0%o^P">]Bk24`8BR9<aqtRjB3BVJ0K+uoJn;"!=$pX2p^5`.YD=nKo,g>DJh^FN;.$K*%p7;*
%@uQ,5@@(`AeOg%5TtlaI"lkUsVHAV<NQbO8&,==1A$a:gb/^/03f01\*ZZSsd".W@,7g+NS(:@2pZmk>.m8VCJ"65.m@YM1X]^'u
%agHMr>M7M8q@Mqr>hLHfTT+p?q+o@Pdi\M:Ud'hS$-F"idoHLSgr`egYcY9$>=ZO7,S>Y#RVceuIi;%EqP;JQc([e(S4%qFp0$_3
%fWWSPFZ-=>`J0s!9<u'<ad-br=dtr\OA/J2/1&OPPD0@r&8@?RBThe^;hLee4s5gdZ:RX&`2%$410*&8^a<cg3b]d92l)WmdS6^I
%M(Q`ge1+lYYZUL:<\VfS``^GDM]$/c0Eun>)ILYHbI@4oMna*"7jW!1+0lesm/D_<$Xmc[=0n8<498C!k@\7=%Stf&+MZk:(i(kG
%/rh_qXhci;5*bqGo0"DW(XmWX1cFYQc/QuVcJ`Upk"$[Np<KP?Kt*V[1>)2epV"MS.=4"[^5_mqn.i$#K+fJG`>O,kmiTc##N?\e
%]E2aRZ<Q6%LdqPadU:m/,>FB,p.<p=1-S%JpCFA*K2jJsdMD[mT&3K@=2V1*4J#]*8(Qb)B?j0AI'aGKR]M?&B3h\j0<Ha69@*As
%%@4H^q2!oq'%s@,J[_&(c9'dE/+$/<hBgU`Mu>VARJ&o_Xj?V!G^V/MUKOFpdB(dR]=)%BgI#nM<Wa0"eX*q_Zi%NZXY6%?o<7e"
%4d]g;eP]achE-C_6LlN#4$H]?1$`>3'MM(>Opt!GYojoe-Sa7!\_2^o8@"Hg>EZ'!*uW2SJu!:TjDU5-ELSjGKSa>Cq)<`DZdq`t
%g+ojJq)\Q4.aM@0gKHjTXR*-lXlOKM?7t-UMm&5ofHbh*6>J]1Q(CHRDK"9+Y1WZtlHdc^]:+h^nn`aJPXl.dY>c#!P15p2/N[<r
%K?J)e)p@)`S`BgAi?=Kb:%C8\$q`YHVRO"\>@$=cJd$KYFd@hX=eGA$Cf$PN,X.4X#-CCofBBEeXR`G83r:WWrJ`bbRdm\3O-!E/
%K'hD9a\'c\gho]N>l7f/Q0_Y;-,59Pn@E:-WUK0Db)EN^J&Pc!jKm*VD6cc;;li-k<9l9?fD355Hi&Z5ZPgN8H7\kmg9XE74=_59
%Dco`I@BEG4jaFa?8+2dJVJOZ[qTBarr:rn_,)b=1V4L+OQKYDEItgs<f2Pkqg3Fr]'kK&dN-4oe#t`'IksXMT.p;/,d$i6_Mm9JQ
%RZuV;ZP'qeD`+gNrd+JWPtkFRCGL?k=k+_rFRdMd[F(G3V1"e<SR(-C9\0k2N\/gV>g\JVRjaB*i>2-r*#U5UWD=l%fPIf;Aj0j0
%BH>f]0RuU'FkNk.7Kc_[rWa@>)UmbV,jOG&aYNdUKlO1RLIS+3&HJ\!IO?RnT`7B&<JjJ>!<"$=k0(Nl9mqV]KW<*.qB,s)j=1*?
%B;nYh#n%Je5#9,SdLW-5BLqQe.&o^uHIM[+qJm7DNJfN.;AI[o5D0WSR"B(7_/lCodX_0\%nRh)4E_;(.aP,PA=,<Z+4d:40Sn\R
%i9N'uaJ,_um)6Jtm$'t.'(QQ*E1qcSIT/0M)lo,GFY/Naq>HrrATgX7r.DY_KRk8/U>X=,W%+l"8HV^$j0$cTPsKYsO[>M,^TB`#
%7nmqG\b>fS4KKaRe<1-_k#mf.9I%,5ZF_;ILg)A=)O*e\?gGu'."/*.Ta0_TTHFT%UmE89@Z6E3`(2?OX80j1ibdelfG!CGDn8%<
%P7)A2I`/VF)fU*+s7!eV&c\=@n`-o"8sp6sZ+0U#>XV39`3)eH#B:e(j.Xb(N+^NerG69tMF/3+Yu.@n$jILi>8/5Z9\OYH4dM(i
%Oe6#N>auVg8!5-dZll-[cGJXh7!]o\Yq6XH_JI*"*!M6$m?+4t_h.%rF)nUMR@+=^31HsfDB.pCnYdPmIp=CfFReRPNNA5[r9I4U
%\bq$_o/M4H92=AY<b=8QcY"jK@V97+Z7u<qS'1C#$]>saqp4G5bg'l[5''1gJ3MG#fQ]eg:A7=;J.<fP/e%jLcDKd<pQgZGE41rB
%jJAd_7(F+pn=pSeb">j6'5CEK`0kZ&c]JKn6^T8i^*MuA3ofu4MM+dd;t_i.4(m\,LR]U2217qIpolIkXj6"'*_MDOQLgk,:Mn[a
%H>Cfs4i[pa;g2u:<?9Jm(X%p3q\i,!\p+!UcA%]JHa]tt/'P@RQ#"];<`sD.>gCkmdATsE9dh.HEtaD>AM`YSCPaCdXmK[L`2+2]
%1M\=c,-1Er#X]9>+lab+65u&QdTF3ZM'Fkomr=IXNu#]WX:lOd\$g,oeoF0VG"+S>.ReJr4G:&LC8D2&ZHrgGXUsA"RBrg0hDlf-
%ne\&_F/sHR.t>8#Ct4T96s^!e8$Y,#CJiS,R>D$jY1d#c1Q`e`m@s4'F&)DQ=gb>ZiG'1rmd,8u(!#nrVUbN_Y@Wh?@kfWC[68$^
%Z_,4AU4j2md`QDr6Wk(:S/Q-/cdK;LditksMHWDJ3b'Aq4@i1LR^Rm\r1&U4f`8@(`$B&E)g]M]p?cNR$'l6AA*N.L*&ojSVYY*J
%o$,k!@U#;mm9!SZ^;X<@Z?P+2.U/8cUQ*f>/Bi]'G/i5tANM^,o+T2gP4:*l7IE,-=h+H@/JqkiGZ+$3c8Yk(J@h1ikFrh68qpV#
%+.Mc`B*J@&iCnEFJ$NBE>n9(?`Hi,D<akP'S1h^'0%o`'`<40CK\CZ)-@]7dGaoBAkO820Z7_(.q*\%?N>HrUTe6+Gg[oMAT<eHT
%3*T;["SNPAWAUki+Oo*8J8WXm(I@DN9^D4JTAV(L'2%Fu?luTdL!Iq6m='`b^S/nkBirN\lQ+(UIIkb&Cd7akk_@5!ChM;bc<t#'
%cJ[SVEZ[ETD]mQ&GNR-*d9]kkk'%Lc*f,LTSCaZ[#Y_sffcA%TL0,F)DfJ5ImnQO=L;R%@G]tq*Lm7W]dJ4oIi<[+]DMJX%a:?bQ
%IO_]VQ.\B\!7..Q.RVM$2cPPI8WH<anoF0]i-X-,IbmEtJ'd8!GW?cshdJF@_e!u7B=.!k#0t&C930%Vcgo-/2h1Fk+5*FBR8R(%
%@j\*p;-'cJqRI^np=EXeSG:Cl(n:H_79S]Xfa9RbP##BWWdPu;pLb:f[)T#/>`G,YX7<L7Z^oA((N7as\)L2@8*RZkp+"amJ7n+o
%bF%\!P\h!<R@Njg$FWt"S-dQhFpoo?[V`t2YrjhS$\)k4k']LXB!^1IZSrH@^.I9R2saktc7Fi)bkq&(?N$s4YP3\:*lYR0cBad_
%LdW3EpVbDT0CMMsI=9h5?[qTh-*k.gHs[e8?P`+S=h^c*jZL.&9Cg'tmSc<e++=Fn=WF_d=0O&1c=1s.SkDbYAX6+cm)S!"=s!'i
%gR$WJpLPMW?sgR;M+[^:pNL4pNf;)C8aO]\fsjb'-;u72YmJja2&h3-GpHfI2DL\6d4/_IRsQ'H'n*7c$L!F"&ttNb]GWADAkn5H
%7CD&;:2Q"d(<b+&-V8/cOM!PC-&-VV@re6*`6cS!2NQWgBR:=JZPSa\)3o5Mj>`qL8].,2p.^!sMkZF\7reT/^-sgs>>mF!VTt<N
%hBah0'ROg6P6Y%UID%[GDfUobE4FR]Z,e_jo2I6^hj1up'5BVWc[ZY"(HL8-qe<U4[+(%&c=_#u2;%qB?uN<^F*U9,QZj-hGuQ,2
%.BtD.!.f9)hpO(gjoiPMbZIZo2KP"]_TT#94Fqu.].149iTD>7a`22BdAofB^@I=o*\mI\7]%)oqqMf?^F7>aKQY"[.@>$/k#p!h
%O2a?,6\B`j7rk/e%:6'>#LIF:OL=a%2j(lGhc0&sduW,dOiOm0^pr.I4"3(/b.j49oF3-k1PP:o:lk$^8nd[>\VufBNZXbf?0)1>
%>3T.U-*P%JA<1jj>p[_6\V^>AkONW\P$G0/Og&jQ<&p_s];%Z8h0_-1I-`MYcPs1[)MnUMBFWiQ/][m'UL8-T^b]kEkU6n`M:/L8
%VWbAS*6d9;?BD3`(=%3YqPE!@\ZE-j.,;[!S/6l@,@?A5n&OAin+Md#L\^LX%hj5*c,@d"1j^PbkH`OKRicq](1qHLG(I!KCp_EI
%Q^.$qk=b6Oce`Oe/UDsembWuJji<W@5*,;\XLn@6?M'Gcmpb*:`Lhq]EX^Go^7ft-qcW3V`I;R,n"S`p#JAhWn,A<a^Z0uF`3L@o
%dlUCg#O$08i!-s7D\ekjs)07As-ubHqCi@)?VCWnRh`uNOH^F7d\7"?R:BAfbJXq@3@aeU:?D@mI;5R?Eoq6@R.m+sQ`$NO+Nos.
%>jqi<<)fWW2CctOUk\gcrhplLIMnh8jL(qN;Zp%;Ri)5]nSZ1-,+F*GLbN/ZX,\Z$=G834+J\BqpA2O,IK,n?^<.u&HcIH,RD2h?
%9&et-g#0+An&Oe6KH,DWb?:LO]Jb+::""Y<(TK'`3lmT_YS8-2QTUBOB7n+,(Ci(l.\Z:;FIa!C#2WoQGL91JlH_<\K?CNP?>b"!
%HuIcq%[-]TE^NCc#k9L?2Q8.84)bAf%lrgKn2Wb^DL2^7@c`_srTAQ@\&S/dp"^kmp(@%8qQ8G"]j>gqL(e.bSYgM+Dg/8(p$DEW
%ma\MhiVt-/MKgKIN=K#i6$s;]W4=?1Pn[,kGI`<Wa_66[D-K4b[WO\0aA>h4_QsQ:2W9mt]=>k6+%oDXoLocMSBkutCWlA85WH/L
%KoMD!;F2ms"XH!e8*gM2Q*\2+H)3;GW8rA40Eq-n'np]Z8pEe(<s>@rX+iHReWmSGIj$<tF]V8ePrY>Vh@l*:WnA,P<^eNr8h2r4
%<?;OVnIKjFoF:,scK&?jm$Gd/Z%Z.aMiV]5"`k^@Q!CNs(Pr%LKbg,b`>4aKQqrCCBdb6Y09?NFZO'H@Y,L7nAYg,1?7?2q,_@Hh
%@900Ud=p/J^S^hD&IXbKalU$?HLI7PWm@dq[A=7)f`G7;_<hl=M,r]&`E9@AHtH*2p8PDKEMCUp*>Ybl<pY)T0ff)mJ>@k;b[Eks
%AU`h`3(Qo39W%sG.uC9?Noaj_+&"@DZ[o@W9E?8[5j&3l*.mh2?H^1H7EM_kg!`SVF[pTNE/<;eU3mAH9)C/nQoV5u_08J7P5qfG
%</-o17"m4]e<$o0QS]M_lQ!5ESVV79f,les3+$0.:BJ:*FoY`eSF9a+otnIMnn$'T]Od.Nn0cX-@"WO^@GO!\`ID/iT2QLN!3Gg8
%DH/_#P43pA2@(k%SQq%*Z9duui[M2MI!lu+EhUC6$&]IWps:PAe>Pu!'$"*n`9@aM6_VM^"D^qa]TMM6/OHmdd"-]$P$4Qa,f0&9
%h/taOaE8?=*.6CHXgn6pW>l12R+A1e/=1kcoe>d-UdV9I9%QgN'q[3]r!TI;_;^aSEFoS-_/^Cclp.S_p0G-4=e`]1^@!RSKomkE
%&romDO@jj`)b=NMPTZ!>cqGk.>^nSeB-s9]_eEHJR?uk*lRt%#Ic\q:$#e**mr=1t1T>'![#1[G/.V'W^s96[,W;U=Bdso-F`M`3
%FUj^LnJ'`nf,U@f5Ct=K"?_I=1W!P]Uchq<`X@GO$:Xf"iVD!:XH^B<(gC)Bjc!SX4j`GTD&j2[EHN<cQ1-%B6@/miV+gaX,b`(q
%W-0ma=Y,uFq18`>(HOc2_/Wl`SKsY#eni/A08Me6Du7)8qXVN1B*L3<C8D"IE?#,_@P"<&K,C@PWJYfecNK,i\X9B(ge@Ac7WTA<
%Io(nb/d,/aG5eE]cO$ZM`A5qmo:&'qLNar>Ih(u#a5&,\d6EB`\'"!>^T;h0%s*-0;7ZS*F53hOVDd3-j-)dT2@:q[B;t-$#EW$"
%"_eP<Q4a#V]O_suf?b&8FeE1Bo<*fYbhF')rl!\Pl)/G&qZktkGZsq4.B)V39#%0>H&OnTMU_[@pZjJt]/3Ia^rmp$G`+U)4"iXI
%hK7J8A\?[/pq15]4(/Q1q_)>pp(`f.?.s;`3i]\/Y6JM)EK0eq-;gu$Ha2ZCD'e`6?^fF'k#8TJog:[P%E_se)D7b>/mm*K;D%25
%)QdigDG'OY^N7iaDj#8\a=lWq"Ea>:))uas$U&8.4_aN39!^>@5RcF*!0BGEg@&L;46&O_i8)kaB;</s)8Eme=o%7N?q:apFJdN,
%J+n'=S(n!Z;<-ATh"bmUjp-n*[Hen-#CGLf:q)<3G;fe-p=K)coM8HGk?kDt)c"-Fd2>aJOc7tj&V^PP[XWB'Vm\=/0fc#fO9Cec
%Ve7e7s7JSt<P*[.3\%cJV?j$Q^$.>maT^&Q2o#;i/9WukSi-2h63j:R;/bniM_n.X,Z4L*L^9=liaR8jn*CO1(ZLC3m-aoHc2[)r
%@J,\>MZpKd3J\[@m%-tLUZ7t3r;BhkFEQ#_fa&TjK')'WqVT+Jr6!g@24soX=F%4PO.Us:rrXPBAC0fE^E^bc;jMW7of@_:qgPe5
%s%0#pH`ZhOFo?TZFoD-"XGbtm4E!gkkjM4V0=3:dnipc$LV<]'iIs+>D>I0^NqfY=)D,1HmV#3>``@#-.dphQBT;U*rA<(.MokA6
%l+#L.pN1lpF+UdS:GIpjhR'UZG1I1k9^sc3k45)RQ<]7.][jP.X0aX9D>+6q44E>j]/Aks#&mosggDj"g=EX.hKYeuC?tnK#?D[r
%2QQWB[("XO4g);mDEiF4WGR;s`<M%k=kAO[1U]6F]GUAi]kPIWXfX"O%skq&S^GOu%qF^.^4Mk8qq'cORGWlMW,366PKjID5Ns8^
%%QFkW6XXTU),GHHSag$_Mt__I6@,`WTI6;D^"K*>4-QFB8MiFF9kW4'#(7^D1*b3?:ARs"9/MH:13Ql"gSiUsVk_D8c@iX-s'Jgh
%iNUc``8JAW)?/$OCjXDH5%ok!-cUZ..Qb=n:+NH[rj9#d+7uI\\uFs)kP'%u1H[Ya*:t^67ONE^<n<DE07q?\h=<;Hp<FbnmW::g
%luiT(@<]O'Q+e-,:'^`+Y;2rb/XX6/ZodKDd#Pr7qIaBp42AJ\kBp`bT1m;#UY^9u:CNseJ+U`.#`>'(dbGJ.pBE5k=8i8)D#JG?
%R!2,+-L4RiPq]=pe\L4FUY837F>,EGn:nNi_r4N]*Oo%8T1R4kLbQ/ZdA@0/Ss=R.V+T$N**.5'^Ra,afCn!KrCI,<_DP5rE\nbY
%O(^2GmDr2a)/]6rW]JTM9qfU96aPsTh%e/nBlA$*\P!uLG=#&S&dP7/StAbRBF<pM'R<?BN]Y/#8Vcq1pJ76(IugDRIpEmEDBI'=
%YKd?00E1CupYF5AYICu+PZ@-8)bnMjpJA?Tq4m]VF>3(q=4QpW-F4P\V;prOkJZnR'-=7lgQgs.]]4';<$BBW>VkJbM(+(`RdH=b
%K,I@Ob`5]#$(fFi0,MD6O)ihiH?[,`G,qu)TWFQlbdQO,F9[@X>@FZXM,ba]KC_-o*;**N8X(:P=?aE<O0CA'@3OY=cET13iFbs;
%[.G_ncfu;d7rF?1nKr7pZQK,$8=a@<dJmit5U<bpo3;2O'm.0(_?@0g*!q%g@5r9o^X=40RMeirdmY1?HYu(d27,,b<Dl<#HK;LY
%1@Djg]iZrP`KFJhk2oX5?],^d[8]!)='M><]Z6#8=OYTEFV/s14EEfil./K]1#I41n,!rcFr*Z:[/\</PKtk3[(dh;:/8f/M/P%U
%6o<V]K4(HTMmOBmAs0K;rP1akK[o)+Q6eJ<V:jV$<UNk1s/\&tI6L50aQE8<\A2;BgN7'UEd"M3,ShP[>Hs&J=8J/Z2;ckj>WjF3
%C?_8.He$O=TXoO1\rf!$$%k%'9uukig"t"kprB])F/tKjpWk/8,)s1Oa\n@$UFDW)f'6C/S-R))eHp7*c>0cpF5so&h=510(@^)F
%&#[sk6$[Yi2O^0(g9nnX#+JQsUu;O$3,2@Im=S9&c$<2-p's,;AX9gjNeUIrMd=nI&4069VXl!DVW$U?6Yb<K5Sc810/Dlgk2`8o
%m%5ZUZ>6iR("<NWdZW9^MpY+?FC'mI1(8,[^!hn=Q^JB1iFt&)#T]h\mS`#ZXZF@nFh<ts4'*PKO*rI_dMS+O[o[9.J+T`VAX/<,
%)r&[h@AK(Q::(oC61XQc)69Nm:<'(-^?)S4nRuHKo_QiJo[D)$G"_OAO*+<&+4#'mR1>0f@=uSRK8]UqF5>-rPU10Bp40'WnD^c6
%ffQZEfcJac0di++kT?!C8?uWQHEic7/"`-n=(shk[+97L/+"WfI(mlGmI*hs94oeZF10mkqgGY,koU<q$f'$]QN"#s(,,'=>P^b"
%ZsdUQgRfO2Q3eD8Pt'e:S*DON:,81&P:=@^bGL2peljHQW4U82&tKNeY]JY0W9$2Lc,7s(^C8)Od>WL+;K$1b'/[lukMu\FLMjWG
%:1/5!)^7hbS=N&$1I$0^\YLfoe[.P`4(!uqKiF,A`6tmJB8jXFPD+qL-`?IHG%31@oNZ_FiK;sAGd<S2Xnb<]FM=h)[<D-#!fb63
%,PSk5-#''uCk(4X+&-?ZIY$'fjqh^tchmjh9/BpgI$GIn3pDbGcge#HS1N7Ma`r:l>fuSQNu^TL9[4dn1:;GW))I/pZ:2dVGYU$!
%Dn2h2_1dOZbV##de+ormieA)750jikZi*5^;(O']\kaYG#&!g$6J^JX5F2^Qf5`]2m$1<oCuhL+gAA,ss0uVeTQAO!=u1W([Puq-
%<F.N:3n=:61ch$s&>:)ifc9B[T$+>8L]jldp]22GR<Kuu\)'&-Hu6L#Z&tqYo&KI(\c6F8nG0I&\(9Em^OEBXme17?mJ3=LqY8J.
%iTe8KdUrC)m?R!sI]#6;U0^'%WQV@.Y9,oPRQOj2qKVu'qY7Fe[9M&-r+_TEQ\/\or74!?*F)a^pUPTkII6aMA:="o\kBrBhqP_!
%2Q\m8on1:<\(9/ohKGZDs$=+sX^45Z)f'6XG8`/N[]ciGmiP8nh`fSSpNLN,N^m<;g;`jYnC@\aq6\sOY.Uld)dIkc__h+?c/")e
%?-/!&m*3]a+)<rtlC5+Mp"QTt>$j@+Ip-3M<0(rTDdPYEY<:OnVdUELmB9lgT/QF.^!5hpote8jrVGK[EL=EM9,RJNXk=/m^9=_'
%]`(qmU.J-!T+=,Hkbi4RRi?\nQg/ecDc^].G:jD;'(7l.V_h*;D<4g-eP0DR1_,^&pXX(\j(l-hcYe6G[GJFm]%uS@hL+g)oCCkR
%DRX\?TDH$#qceh2F;Wg#AE3ZSYH.WJRsXhEeVDcFN,O,,X_ho^qi1j8=MM=j(t12(hO@=,[:/h+nZD[an(l6K5MkjAg"jc!>T7lG
%_HTO2U$]/?gml##b[oCQg"SL=>O=B;G%d)WVtX9\h!W\tfo'?C_s^f2f,GZEQf#5h(Fa651cIUsb7Cnukjtpa2gZWIUYX+c\DIP/
%X0eZ-lK2Yob6R]@]c7)R&*cYDe/_8VDt^VknC-Ksc+BOSC[Fd(hN'CM_Cn)o0AM58$$LgQ8GFjI*jjPk:MXlQ:S`F!G3c4$(B#:k
%&-]fVDEW6k\fEXM*o,?f]tM1(DsuGecb,`j`mio;H>82.<qT0KKhlRniQD+#B[o`mQ<pRM^G*6g]ue/[]iX+&[@QHh>L!,Y:VO;!
%Sa0ABCA7DEil0GlYA;H'obYmOmJckQn"3VkBUF,:qp$!Dk^0`3^@`eboqn=nX$(A[^V0Tok^QNTn*M3(4_QeJDh`q_#@Fh(e_\@V
%Qu@I=IStO,Fn82:H"6<"@)q2/=9'U#4fQ0.p$b]=].E2taueq`G,E%)FuH7ro8B)(Y(m=i)=PS39NTue6-gL[gX1>^GP**T](W?G
%Zp1_69F#??f@irnOdigueORUAg&3BFfABi>)+$Lt%k"96-`k<Xe`PGXg6^'Gl"9>6ah=nFQ2N)\>-PI,5.Yaqo:!n!N"L4/Wp$il
%Y+=?]*3*(1X]o#[[\Hp`KAT0MCpmPp+OkPnY2a<)\B?fL#D]EQG-Cf><@rP>]q*u7(QSf>8tH"UW-.:sDR!kZMPK$l"q=McH+J3X
%K[#.D=l9)SB[M4<WRpRcn(BlZ:FcdH8'05*nsR4*hfplcf5@JSUK\6MIDtRi[kq8iGJDsKVHI3\H2`P0:GmOtju/:S]_hB_B)UJ+
%n$kOu^)>IE%c:Qc5+^Q8*LsKSO.Jf-CNm&p[9*6\fBKV;fBVYPetEkM2k'Wq+"NfKkYOZVlcm&^7\\?;:Hn0amIc,/mi_)62KtA&
%\$agh]9@9ICUI5**sVPM_4<HLDGDim(tW0&)6DAL<_iMY[7B25-gKU(]%QW$6Ft,Lh-mO7g02&erN4O21VX)ZY=u8)RUC&\Y!N'[
%f"I'b50<9]jg6)#%R/CN^MYt%Di<?$osMi".Q.%uL?-2%[<hWIoLj&uF=2(Cji3Br"?Bd1G?:uiQMHJcp\2(NcPsbQHd]GECed3r
%#>\B\>P+Q$HLN38X3"/,^Y^^.VfrXWelh`UiBa$L^bC5dNrJUkb!Epmq2Kj7;7r!Oo]Kfhkt$+^BiDX!YNVm&9kg=@TBK_M"OYB\
%Lke!.cM$3khgVhU[+EgVOZ?ing^?i.LQRjBQ^H?`qR41]DnI\D#+s4Na\I/*e?(TfSJurJPlC74U%eBFo_BE5HMrs)o:b;VPK.&+
%]P\:kp<l<[T_/3UB;V$A22>EF;r4XqqtjGR@qI+D0[Z^e#%'2eh>Y:oK;oPRUn.C`&.Og6L7Y$U=f]*S[dY3r-e"pkD<\6s%GmR1
%aC>Nn]YCi8YKP>:4MLS,4No!sa`87:"s`!)d<Hg@R6\DbCE,C2bq>MMdKA2eb1#mj<>PMk6"s<j-_nD&+FN4XXLtrm5'/7@#oSY'
%7WTn?"!@<6b%#kKH\2NP(#A$c%:f@-/C("I]DM"@iQ$Sjh]bPH(;4*A)Y5dT^S.6gT6Nq0Log:Ga0JEaZaTJfafrI-]sg@X^jbA1
%O.nNXm<Pqdrqc9]eb5i/<N*<u\%A(J$fK;FZ=fUrlYeGk5%sRQIu-98.kJd3GZ%Vpag/MJd^)2^2G\7^ea>;_UZjB^Rmip2DmnGN
%hqT4/r&WjU@7dr\2h7ZJS"-bXCF,Ml>[Do$IAPfU)f0qs@9ArB%$TLo^X]K`lZZ\p+0Q)+f:MoS4Y6Q?o21KS52KUQ]9E3Egq7bi
%/bt%[Hbt&NC7T5*):`!L4_XP,[^LFkB!&8jm4UCN*Qf9Y54![#^"BjbENsDbmtuI>lbV\0DiN;hc;ltD^8d)#q<p#:Bp]d=qVPa[
%dkERY2(q`%'&hl3c-Gh+>Ojd4O4p^tr5<GP6pWfD(1`2eH\<02DHbZf6#A"7gi034?,=%!^8:,^[FWBuot@BKIBSPi?K`l^?@V6'
%@8m-dAG^9E`<YD[f(XnM4H=mfYhYe^O>$G'>O:^`f2n$?]m*u+_ad_ui6I=;67";Fn"\U#\*pI2)r:AY0Ls%EIJ@&sMClo%nB(*)
%]<QSX44Cp@;/[epkKS1Pfs?)*9(*%\o^2T=NXqX)!VW&T3P;=TWXmUq#NnRd5euYsFD#0^?SZ[mqi1TNYF>?45.l\h>i'^a-?kHR
%.?8/ZLXoegrCf8Io/QSmn)b!7#Zg\[#=5Ti.,8>V[Z%tEZLrQ?IfJf_a_us$/.&Dp2g>g)gO?O(N@=2n3*Lf[W=VP0IHBmPq^\RA
%YPre0g:mL%dX46WNZX%c<uON\Tkpona+pj^eYd=-E\I0=L\JO")1o=5lkbWj*FLl*S`osHrj\Pieq<Jcl\Tb@5?1:2Ie[.umQJ*j
%J$G2bYP)bcM;Pks$T9+,G)m2@]le7;oe:GS,AahsoH-4Q_KM5#B4E[DqkM>o_iL-banP]'V:9e`8c@l;/TM2*lmLnCpfp%@mU("L
%?q%#b_Pl/"o^Z.5d&Vq]rhU.W8\ina2M3N8[9!%cq_d5minLtV[m0>jY.&1"2b;diHFY6\*i[jN/Z[cGf%Ht8qt/FZ)L@E(.VL5I
%So/;:BrX2(gtN"cq!fA*M*TejS6QKVU]$+TYs/n2j$uU@Hc-.Bf:^\!l[q0Ee9Ea9m1N8#TB#@jqi/K(%H;X*o]pn>j_2HuT5Np@
%&&',Ypu1/ZqY,d$T%V<QVmUpHj?Q$56ju/q*XBG=pT'WY60\?mnKcc^n7^($JQf+DS_^<&E]a_CXIWRVmse$LB!L<Mkjc^Z[@P>/
%m:Q%AhOX>iB1IBJ_Ar5?r:Se(=79nWVnEVCgS:[E[GpW4VR()\`/pPbkJJ=#,_-"Y_qiqoH.TC1FOU'l&Y8]4o?!3D]uJ[!H9sNE
%HJ[H@hKhbtSP\&GHMlNWK>[C'EnFHBbI?r2]Pm2o%1_Sdn,"rclEc+irRUD^[I7\uL)%pfI-94KmIlmif3Yl"]VnO:hqhX$rI_.@
%["lV=#X1DKr`X#aOM/<G-4fg)XWGkcC2IO1I&As+]tE%RYMWLMS]m&()WmBX[;Z!B@S0*i\7^;rFmK$jB7%n:j5RKdRT?r(6<`Cf
%U?]\BCJ!c7f+7<kp-*s`IIt20dN1T`7-qJYH2W(Q]LS,6^>-;@WN'PH=)%u\@s,Q[jN5hN)s[=VHdQ)^_=lFQQQot^(EYP"[^m!Q
%V9LA,QaVeg=22/p-_">t\=F9ko<d$2s)phFIU$a;,jHbdB*gtuDVRB[J$]0dNh&B(bspO>X[f"h)c1=Xo^Si=ZMCME5O[2cXj?Cu
%Fm\;([oY]p=`7iUdbLA*(_WIAlD(D@5(9I?+2.*,UK>kYgB(&qe\1Y8n7-<#m+ctlHaU3Zh)EOMh!U>2]61HGID"06?[_gbT=p6E
%?>ZSuRNoHn4o/J\DlEE<iT$Eb@100E]+^69*o'i%mMG8Ml,eGR=<a#c)iL[`?2fg1d5tH3UFYfu0<^BM%<H0,HcMRXpLA6)*ZhGe
%4ZI^fH[YY1>&3kYWm5AML@i?B$1q`P8g[s;n`=qhp?@,,F6?3.q;Q+qE1"c7p!K>$a2C+7%VOJTbdH02"M^96c&ZCHUsJ,?j2%GD
%/X"IVFrH/#oS&-q*r#WYhqh."@D&&9DV\:h^?&,i\T@><rd"IeQ0GZo[pSrukf)]]:YqN`P2iV!A*)&hf"B#DZ_4`irQoKN?[FoV
%e+(,\I$/QSp\Dee!hrOgB,cYLmdAlCeo&uqS$:kCOhk*<[lRk\XSBE]>sE0I>lOL[q'IWJ<`e*ZWs'"lO([\M?LN$dD/MOcrJh$H
%j#]Z_+!*-U)>7U!JQV9V'f!D5n"/pqbTBR$l?r?6\TpE">+_GUIVS<>%'-Pg[E$NF&(pt0]s,)IO3Yh/n9dWFIe,gQ/S`U%h36i$
%qIPl!Ab_.Ad+1rD.pa6\RIZhL8+b9([C^t1b=AsbHF$b$214+omI#J7^Mk$)Q)k\G8[egU>MZdSq(/iUPM>Od(es/;oll<.LAJ%N
%oG[FsdG2CA+.P2^qYp-_fmPu-S[<.r_u6_2b*,>Lk?9HG=eGQ8hOMOb2orZ-)RR)HpUs&rrkk8goVCcEGMTfOA/jDOZXRsQ\Zl19
%k\bgqm&b^8XnLc9HghI^9D,3s)D#XDA21a1U-/s6T)$+/]mI'BD@XO0&Dcg*]sW0kMY-mpojIH<3ofE#PierclMU?AD.i%s>ApEB
%Hce!JItMB[o+VZ\dEDBqXnJ+GjaCc,\S7E&%1bhUqXH(arqM/frd0(=!nl6j,#fji8.'c-C4@9f.pBQ/C1g`SlG:U!4'L5?I*\XD
%`qJH9Y9)b8"R]Q"g27/n(a?1<HuudLX3M-u0!6)*GlBUM#D-ht"+@&U%qdX?o.jE[^^>f!k/O`j=q`[*G'_SH%jopS:R/T.T^R`d
%j->!k+&lHsqR:AresdV*0;m(>Q'F8'^rH5?SW-CV2WujVgh]]gD-Sh`Dk=7[aenp@Db"A>fHFiG2Y8H/'>NSNHg>GXPM<H'?b5Vo
%pGhdKn`K(8)nc*&4oEg1=l%ium]8VL]R/B3qDgS`F8oZr!A`dSP@3BbE:a/p`!T*'PKR_;A9u#hAPg'E*_'hM3OtQ[I_N57VW'.h
%`A`N+8WolJ9<MVD(#dmpGAI#La]).L?L;ihCQAZe_YV[:hP/?KZMApuag6b^`uq><#beBXf%46JT8@gDI^:EQ:*`%HfC%]XcF2R@
%0a*E2Wt)#^=6b-7ZtU@pWZHQ&\_6=-3_.GarO^n9VmkXr`1GS^K5Y:c'iS-qI4QZ\]Qg(9I(_Xs)b1>03V]Vg#8<KiNGn,_:F$1m
%Meffif33NYoNgj$o-!jN6tADcpYp\NjSAIEXZJ!W4W<,R9q8-YS*r;Th=3E$e*/%1!dbm<iNdkWeb&b#qGHk\\(:HEme[/nN^PDK
%?<nK8[#@ntjOucMC#?SnBTl/:pKL"!pNimlmWn$NIFig74S%G#URa%sT@bhFA,74Fn<7(a=+en8p6pfW"B$+EDo;G0::ToZID5<a
%p1gu-(&_PXc*c+L4:D%0K-ko403>%<Q&X(XHMq=A/ofk9gZ?e_,+koa)%k_\*4EKYn/>j!+_aa&=W]P.5&GcF<is]Tc_!Gu<jT[*
%IC#J/Ge^b0p#N@VZ?A[ePK?X4g!7^2G1^HEfX1Olg@\M@oJa'1lI/[HEbFHs^rqe*8WVHog@H[Nh]bpq:Gd0A3]!GrjU:rEp$q_/
%W4'J#PFLn%o934e\]YTTKmi<jhg=pA9&t0mh5hL`5eSH?o4e(_%J/duqsgHZq*lkl..H9_:.C&#H@,9JFCMO<F@"Ja*:$-Sa$0Sl
%p]^M+I4O)g\+3U]?$p8Op1\TW]s;]n-%"D(q43q*[)&<jh#p<Oh!Cf2Hg5J@@9AH.Ha4Q*4'n&P88`7\lKkD(Uor:\<I_P^:M%S=
%Y8iJRnDnG]I]qS<3mOA4^N:^Qs)R;eh5;@0Vm)":P=[NUf5>uIH(1]&nd[8MlRC6Z_6'bH)LnF['We*7:N$tYGh9\BH_-b1It)_'
%c2W(I1B,G<F\OKsEM6$GJ)P,J&dr&'gL'S!7/FSB#'q/:$e&,#GL&:#^-*MXf>c9hN5e@l/r+UI1*i1)hspAWPfO\:?c_UD%/F?h
%kV'W:Fn$XZahlh21[h6:iM\d5a&!,_D;]G#D0KN/.@kIdki*E-c^;<b]6d'sla[lqkn!NS-H2F7)bA%nhou\Eo]o$-cC[`nrbGa:
%b0+LZU.*3$Mhdk@p+g0HEZ2@RGdQ4nDKYsFNL+!\4GUj-5b,FY`iqNa70`BkV96c"0`Du2GAMGJEZn=q\:e^[QBlI4$n_FSIGo+X
%6!p4,]HS_QD6<L&ZJBpi=uPMsBBu8T,"0ot%JTW%b/PJ7;h)RNmeitq$Ao3-^%b6P@]kWC[hf!1WL.7UT[AM<q2=f0M.nmQ`'ChH
%1)co!%Uloq3K\>AIENEW+1u3N^N1nY8sep.Lh;Fpfum,TA'^sa.uCW\V$S'0CDRd1?>N&Cg=nVM4l.3&q?)Y+SO5_FV).O>VMDjB
%^;X.s*Wa8-Q%'eIL6Y?n%j7W'X8lH`pcF*a#cgR1JmZ(lIoE)<>'W9iNp4:lq6&6;T;0lX#n]RZkd)Y+`7'fC%m'YtV*C45.c*YN
%Y0atmK-?q]1**'`DQhLOU(3a:THi@mM./62P7sZ3iIf6dpCJ"p5esp[0Q`l-aEfu&Ti7EQB\uO_5H1._O77Zbok]P@BpX/6Nr(1?
%eB,/-acbs-VJ!an?cCYXn*YBkqUF=IWo\8$KG99_F7+gO06YA6j/8I<dG*OR1qQ!lH_PK,7<!`_[!B!SXNk7L$X/1i=%%7+)^QAC
%##`dHBXMY,%'l1)Ir\GGDs="lN[mVDrh;'Ic3-T7iR%g*Zp!dbpH%>G"Tn&'8W@X>^B\Fuh&-l1So_Zo[+143r;#]l>K^[Cc3qj$
%HQbIW-)V--G\4/t)1Sf20GJ`F;7O\Lo%<(ejg3V-31l4S7a!F^>+C^mJ(r_+e*m7QXCA/+Z$j1klYA>I^;BFo0EQ+(cSFRO&ldZ)
%L/l:fQh0XDpL;:h.i2:W:'PU8rT_)(_'Zn/^Z$:C#qJlA<jDf,$h-o6:taS$op6D2>`!>t[YF,dPLs,>T_S1LP<<DjrInF5K,o?5
%k4G\nDOt5)-4)mNoBm]f6g\F+j"hL#9.$r5MHsBB@t$L_(:rTn_^m83`H+;>o>%1dp4*$PbBlL.f3NjQjDSEdrC^6f09#!krnkt!
%#$QC]oMqNu[M*'d;9tA&PrpUtTuqU%W5!(t(Te+-:fq6?Spk^a,)E9kRYI(iMlUQXLBIp`BgbnAZa?/;KY$TT^Z7gY'?i35Al[Op
%qOu!1KgP5Gob=/o$d$;$=JTr5JIaUl%&1BQ-DA:54D5^8WR$0O/b1(i.&!o/S3RC_.T%5mO2+UW=VPHhPSZe'6T!ji_]T8dMTh#5
%%+As]B6Z\!eeHQ,#aQgf5g]gBTIQk9-8Bo^.YS,,cqcq58SC:2I1lbmTbYM!1]i51$!I%j,SM%O.5_C9n-h\5/?3r<:gduWj/7D3
%M<H19"Z-V'/57at#'g2fQ;IT1L5b=D<M2uRdk!h-).@.@-`'[RNq.<dK*RcAPgOB&k_;,tGmLbXc$@6+O(dkcfHip_pNkM;D*8(;
%0@1LAI]\D7\7#I0_6SYDYGtR@K$c!,h:G>BZrg=&$:SG0GsOXqpMj@_1'+=E#`kYaC>eVk<E+%@`^1go#cG&`6M]NZ@8Op1SY.)f
%(5C[/=:eKm+BLZM$SLuQp*KGLKnOu.L<G1]U;otZ!-=j9TN6>UJQiQ,C#<S*"mnR4a2c$u]rObfdVhGjdXsr@dm@`i!bhg,b/?X6
%1DNoI-mI_[etIs-nR5ZOL^e(/4:@lG,qpP?KQgT3iWJff@)s`HJ\l/a&:O,:#+F]mM&;m69FD^HCojj6+`1m6k$W#p-R"%r,lq3q
%7!,s`N!J"R0EptN"JV.sENDbTij1Jn`+Pbu8Hfa\(kgrVG=Nnu.E57Rb`[Z/JI"%tUo,3o6J-eqSV9p5S<,bi1b[H!X9B@IlP2iN
%):QTM5#f4%l]Q:;2(DVod*atV1eDY>@5Z.Ac%B[V7;1p&1'WpQ+mou[=e$*nOXs?1bp8#H%DaMp^)BhC,`3%qW@9#b6%%Ci_;[o%
%TNGl,5X`@*Ubn5ZLoa]5PiSnY7)]0=.YA@r%V[dp,O$fe8CiW>LhQrI69PpU$<`h:7,p]!'p<co;AL)b<8(R^-'h+XCe"n7^]pbH
%_D;q+7(Ws@2%NVAkEoohkTaX!/Fk!ti>8;kB1Q"kEf"p9^_Ah`FC:t1,tV)bJs(@Mng'@*A`1lsO.\%WUk1!h/;,`"COp&IN-HQC
%1]m4#Dpq\H/P4-#&dLV!bZ#?M@O2T591B8.%mVs_]N.QGn@iisW@t)f7uRQ4.u5,9C5GAMV3$diCaX'F+9d0[F?k0g,kbHj0*ETK
%Y#N>L:f"H`6(6`<,ba$qb(55,8cF>Y/TaVnL,^NMGb:1Qc\^[4"k4b"NX%$?1(.*5ljn[2'57)k#XIF16s5'A1-DQS(jQhBA0CFc
%C1<K\O<kL)74]1+V*m^#aB^!?1eT(jD*T<Xb>BW<mR%_Gd*@J$@ce^EQ=3,HBL0@1Ys?\c1ke>ohUbUj.jIno.A.Fi@)[`?)T;f6
%RP_Ol+CHKcZq?XIWd*gQJ1r(Cq@"&OJr6Dl9Dn5\g8@7dm^"%1@.T*'a?k]J+\=r8/W"/RfZEgr&Y[ABo1YVm!Gr&_XbJ;0,NTbs
%&BTMkXHeH<7@K*nOsq1A,g!E%6SoUT!GE[9LkGjWHJ!\WB$V$9bXN>P7mS$p*Kg%-jV1$]lFp3&)ZYNOM.2GU''#D4=eV-(CmsFh
%YFnX2QE6mDPCTK0!o#4:ap9-DfWKeB-?Kr<0GTQ?OQ7o(Y%Jan:r<Y9fRn&n')c$!;SCk5rPQ3m/Zp!umSoI:)jPVcft.N__#CWL
%6+fX\!p[\U43&mq6EpVb7Sj6b.Ic[OX,Z%/A?c`m)Pi%Y954iN*!IlCD/YGqmAN2j]*\=m/=(Arq4D0W@,cNc=AW]i%VhnY]<c:B
%`QJe"2U:*q^V"tqrfbJr@q&Kq5Pbc@qjE'lcJ\Ms3-J,1Cf(KaIF=?36O0>c'j;)O+Cmg'`>,R8VbQN^-"Sp2U-of]ad87+-A-r9
%L,Xhjq/^O@4(m$1>M'p%Ia\2$`X@nHh?92D,IIUsC4WH9aQ(JN&IqDUdKPNLQMamJA3Ph1Gc8k'%naD^%91=4c5K&^<8W_)26M2m
%aDb_2_L6/]1tTJIng<?^c&>qHG$X]Aq<utLRt#&UF2BJB>ad.A^bdE[O>\d?cSmEV&a(:APg[u"&EYVX.bUS-dhG@cGn<:QWB+'^
%(<GGCQ%c<D4=D*9)8aF;"L>-s]Om0E_G!qfJJr.KCipRC<$5<GA=>"ZlKLnsL^,]AC&$uB9Y@0"c2-c<%L7(MqseQpLP-MaV+=1f
%a!BFb&";\BG,m0Z-jFsu@0u"\CSC`J4Wo,Vpq:8FcnV4JXZ4HWOG6Ou#0:4-oTgoo>8Lj,rB#g*/m^Zb,8Ul*Q=`VU&E!i3J/Sgc
%pRbt9&ZkKSgiE8KZ'Q[(6!.MfaZUgm^!L2*\,dY4UYGlDnfi5'&G/bq\]=bN^oI&mKt'ucrmj?V0r8`^:#_chp,C)(;=N-,//RoM
%H4lDGhrZC#,8tH%KKornH*ZM1*N1*4CLKN9VicWipfdtM2^6L<##g#i`phR3NQ<kWni?Lj@X],4olTg>Um`WU/qH30@3fM!U_83:
%".hE@\^Ua.)9-#^mppW2jef;-_[IbG/HSW?9l:BMS(bW_:]s"J'!'lAP4Lpk7LD6nlnGYb)6qN**]uM[(<2gT`?sm.RRYpU$%q?i
%":D4q,_U.A2i)WO<+h<r,jY"fgn$pM7P,0ZbAsO@kWecgM(>V->VccIZ"\!qC/q*rj;gZ/;2.`gb-N4F"gV]jH'%<rBoOhtAo\:N
%R!M8RC"fN(pi&XBJ?_&r_n)L\XBVqGk*iU1W=k%!`T.C/<fgN&72#D&A(nKuZO#MW#Or'gMKB$<$5<5q&0%?DOGT!ZIZSh/*hA?<
%f_febo1XaoCj*+!nmG-0i`5hO6e>O`i&K!pl%&^+fGm!f"r8rta.W:IodWgIZ>\_fCfh4*eLALYQ>.'m8jjjnjOmRDptc9)-&Ga/
%[!34tB`oGB4,DQGNXDF"o"?Gl+6(BH+0(#cK_RY7B<A+8+K0b%@V*PN&_Mh#+PoX3%3oPR,"cn]ASf=Gbr/&43>Y;a3>/bEJ;CMQ
%j2Xb'FlJ3YTVH87A;/r4S?Y_Z+s9:@Nck+'lO1hCog!,UGjc&?[[@ClVGdO0nj:ekVQ#74;g4\82[NTRV1qTP9tUHRhu\J+U16bk
%dO[5V&D]ns!^1$?V88UF[n>"$d,@5n3b/T<?4`MRQl-q-(mlJ*JAn_DPfQ+$/.062!aW,a$!*":&(3eY7]\=WaVH9mln[Pr0]S7+
%J-\pTU;VBL+I.+=XGIS&b05O<o2-[I1*c1*(mFI@*__?n)'9o%$)_[+_&QZk_Bt<rM)]B@Z\qrt3B<s&4Ja/YTh5b'U&X\Jj,L]=
%JCr=.6mVCB+=&OI?V<:n>$0j)76">&BEjrZ"Y;ht%q5R<O#%?2-q&MRR@I^t$l#kO<)Z@"Q=)Ng&t'C&nA,ZdZ%P5%0PQXt`i^"8
%W9#fjBVR,6Z?Q/`J9Xg<O]K]<k#t)!8l-DAIKb<Qi&HK3bti#F@uV"n,3ER,'%8g,`^L[,fQBe;#ZXDd8iXa._aqngAM<7#E]OK1
%&6-Kd&UaFi%u^i^6^2/.jcN/p*[[bNF&/61&Aht3D@RmTYoq_d_,U!U\:KJg7=Ro-L,d!ZjlD,P*o-/!Mugb,K`q^oflFql"-32e
%QsiZ\J<BAmBc%ciLf7oJ4qiH(/pe-PIKaKiep*SQ@4QrZH,c^R9M"5#=Us1)6]!?[<]@s3"V,c2:_%gQ`"#nh4m!kN5.%.-A!Ile
%/(I2QW%a9r_`s%mR81c:oSbU/j0-jWQBn"P3*=NMZH!<&?p,hl7Zp6p4sY0.flBO:45tuS;9`pa>1V\@-/6q#".WSJE&!BCU`dek
%"DfFjEg-^/XDjmc6kIJf"R5$$:[eat,RVHmYt%B=\Gj-%qk6(BV[W\D3.,1I6<"6/bYAUe.+uqWK8'ZV&Oh7B@*GQ[#+!-ecmG[n
%-i+NtCBg;#%Z!%T,[2[gP+@biM'*.b'R!1oZLTCsFm6a7k[K`[YaOh.%+m2UNo[<k(/7#+:pGO%J@L9VM:4kEMFF\#n.+gLP^pK)
%@06<[=Cn1G.HZoGN)i8M+blKM7M7Ec_/JLI5t92+($rCTQU\dmoR$4<^8A8F44UGgfWE;VjKF"J:I!ri7Yp)\io25S-r.1<*L`cD
%"83-MaC=.kU^U2=BX9%P[_ucO/gM[X3qPm.7RN9B[pg^r@E+0u`,BcmM3Usa8,-A90]*AI?ouuB)6dD4*Q_Ob4JmSM/S,["@k&(N
%E1'(eYdI+J5VLW<,S[AI/LZslnP]"SCo+X4$0fB[[A+\9^^4a^n`QW4@V!9s<Malik&K5%Rn#88PF:Nke`>:ka"_A$7EnUIq^8\n
%`@]>sE0oWX"Dtr:Zbf#Qg/D+"(<S-:3BIL,B3FXg&th`f3<t6%-17f9Ou4nLKPgd"]Qc7&lks`m-2/B^J".*_TH(L=0G*Uo*lq$0
%HZW(In#[5PXNqj(+CP9\ruH(dMhk9\Q@7ILSdEd/,pP@!]sM1`P's95Z4EcQ3Ous8!eV\TrE[g4ntp*YQ?MKFr\m(^CX]^:PKsZq
%K,i;6:e*Aae1Aob_[@KQ\TjgC"ZZFPH3b'3fUac"o)PaR9#rFj1S)KtTN_h!7-7W#JMchMO`p157$.S7aVfU4dWR$6&kcZ(,.A>j
%OJEmCAA`B?0"Z8:Na*r70#9cj*!>oU&qqRg/E/KCal#mTe<]7<=UjKB(AjVt3X6=L";/RDU,/Y)AZ6A`OX(75BoEI#AGIS+d8)`d
%`i!AkcLmkhOsmad%2n0J,a]5@/SARGe.;c@O(kbem2$u%7ibtSUni(9#EGV>m'-[_"NQ[Faq1$b"0$_>nG)X^5V<rH?:*M'%RgU.
%/HCr,\tjoHVhn1BE6V:d4p%S,aU-.X1]f1jlW%mN?_VO7*dkc`EqVRi'GIcMEgq\MjpF"soV_nl&GB(D[,sZ:QBHo`BF>'*!mVD^
%fcVW_Ao.YZKF#8e&aalOeR;l[3XJ,[S;cU!6MBso]e1n\NfH\V@$#'%%oZ@@8l>hDWAX-cMNf`(e8]#j:RfeV-Lkg^:C1b.Op,bC
%(,fJ:^]=PF-tHU!@_ieB#)=(qJ:p2-0no`TL8Cj\[fhj^XFEf+;q/;;hAHmE<^[-H;@rem&>2Ufiu=eAcm,ij'o-?U1-N_DPeeLo
%$U/=OE&*%C>iHkMHT#FjS?h-&:D&&?*6B-:O%s5Zh+$#'_"f%L""GMB*$"7[Y^K!i=>80`MaZ';)4G)lUG3%:C4H@\K)pdl"HX;9
%+Z.ZC5RB)tgqrQ26lj3=Qk0Hig)m%?"_ZjEi'kpJE<)rNEWmWlMru?#ncJe+nAFBMe2iB*4ch>Y4K+Bs$FtY#k)7H/M>M4q'%0;m
%jQ4J0L7j-#=0ri*N*Qg&F=!oV9u4?up]A^&U_XnW,h.pR#nTZ2"Gi0@OX0e/KMpms,(,H])i8)pFeB7h"3:\.V$#sfiiTQ&*+qZ3
%Y"Eq8;AgW'XFMQt4[S"[L?&Mjpf^>BHn$#=TfsT1&0J_rs&0n#.)+OM!#1:&0pC!t+GO:5b$`rE0]qV1OVf.0ZH<ZIcRoDK"@35j
%(mUSf7ZN\H6IJ3!R8o:>d\LV1U/6V7..Bf+_Q4gLGoGkR`-a4-+]+.tF`%sF6]A:uAfIU"O_i!\LfeQDbjq:ej2#c0"%J(KS*\b/
%1,oZLe53Zk,N2Y@E;=V.#qlD?3?dEf_RQ`plqE7TO@CiXAhRDXiYs1kJr7GjQFhht5lq9:.H&mWLc)MG8<g(*<CdL]Ul/hQTo&b0
%d/![.]'NHiJls]T6([TMYS&LN&3VNV#DS<l,,&'K>f7VO:Ec?lRa2SU%-]4T*\f@?'#MFT%eH/6Tj.ZOd/>L*;qe@,%iCE,`lDil
%3Gg>)jcQeUF@8g+o:Q-Eo7[l-Kq*f%,9tEk9pVUOBH3SKL1"RCJT..@nI_Z(_i:lG(&IEm^9[LKI%1_Q9Q<WKM4h[n!qC9$VsFjd
%lpR@(K2fO]6"\OZ0[C`mc%D:G]`eWp@#[kM_26IN-PiKaE#==_2('[^9V72_<]m9+YuLq4isQ$$I?75-$R)4CE#KRC*eeE6+t[+l
%!R!/W/-ur0_jEkcUea>jV)7K_)kLRc$p<P+9[_c0LlA]?99MX!X5N$+(bD:)mP#s=(JUGXBOPAi`\rcdRmoqqO8rae`Hsoj,/NUg
%:ZOoq57]Q6D3*F&I'1IYX%4q0CA/^61#F,4.sL^<9*0)F#&G\7P%DOPk>SpA08X*FOqa>1[+RFUjNJ,5(frqp4'B_h3#X&p7;`^!
%?R&I;5ig+Fj\O@B"],+uAQhHs-GtX*EltOAB`l:$J,jSd]^[t+&kLOfK.u9]ImM"3ei6S47$/s(r$`g]+r'mMq8'\Y>r9*ZPS.U'
%coY#TmEI*Cru#H*OA1Dq:jf)FqLP23BKr:P33Y&lT]eB$b(gRY&S'$WU&Y=]k-L4!7+qb2::QF*1nR3>=Rd_L@3Sou"JXDqq%C,/
%#;`-Ah$uNuXVn?KQ6"(Or]I',cJWUZ"Ho+.!sk%p@V7%/ArG-f6(Jfo+PIX<2sike*3bdC8@&+q[;X;TnIpSB*@6q$*Cs[%*s^i^
%,U7p]Uq#40C'E@g&!Oh&C;iqiWsgj9ZGX1pcQhX$h+1^Q<cGJa0b3`0%KmO?5*H#2JOB!*bRWF)k$r3L<_/OP(ekbS4"8bTD`ht>
%V3eImm;>\8`^-M?:)YC$>V6gt>XNbiW<?XGIicfB/`*r?Ru)%-JF/f\5]5u\B_ja`;^&*)lb!=g[>8!G"kj/=@"QA[%R&^H/]'9%
%F+pts@%dpa9?)I*?mP<@3I;Zf+Cm:t$*'JX!?!PGj63>*R8-0?H?:hs37#]toh;i,TQX%I+Lh&)/H)q'1`X*cQsI_pL/G#s[>5'M
%j'\Q)RmMrd=f@OW=TSOJ85#UB/uk3?E)%`8T6ce+E/l&[PZHQVGnc-Uj<eA&%=d@Qb$0PrYi%M8\\d`<6tu$*%V"S;*?(lIpJr/H
%(21a-BUHj"^E`SanIT5?'C]%bm?kjiih0&%j8iVt-pbK\>A.`i*Y\k8m!P6V1>I],i)_lF0qcsl==E2@k90kmPqemUJu+=B%,uh#
%]!9Tph0;c069BohK;/t[C+R<_s3su9"?CW4="*!=.E0.d/td_7Ll`;1J1Pl:#djjDY4hoH15IFmP1ae)L+cXDEZL[O:NC&IbS>#9
%`3'+I!\Q,k>p5Wh!E*nC)tG!O-+PVTBbqgi8XaP:!=19P<JUZr`&jbkM?Zq50i8GVhm!F*W_s+kdcWRu+ZGWA=:p936;:F2H4uf"
%8q(e(%W%;j>gGE'<l#9D^>[qJQkOVJ:os14O)tO@e>aZbKY=o!T`r0<TW1RQ2FTshZ5<^L6Qd_lP2OVV,[[DS=E'KG7UO#`rD;bL
%$#-'n:)I=MkL("$eYjngjj6snlo6HSU``DCMNPK?^^f>W24Vob^Iuphb,LaVAe[h&0`5MQIlV$UiQQse9\cP1\HbW23^AM@,\#u1
%nq[3B7lV(Y`):U"/`[L_?5o^tN=9elhH'fR/X(5[Q$H3[186JVa=R(YMNF1#&SFV0P$I:'JkT&mBJL?\Ri`!&4;8GPNEh"pYlP2G
%RU#(WKjdg6"]Hj,lB&AHHPKU;*#\$V%HPNu^V^"P1"1mY+e^!/*JG>';+P^R?QW2Rq/L(X+>d&dJ?ap;/T;(_Gau:\'VakY6p$@V
%0uRse:`nm]8>%V1@*]:D@gTNN8d`k#EGUVF=WD<(N5/XMjf9)"A18.]Ek[;/I\9903$.'k.[Dk6#Ji-MP3OP-8DB?G\P5r>L+bMU
%3r9[,)rlr+[O[Su2POdh[\4%'(4_&_I?n;0cFg+PnbO!^O&EO1MpmHKF&c\:,7'8RXdA'b1#hL&cl/Yd'QJ[9RHErI?aLa0QKI'I
%c5dJ9:6BS)RS6'E%,hSV%+0GEM%%O:U^Agh+^&47!.r[85kpELOAP-46IkT@.@`G=BJ.9K\/9f9#J0Cb*Q6i+$UcC',sHq];,J\%
%OKshhTJVHb2]DGBOt\`p.SE$6/@E?JKhRLoJt/lNjk*/1VfS-.<[^;6ScU%Hc[==l:DC!f1g.s[7+2R?7"c58&9SPG.Lsi>^DZM\
%iNOp.>,Jfs&upb+FE05m$Rp(S"bqk9+CGA5rfQ+d*N4KSEYHktmOok9[J8a;>CjXXN)f-ce-.a.67Rb`EQ'BXVmlR=0kcG[Le.Q&
%$GpME9CNpX[,fN\^1,k#[u(Ut,0:0&",(X3ICLQp^1EGIG99]],tf8o'3,gFE-j:[.]slI`/JBaP>qg=3T-h`:`^0h80dYugpafg
%Q"DFgOX!k++RkF(ISC2!bbgK;JH.)jOVJ2E=Ia#8Uk'i-!Dc@^"<BL?S50`M@Uno<C(@o9mO(YM<(r1Z=q,@(]"aT>JV/R(OkHF!
%>ELY_WHUmV+?&huO9'pAS]3G3/LW^A5(jsg3?_)Sln-(V9iqioU:rr.('O"L_To.2I*b?QRinZ3poFZ'M$Qf?[D81o7m*`R:pP^^
%8ea!e:C/8>;[AsSP<)^".ZsSJ!CFU];[DtLR3KLfHn`MCnd#s6PV^HQApg&#&39]S9bW4bB2X:MB,+oY^&a%5["U2_E2F=iD\4V_
%'GVmAaGb,>KPM=n@T-,UHjM8q8B&RSY_Q*c8BG-[cX8Q%L*rT6FDI#gr_G<4s0h;Yc[NnYJ(\Z0GnLf''WK[sHQV0h%!XPFrH8F^
%AJ?AQ/IY55WR+[rBEgGX%rL*P#%AlGl8<(nJ;_atp)6Io*#JP]f=qQqZZ%TS=4`Y$0lsl".>)7ah"/lK!ft/j\JthN-6F'U_@7e!
%`+`SCU8SkB&oRG)#k!U=EqJYu;8J#-'\AVt$>r7-UU[j[)C7hgX\d!N2SrHee-n/3HOr+F#;ic0?'uGPA)erm1h0o9YmJ\l2@](l
%`)S*?&=\ETWOT3FJI1W;EP32AY2oO%WV;*kAf_Kb1WV&KUKk(^G/J#Zg$fU+Q<5;8e^_HCX5j;]7[h%SLmrtuauiroAgR%Nph9i!
%&b9T:p^X*$psq6=K&C#V-G"aoEBndm\'>%P4dc[+_!3LjJ_*3/a:2SbjB<\(CBh.Fl-;U-l:66=%)AhtCbqN*3(UrVZ%K>g6Y]D_
%q-Q2eBSLI;1DO7og0'd7Ug9K._'*1rGQ.k#bG#!'XC6_NrhS]Ch`rE?ZV[X7P)JYbK=o_QBPFjaLc`3/f@hCXSh!Dt=J@JLIkN@7
%6Vlp)$Zqh5D;<9WmiW[JGVL_0;EUm\R2NhF^S;,<C+R6YJ!.2q+2%N`>RiuV"(ZDS$`Tj1D2Oif1-&i"Rfgt5LrDQ<aeDgmA6nLV
%Zke=^Y`th-Ej<tC%4-MKK5t4Y1Pls5b5M'r$XPVWLVYuuR$/TpT_T)s,lXrfI%s5QA,n)QSg]KMVE!.f'3(oqo!O@GL6t)H;[c&]
%+EFd'Hte,)f[Wm\()^U:nmLNGe9m/c_al&fOseFQbu+e2>&(QWP^,t`Iu$n3a:1UePL'OX^hL)b*0bA`1W.r7E7QW6^%J<B^b^hl
%k%LF;;Ca"ShL1jV,2k8HSWIpP$n)DnK$k>&TV5UQ+Aa1plc>QVF_N`h.!),Z,g^[)GV37$%fo9)jiIWdEQLO-rLMIr;YJR)jZ\J&
%=up<=6/_qM@8cX,6_+b5S9O!3&C1P%=m.g*fq?IsMUm'F@rH<QMMuu*.Wur1IjCn/X9D'k?%qUaEcMgu=Y@P0?=+>!!$tO.>IGuF
%>XAfUgqn_WTj7S],ETDPT]Ehf"_G7L'@4Zb;&:A8Zl.U=1B'8Hc&HL(R#NOACOqjHKY0t==LkVTC;C_F&X/*'2$-4PoBaL?-]C.J
%3q(#@LiB1qGnKV8.llO(9Th0TYSP[^eWmAH5\;=,S'<spBg1Z`?3iA45+631cXf&`.$n0_VAN5&S?9l+>\-S34s!Fl#u\L7Qpk7@
%4[gq[CfXX/0AfT(n?W4<kl]/&@$E$:=f%3B3[FU&1biQSoeea`i1_\pr?,'5`rS<o0kX(VQqVkfmUgFqGZ\3K7X=D976sdR[buIe
%Tu?Cr4[dnlN@^a]M/rdR=sW,-_c5HQ4/99l(+4-:l.Dmk"(YTqN'cVlh89>oQXm4j-qLW3?k_BYI`ro7[3]j7_**(*MMnSdqJ?AB
%67K6C?`2mb'Td3l`+cag@bt;H4RO?CHA`(@0gT)Ea$&:pSph6=44'pnL7ELfQ=4-Q5]i1/d,gP;]+MP<,3>]ho+D&FXV(FAKuu5&
%#_U'S5"#JFh%P7gK%O"^RDOi.s+9:"RD+h;%qQ<!+Bu&-P#qK;N>)QY6Q?hD)E3b40(t[OT`]0=0Li"#"LHU]`XU#i!VI.?_Smq&
%3LCQldP)sPIGgEjTF!Vi^Qg"1gc_.0(4`]r@R1r0bf;lG=$)UFI40Y`gN1Tt_DnRJ$!9a9'Pd8k=<h;NM$GP_!mW0uG$9\f;Xd6]
%!DkWa.I"Vaasc3s"EofS<WJs18A`=o6c*TTflI?s[c\&u1mEGD_0sVt.R4*S#Y2tb!/94c!JE7d\O1hEJ])FG+Ve)$i9TPG@T)B:
%dE_o[/2IN"qN+\I%7HE!6u#WIcb;=Mj2QYqk]?2j^q^:rPeffR\Y;rkRn>s^<475q'Zl3o]bZ<2Gd(17efOb!L4F<$*:p]&'oiDT
%0W-nQ9-$"jN>#7eab"o`_?#qOYh-(2^eV`ADo"=O^EUN"m(&YZQ#sP;Z7aIG+`%P::RC"l)>Ab_$,hTqObENnBS_9X8/HP/KfHo*
%a>s(m6eu&YnET;5Nld<0Qia8GE37Inr%ZXGq.csA-j0!bhZC8\[FRJ7^,>"Q?2k\7B@64+Z5SS(<IuM`m^DkS,PY-qptnDcrjTZp
%>GsFO^,7EbrB#h!9,:!SK8;DVb-V54i0,^[!Ep*/"61/_/GTL;*"6oeEu+ck.OM]hHPL+j[9Q@$e5HHT)k\ec+"GAZ$/(&V+Q$RM
%:aBF>d5BaLjUsMPcXV2EM=:;*Qjbi/\]QmL5t<gN"m)qO1tQq=4cm_Q(755&X&-R+60"\+,c>*3s2BLVWp1M`(:mN:]ZST#.V!ap
%Em8al'1FaS:n!)_I[:-@6Gd&9\Bi(%U>2CG,SQ+^jha?0.U673+QjruAVoOA'::=BT\o/-6,$/R:ft.%&M<V<8rVuI]`2F]@07.E
%<X=:/FN\mcIA#(B&!Y\D<&c700#gJa]ThA?^AI>k,Y8ALbXm,ubncQoc[@_`R38TH1j;b>IXS(4F4oAK]A-Q*-3<'_<FH3plV7hA
%.kfRJ>S`AKT(Z./4S<bZ#SD%Sas+8V&qN=L("mNYL-bb,"[=47iW2S=?6"^Cq$E:D'&lV0BnflfMJ$H:&:74(+>H\p5iD-r<1sK\
%2j;=m_<#oC2B5)Yef=66NQmjV:js_rHHs%m@-2;:"4PSG5j7@=4K!HQ";c5uh)@7U1SbDSOhM)O&!)AIT=#u8S1.6u^og.8Kdb@H
%_/Ga;glB^Bont1`b/a0pO_L]R9@B=o*U+2bnqme-J;R"X8d.rffS\Z-F.&%KEEZ8/j\Dl"""m,W;6D$nIclDjA\%SM?A*lmi>43/
%>Q&^R4Dh7.jIV`i2m25=SoLnA`4&Jm:ok<MN$GmUIVbXmiD`aYOQJgBF^h%(HB4.7U>Oj";GSacBqHJ^Sc%@Pq1aC*&78CU=qlW,
%kHo3!0B<3XZt#e6]&7=VG[$+VB!=>,q@u>WL"q3E6Eae)"FR)=ZJpHh&E0^)E#1N$#m)`!J_1a-i>r8JJA0LmTLadsqheUa:rNYF
%$pnOQ1tM?<"U&a"2&`W5^4f8gBEg8[6!V#Gj^]Pk)npNR'IHR=27!m.!>e0HNHe:L#7E;d3[ADu#__;%#[]811I6#3'V0haTd`2U
%,SaQH.(kd2MAE$4<cK"F\_iYnZ_4HRV2`Q[f8`L:UoE7@"dreE1'XcJ#%28i1c]4ralX2m`J'[G_)5%b'Ej,_&>1FGFGC'h(A_%W
%XV*H@,jnAL`'ob0L'$oc*B0hc/-HBAVn+j"n$U'nK1Lm-]m1_V/>S8Z+q,:QMt.@6$mLuq"^@K&`'LDEfc!fIej=U6[-_,\aD6Q1
%7ZNFpqu=1nb(4TP<GZgMfg16mL>VQq.Ip-B*Wc*/@cfu@8C5DCKX;kn9VeJ!NRojP0HX3FF_<s_>b6q/68o-11=)e6U$XF25`hKl
%+P_^[+J);pLbn<TeG4Q(rTX0c*_=E7I$osc$oCW2.R?qSKp?BbkjUWBSDs.p6>dQlftc.tnuQ.bP`8B^M*HnMc7-E)`0(=Y493b'
%<U/6lIisAKZHA:-><qL!Y<YG5>el$;>)4t&6jsj@3X=*kV8+6`Ye7p]6IuBMLN<Ol5>3$p^tNt/`],LdUb<g*h2t<o?%B*15KG0a
%fl(1#:jgtuBOPc7%j2$AE\`:n1sZT7jb,_lY)p*rYn/cg(KdVahuGcrLo@q@&9)-=Mp4!Pl5(+A_20j$cRPkeS$u._(^O&uH)SPp
%BAR\p<b@pX#Fh&%E++MX#od')o*lq/[ZQLGp*C"KRDcP+j&H1jma."n\9=a(,M!SP=4ole7Q!Hp68%rD`BaBJ#&?a^F_W#O!/MAm
%X7U3o4;7=*LY'm8mt"pkEfO_f!Q!mI6t\fs#=DClA.;SGmu!cE'\A`A5]J1jLqbfD>Z?_n;^.[<2I(Pgm'.(n,[?!b1<@pW!F0FA
%FTtq`^sYXa]@8Ur!&VpYR.%c-VT_!A)^$&W3.8W!f+f(C\Wu4[#=3d1>aNcU5_Mn]EcoA]7ee!J?u:&+(an!7C>BTRZ_3%[#gboI
%r9B4VlH1X25s16s9Z+'OB]m'/JoW.fIRO=!)(-D6MkrH^JHA+BYa'm1Qd\JL&oapTkjt^'q!!YLY2-E#YX`bGSgZ;]A"[!E6<W^g
%%34UJW8-B`9#dc[&fSl%8.5.r#MpJ/PE`0co@+!f=m>Sj9517fJX4MM"''a**V0pSqEY`AoO_ZEpP27<?)^<*QcEZN-ok26IU`eU
%-Kca,/.!1*M^;#6#0Nt$Pc(lb=2`OGiBnSjq+sR_51I4NiPsfRqcF?_aV^,E2XlZg"`F,h0$QZ+)Tts0$j6/WVWZul*$[+%p^[h?
%]#Qs!L&?JqZ%7dJ6aWiM+;(@eG"TRCPKaad!:d$qf03T*$(\Cijk_iQX%GrG$Y#I)iBMd#3Gb`!"nj-`+jInT8VH+6Ia?$Hd#t&$
%=dj%pa#rGr_oc&[0$qfg@q&ER$/&<50>g&FW$"j;aie8i/Q@[&?(X>N*.]a]RNh_B*h4`jC],VcY"9_agID8U<0jH1mFqYHJqf1R
%>#8B%=K'Za2YUqe4>o2?1X@#5C_bEg$nH>VPforogK46RKG7$[oUsaB"sc*H,STkj``fX%,4(hS8'Fn#jgrbao@s@4aO6P1j+@?#
%S1$D`gjheH8i:4qSZ^Z4p#\Mc<)J;QR\r'qgHhsL;MO2V*nRRCYB6G?*kqj=)+XrWY*F1&]S991A[)qNQXFUU]J@9FhK3aW%pF#G
%$l"uT\58K>Nr[6!;QAFGGm;3N0lI2>%F%fQXu?G3]6P0\+Mgehh85($3C?_!0R%2NB5iJnlASo)eNh%jf2'5-m7_AG\UYAC+/I_1
%Sr3]^HB8p+7ghF-l$8EPVV"+'@ei#M)_<\)m]TrrJ$5EBe*f?(OA`0q5bW'iC&tpH>QGLU/O(r70E-Kh\@>"iq(DhQ&.:#[KTOg4
%PeC.gh-]pg'7X`kjma(5i5h9u#$MKV3G9fOjL@hYM"pP7YnoATTWVWlheQn_i-X9?O<6J<:k_Sr:he)W&t6K^eCu_hNb&Ko@tb6r
%:nD6.5SBpBDbt]gNAa.8<fW2c$I0JfNJ2-95:k4HLB`!C8"&0TUfHnG92]1&V^1U^BIHr55W5&<,[4;<8d\]N:2hMLLRBdko)G'N
%2*KROaE;h3o,li6!&fq)`@m?G<oYP;&3rL4,d[!_BQQ;!!HMh3p;DO^I<^XN@e$Jj!]I2$"l;*44jR^0'IE:UG\X(%]3EmI_7)nn
%Zo#uN7$[DW+S;p:a92,sb+:FXdWReOEM/P#BFCOJ,%tk?U4BI8N6"@+?T3WbpN-G*`D1c'-\+o`O!"d:/3Vk"5rlE,APs:U/qbQ2
%?@)+D6Mnl[ULP6j,S2Kl6GeO"V)*t\k7Pr_UHtI0%2;>&PZ\=X)DkZOWcqE/4T40uRdZSkjYth0V#c(u&LaTQ`.;gn/f:j4H[?,5
%>skLpN\QX@IH[O`4`Q7:NmtM/8ar2X$As,6lZm=O8cec6%YM;O%&.Z\,[\[Y9EN$ho[<B.Wup=NoM0rICi)FB/]\@-:.-k3N=J:#
%^04Eqm7b#sO:X3;$3F&;`E"`7*!8g0/%GpVQUOeRW"_(3;-HkrcHnsIS-?8GPq&:hj;oTs_\b7[L^A+c_.;Al5[5tI@<BEWSS.Vg
%JSo>"dGYMZ5u(fT)B)4.,8-RL&K?f,h`h(E?Z+b_RjQHPYEm6`$EYITZQBj<R3fsjiefg3>=75AAI9*=21\#IA/d=1ki*]4pIp_%
%@W"G9mh_8V-s`e/]BEIpHbS.i`PFbk$92kHdM)_G(##.<&HS&>1SFl\Z]&SrlM>cmk\$SDF9Ob=Ara/S,%dmh>1pCS2CaX&U3=,Z
%[P*=WMI/YsEUFC`Q4^lj*KIe<,5an8c&!3qoXfbZ@i=/^A@@,+P59:QMQ<MX_2Ts`j9R@cG/a<J>21gk=Yd.s47o:0&ktfPEp'`M
%D[jhj>@6$i-DaYjZo>5jJk1(p&?-LF=fd<bLc2d5<KYuL8[OH7I6<lXrP:5I:f<r&O>7RUP-A:bJ@9B!@RmMri&qTWs&sWeLNYQ3
%98nJ+54%uE\>N`Q-pkb6Gc=9_VN'4677sYp9`6p0,6K2a&E;6:kim[$8ii-2#1Ni;(rN=N/*ZnDLeNDSPb<I)JftXq?[t[?$UWki
%$g=YKZ-GN[i*HAO(&8Lhe*:4$9D9ZuU$3&m^-;c2;p%cGE#+8d29m&3I`R?L0K!\SGU!!@GrC*!<3;flf?5RqBj1.d,XBH$EOt0b
%\mBrD%4>-m59(#K@SWSqmhI[!>"\)I3;3Nfg.?.J1IS%_G:"W&"Ji7N/sSV/c8pOLA@ip0W@;e0h)6?CZrj!PgNA?pog@#\Oc]8n
%ldQe3L!7(885#*T/1c+U&C/7WC.HbdE,a)4d=\9iSD44_O%mf"Ee'g`Bupu5=U5]XkU&pf@se,6]#U[W.ChqmG$j64<0@mlN<3Fb
%krG5)6t@5?WCbAKCcM0<Z?L;^KJB9!N!_K&+g)DJ4kro;0\R$'',1#$LrTja>NXs9d8gpFhEI7t'6Ll(Tt\iIr+\KmdG7$65s7Os
%94-?^'FX00Au-I1C$g\,6.cH2h#XRn$-Eodg7BD*7JUk$1*C2HPAijBq(\S95n>%"@MJGH*'+\[&qi^i:@Ad4SjtsRF<h"p+/Ob:
%D/rg14m08\iD^JA1n`IoM+CC!OLM)B1br,T'X7e3p0q@]#[.JDPnb#oBa-/5,)Q2<C(3F^,d[f0d5^s2bT-6F6r8]f@qm4p5fU>'
%5(%bW!+CZhb0ta_kgjYXMRK0JGV`nL(iL!Re,(e3HiL^(i[?DtMk^mgWHV"^l.o6NlIQ*5OoU%b1+45S8#Ebf6$a[?T9PU1(_nGi
%I@o[\r+tT)UrpK"[;C=NJFd]dfecH#,YLX3Ci;A*#Hc)EJDQK=!,=;caUAeRi+l,,&2!CdUaT(=A<$t%3T62J01"qV6J4klPCTWK
%l@SMg%4*+sQo<nLB*qBb.2ZG<<scSKDm`#.5?AZ./S_jF4Pfe/*j?$m,F"O<s+eHRNZea*F@:tWmY\*1To&I-U#FnSeOA,^(+5eK
%m>:s/#,3aIcT:lPI.g`?5>p'heE^]-I7del`amZ`VoR@h4tPb:8JOJ\kh%3]'AZnbhaUoP/5U&uF(>it%5tf$84>Pj!,Wu<b++V;
%jj^]P-$]M$*U$%i%Hot"!TnH[;IN*S"C/cZf4nh',*5X@Bo)U/-XraN!(s45.2s\u8*K32cpI+Z!bXb[NM7,6MTnk3ZQl6XRW0Ju
%7I9TpJkg+>J`8.LeCs)qLJ)h^e.S.B2FZhmjSFYF:D.FFd48Tj+Yt<FNsCPAk./.$fU-<XK'n')A7YJV1bHTN11mj$[;Cnp2+7D)
%-2h7)dE"AABdZ3n'ee?HC(`p5%Ma1RVu7GuZ"U$$*\pg8s(jbSS*\0L7)W6S?iR@VlBOA\VYq>t&_`k'`#L,,)-8+UOdu+mZ1<]-
%Mar:B7G!JE$:D`Y(HQqB^VeZRmi-DN0sIB6?*D90+\]5!9^2K_:tf.r_X2kEG@ZGAefeT2eXLdjNNIOEZL@QD,&&7E-=03`%G#!T
%T8@%SYb`JMKf;h#qpWmbZ$GP;^h7EV<+ufpG'n>u;,OXMA>JUXp;rZt*M%H8S20tb`&1NAnYg,5q"6/6Ps0-?%Q&4;1DWfbY[bfl
%/DIUl&/eM+f>$Y2kK;M/o[^.;kdL64pMP995oWua,[`Q]]Rupp:2A@\O!,^bWNjq`H!6;Cs+#dT"ld'>O4r(\iEu-.8m$L?FG#_\
%[W\?_g1&<HfuLSc(/,Hd6mEipUeXX)dl.`GEQZ?=/"F15^nZHB7!8`efE.m8+p8jo5Y)6@OKF?J!K;AA"X>cF78h;W%;AIFge'ld
%/KfF>#Ko;/@Lfd?`Ql7;.*O-%(+!:0!@"Z9W>%^(bF]!Ld5(.RQ7gFnGJ.(<W:*>`EI`#>%a4r_[fV_'ZHMVV'_S@+_8X-rh6\(C
%mXelZC7*^Jdt8Yu1@itc`dCXfUPZqOLfl),5B2</;9Hu.O;,@r&uoVD7_ZHs(d2./O!Z/R]C)W?3fM7$%W;r9cjjUIV,H7&cDM=M
%XDkumHL%0j11BJcpZHMhgi#52=ZXuGkocE1G7/D1<C!")_S!eR*C'O_b9!qE.1co.b*X"U1Sd,E=Tf8C1%N:-Gi6R!dDXF5:XOA,
%"B&<t\KSJmLVj8+8I:'qUgX`,JKV7uIcgK!>"l34X/81'Wt<2!1pGPLB+>?5KIJga,HW1E/K%*BHrgYC49M=&g!\Gm\r@%7q%>8N
%2aBKdJn5Su58g8fFs!/tGSC&j":5p9lb\;`m_3$eB2c0WK<IOT']c;Db-m+0#*5W8REO/\Jk;-;D4"_2NgCf2m'5]qSg;`_RkKm]
%\e1#q,b:Z4&Oo+01pg4+*=<R1($&"E?ek_0)LQs55e7k@BB=6Jfkq$<FscSCVDDL@6u2SE"QqMiCSMOlcdNnuSu`XPR?A:o,EdC8
%Cl7YBJg49^G#FSJ,t9gt4=tAj'6V2.2dIj7q[e'-<c"ZScs<;+!Mg9dBk!92`D^1*9+;^>*l]W!s4N5)Yp5:3(@PrH7#+u"a=3=O
%HrJLr1RZ%!oSuBtg+jBGY9n*,s!7I59p-OgYqC4W6sA<X'6uAORGLUABh0G=rA;<e`K-,kZ_K+V@R&^sKY=nN-2U&fC*N`kX9h;o
%+3Oi!/C`,O6onZHYsha%C]Y/D_$l^N@7iP1NXAY'FQ?,`$#h/AG<<3RoTm;n8&03uXm%d+MVH_#O7UGI5^h>>!i9,P"FTDm3c$m=
%omKM1CS@6g@+l5I6n69!gQndhA7!Vmq0'8@EsV-Y7bV':i&fbEND7S6jZ#7'U(D!jU1]S''1-L]DK*d#`5l"Y?>QYq"qbZNEnaPZ
%ldO?)Z;Vh8bF$`+-:*gqK\/I5?`X5E#'PfeV#j)FP*Rg^OW4YTnb*-OJ=-;_gNmNE)I_9E')O9/Iu@So0r0AJZ$>9>%?MRKq)%MO
%8m*_9ORncU&n"oI/JO>V)0=-Pp?Aht:14ANohAA,>*M/`)Cuq"1Ljn:a>>V_Yg8?"?e$f6c2m9Wf'fa?an<j\NW@5UfEZCg_cUP_
%ojanr:=!nkin?;e#,3H3Jg!uQZFmZB$@Zo&*4Q/(\JK3V+KVEa)CS#Vk'"9(9]7i\NIu-gFuf!nR3l5A6;\$9CMgPS1mJ/(DJJD^
%g<B[eh+a(B"u3hiYY!LQfFqFV`3nMm-N@:E1`4(E(rS_J]G[ur>85iq5BiJ:4WSIM!h-X]GbJI_l`#2!DDUd1Saku#1-W*&^dFni
%UFP$*7^`2GF;A4-8a=;#GYB7**H?,8p<d*k?nG_J"8Yq0n7XkZFV^-?dI-h7/qE3i"EWu*n5)i6)+2_^GA>im%fG?UD#,VkC>>*V
%ppVb!5I@i1p/jtNP%&-,o':tO'1/0\?Z#('=a0(BZnIB[4FI8fj5]D'q[0,P5"I`HZl_5<D3"uD@Xb%@o[76"WC<0a/,UuYHIR-u
%aJeP=+C,?eOKq[Ocfj(>N`=KYJ.;J==%hI<\JB/X98iY4f`L^sL`aE1F!/%-@5*fB!<sdkV3*\DPh\"D*pZ6a^=k!l<gF.8/Zm3R
%3Pd,U@ZQH(X4/eF?mUi44HRprFcJmDK*U^X(H9,^SaB!'K4<@8U6jO8N9r0(QpR<6Ub"o=,9u$D-9&pe4d4UF%]a>L`SS%p5UEhs
%XR5'VU':b:E$#`RZ[-X-`!Z1$]:Qp:rW\"*%m;i]V0X9n'O!7/f7)4Y&h%<"l'uSW^oqYg[%/$88Z7fXcSW<jP5?:F,pQb[rtdh)
%"u5:Z3H+fqHX<4-='%ptX9hQfWeJIeQLMS=Gg8:QC<HjR+pgRB+L%P)LnojZW;.%A5cH"q]B9`,f:V?bK$gg-L`9qX.g:Zqe.l(2
%HNhNYE+0m?DOfWdFA5Re@?APPSS@_L)&k$m[MpVHY6Ll'Ld]NCIV[%aYQsT@Riuo3#m;0of$dE3O[q2J'Mq;WB.`(4BWF@d\[M-4
%D7[H`m9ArA6^f27"cIDY&M,P_bH\m)In%.Ol7;ss[d\,gjpXid'Y9uu[pU>)=i):um5^W$a7`M@>#$5^D3hiCi0>nkIGR1rnDIOc
%\9Gl!b;,2a5M6Nc#GUo&"N:-P\d-+eJfNMd*nSKSQV'^ji1\10%<C;E!F'</]TFNV>n.p3hI.!-2ndTF%T@Udot^:K$.$B]m^)fa
%S%nj`gm"^(<k8Fg_RElhOb*M"Tjp>I9^O4];UWE]dJraIKF_N5kL%$*6tBm<*B&D"fZDiAA:J:Wk_!ItfO9,7:cmFDM_EX]k\E%_
%`f:EK/95B]G;4j===lEcB'd%s_BO34GSajf!)IKAbh-poKgkEGn[>nDd?X;b9ZV54JOSq]g0Is'F10:GE/+pes-_H[em25ejbY!g
%c'>QOk&4'XgUiBIX-6263RNK`4>+:NkSZ9s,E6s_%O`[P$m&KAQiml!\']r!+QgKRD$H%O?VH'+eIU-SCQm3H!Qpq>3D?f,[`X.B
%'<8_`(2QrQp`si)@.GbZ&N?c(TK"LTkY9!`%*u_2Hg=fP@gN(t(QbJpKrM@"V7T$/F]:rSL&=ggSW+'sN);iPl-t#^$WCX*T_eh5
%@4;Y^-9TXb6Dp/=/D-o,E6%jW?OPoAR]c^X[BQ-,Mn2mDTJ&NRGB?k(hERujlE4u+YgIeY]Wffr>HS^&b'[mocVZ9hDe*+r\9Ua`
%CfFR4,]T1*[D8cZ;q7nW<Dsm>W%?Tb4WPRFU-be#bR[728tk^W\_<(hA5k'/$T>"9I$-He94dBF8e^979slbQ`[/#L5_h7*Ju\_r
%=XO?8mMMd?lO?^?03p)\1DSeBm#J'XN@G%&Un+dR)UQ<@#.W8a/Yd4ueMA$XCfFR4,]SM%Y1-$.+g,s@]%.)2<"O#_25,7phF<9O
%:U7uOb#JBtZ*l-qi&Ag5kUilUej;+,'5OXHS"D0KU\D!icm@j%en1`pr'krN]n\Igc65b;Z*l-qi&Ag5kWQ$3@a!!KWq(`^QaX,F
%pu2],l]0t9<bX<.ASq&\`jd1H5k^&><Ts\%;;Oe2@D2D^65+.8dL1N!]T(dbRdT:eRE`t0Wmp1/b1l,CXJ#c[B_JE[Ea@uJL_Zoo
%D.UOQmhs8f=RWLR2pM+Gd?/dJ="%$BmZ[ko]k>W'<;X8&3)GEuiMP*ud70CTH\ac)l^%*2SC*aL?/BQ"6=mu&Q%`!H8!)\%o*[rR
%6b_V=PNh:!B(p>$Go/5$?2gVd]sjJ#;X:A0Q`$&r',:Nk#1o)D7qi?0Kg4:2(M#\&.T`."^KMTh?2><*d,<L8!tJ>b_GoJi2R,W0
%-l6O97\(=(;:l"i@]UY/1H$bkkt,k.]SWtD'nrtoWD-0GS)@#2EUtBpq->m/[HU8&'>0/XEa^(MCZ9/1C=AC+-?p2:8.cseJ)Y9E
%C=AC+-?p3eSMH)#RBonm9i$Y9i'!ShP0`eWAZJRiSWpReRg:7!ADcOPfrEN^-A>1`-H<Q7*8e=fZVm9a'K<jt39(^IUc6S"V)CIc
%DLsfehU[uqFlI4;C=AC+-?p2:87(F<GB7Am2E`L,Ji@\H8F6KUY";^/VFip00hJp4Eu_d$$*)u,j]p'MFsbVRE2fBWo5u,4Tu!")
%)S.:ohF<c]>?Y3FSXOla_Pk@hXgYVjjXk9uI7I4WV7NK\&]TnUTNrS'U'@DcI^IF/&gIYqJ\)V)XWeMa;^\hJf#$h]_]700"&T;)
%J+%d4D8m,D/6YXf.;1uAi("$6R2-6WaKAGgV@4nW#5PT`+.Z6P[(mB]Vj,520P*f&1<?(nr$9`M=u95HdRI5B#8AJ:pt<?Ac@Ro"
%E("F_a<rF&$k6)^i[<>Aamk?'c-qeRe`je<+@XEqIWk1Tl_'X]XkZH97";]J.9ZrOZ\oo2):,ZrC+Dt4AOt3(aIcbNA)C':jm>4M
%PT`K=+FeS)Nic=#P]oq=;hbu<KDaEAO7&C[ZsN-o)_'5aV@4nW#5PT`+$G[QBt`6n-W2siqA<)*%-hI15ItPiOa=DsqC=r7'MjGf
%X#'FTH_7,07Z%Zgj-%89N>"jf18pfcr9,kPk7F'^,otFbTC&#_2<[k5N0H,.,(G>:_2fXf-d"s.lN>O*l&.GoJKZGooE].`BL&?N
%8"4TH79m!VQu8];V^Z]n,51tOLC5#^.ell<HddZ,)IK7R1l2\c/^D?`i4Yq?WM1ItSu2^;&QLmI3dim]-EM\63X2sX-J!7:OqspP
%I^G^kR@d@<X'J(]:p+EX+lp?2^*P"jU*cfGJ$f)s9dNBrI'lW85!j$c'+rUOp:Tj,h-A_<<Ul,j`q<<0/omdAh0=h!!0O4u26i9@
%g]UXIO)fu&-6rl-;W8*^S`D+E"&,;hYVg`3g]UXI4/N3[WL=f?,(`+/G"qRE^]mg')^YkDm7kW&:D3l\6`WSgl^[S-L4uVDG>&em
%P+q,VRP-@l#?Za<,-K.r*?,upmhe"q[S3+Re]8o$)EJdr3"6NJVTO@L0*Gp8I;j;'Y%J-]?0jVJ%d_PEbbV=_kcts^b2,Hdh92=u
%nI<J=W_8_S\-_#51NOeggbhg8?cQKW@PU2keTDQb_0bUb.ON5tS`]n>Np."s+.Q\aH<dl&D.'.**W*.2/oOj,\q2AGQ4&GJGO3Lf
%]"DgXkmF;d=Y:PohQ])Al13E%VCS%.B";<ZHH-MtVTX=RR]^%URcT.[l5eWdMJh=q<#%0_BNas:2a>&YX,6CbVPYiq+EjW3G4CS%
%>>:Bl1Gr1K'JYN[iT;/m[[Ji;Bkk52.;G.VL9#N7h.jM6`i/*]d)JArEku_fQFKXX=5l"Nh%@ahW*(_iY20d5X6<.qXJ.dc@g=m7
%"iJkPG&fHG?H-ZiJgkH#$\k^+XP":n?Gi]["]E8i#7O+@M:.Uom3t_MMVB2N%\OjYCfFQI,p65%QfqLVlN!imDpoTQnN-f5-e8o@
%4OG4K@V@f4])C%D^Crn:eg&jVEGr2hWYsO9R#^'FTj5cifN6)uW[0i`"WP-Hpu>WHl]S!8>#@]sR,D7*/#QQX=8W2#au*)N_JW8X
%H*?g^_+h/-$RA.MkT6^r[i/U307gLcOq]di>;V^B<PGWW$)lseUpp`fUiCOWoQ<Su5V3m$`D,hK-*^CFY:FqZAPpllj!CqFS+PE0
%Q+jEb0rXd6\?ptGV2=qQkNd^=@p33#b?EOmP(W4'^+Q?=VU](aXG,ID7k!(8RdToR9i7+[(3U?s<YSDQXX[%[>h6c0U<>kI89,+b
%!%jJQfL2jUPYg@&<*9T-AT*Z$nU(4tg\JjfZ"'4k$qmZ88A][M"&^H6&4QssLRF<k7:A`L8?Se^5?(2^;ap/:6UC!nfMnpVNK.]k
%&;i!o""n@tWpC`M.+![.+\iq(N+j3`2]_TZQ*i;Gp($bZ]TNE-eir>[-;btd6m&G%!KD\T.%V-^\D6Ls$kaT0/8uBsXsRUdWpCa(
%-bF0i!OU8]A"!Vi3HI)S.;XU9oGoD/Nm_1?'Rkp1#:F[c^K.dG7`5L2nW+_Aqt`F;<uIE3;a1OXf%Yf3\I9MtN6#nqqXHN]2aLIA
%UL@k"1ensHPZa*)'\R)remf8J'EcONE,cOj`@j4Np*@?M:NiF.Q@p+I9VNYjJ_R)ZO'l_R+D!.kSsb8!a/l\hcj2MKNXHX3C+"?e
%dA99_%hi6gNXHX3C+"@Pd8_^-_,i5-9IC6hB8^sgVR<Pt1LgWM.lT#*B:F*b<r3M^T%[;N*O4h!D;Ot1o?NDC"aKXYG/C!IDXT3d
%Zjl^u[pt3\_O9&ug0J7>T&j@W[N/'Y%!$!=G;7[<_h4N:gpJ0-#T?`^UTHH7'lC@DIc65WdBIs:EKW;(q2IA/a/(jE7DnPKM'Ipo
%TVHI(@HH`BBk^HLH;(8\B3;B8A`89[G6ep,2u$)%XOa8I/D0/L`.a-_>aC]+dko(/\?_@,Y^6M>$dsJc+1)N%WN4CQj[fh`0Vu<3
%AM*6i*H!Srl#7$@8OZjWe&rpND"JbhDL(^CCLK>/lP5Me(3\#>Z.F\O6rpV(_a>@6[H.(r5Z$"=.18%[:PZFV<#9IU.m:YEC6d5R
%-8Q@FPm&,?7u)F%aAV9Ngu55Ie_@)QWig2@YgJqdC*Yln5[2j`/i9'KeTQ$]US#H.@&(l]-]''RB37TQZ/$'keM?tjAgeEE$T>"9
%I$/_WO]m`43?ahcSVaASK5X_DkdDsZUVjkp=mr$hb;Yj6G0NV/b30d3oali])c[Y;8DL<t12DYJ/lbt'C8VD<_Pl2("al59Wa"eX
%\fb@b->ln3a`3]XJ8_/'iY%E$Vf#L]a`3]XJ8_/gLZu*_l&E8Sm3Te]iW?iNqM&k6rLLN"m3Te]iW?iNH<ksf8,thP\#R.&3)!Sm
%2c6L.X8=u$X4g4,_o)_+&,#ed[IfnDFfX4HNlo9DHkZ06/_sZ\UMa+Za`3]XJ8_1MpVe:W`_>3gp6+GiE<4rb]hUoc.U(SD&hm<I
%`c)Bf!FONad@7!6Fle=!i4<7S*nM^HlT?sDJ^rOP)nCLfR58"]^V3'V^a^s<)nCLfdIXLujCLhfoh!NBdYrR77KjNB=G_6;,8]i4
%U>F0]'d7E2jcO8*:VH-cZS=SOk3ct=f3*t?)q?9!bJ!nf5dZdAD%3*\7,ZtT#YHk5R5qPV)c[Y;gI]sR7)G6"mY.C4f"]fOd>HZm
%N#iXi9:9eeW*$9$A`9E&6Wgc[]b@lT]qQnjD"K@>o(XTl<jc!C`Ia*+79n]gM7?RQ'h,B8UN[<RZb[2Rf?TtXli#!$i&^^(Z!,kk
%WtYq"W[rO^Gf_O+fXA1k?Se%nifZXOG(40--E,)E_O<!'?1S^dm'TMcNZ&*q:mM&3CU_fIVQ0;HN>rTJ6-!OmA\\FKq+oEKCEW-n
%/WYgR8rAAPlF$e"lNk!YNJLHe"RcrCXnHt7-AnR!,/%oQpR#?%/qPPjfjVZ!Fnn+f>05esUM;!3OVV,g>1A)jOiJIf7_"]S3A%k$
%;tT\^eIdY&[]k)[VA-Sl7RVLm9A&gbDLr>j\P^qp7bNjNIA98R+Vn!H]nn@OR[W?Tg!u/3IA98R6X"lo_aKhG:!I_;m-7+*^/6,d
%hCUalphcqPR&4K+E-CoLFPj#/h6ef:ltN3;R&4K+E-CoLFPj%E5e"dFMq^X$0MTf4iU#i"8*2aF00QIQ\r8(QQ4&GJ[nJ&(?(N``
%\r:?<Q4%>,Dcq3u]"GK&F;`QW//QU7hQfGBl1-`kVTY@(B";l(os9RiR9EgiDFb7$dq)3OZWoK%qUs\TR9J?!%5$bRVTY@(B";l(
%os:.:1H!ldhs3ZlUku6^R[W?Tg!u.T@(]?PLB)IG]=Wo:LD2Jd!Q3=2*k*sAUm(-A=c9Jap;51MTHR2pkb"PGn?Zb2d$O@9;VcK]
%()OI)]K2j!C.D,7]L@+T2F\_B;_D7#[ur8"57q=#M:IXG-?tRUDgg6mi`"R=#k)H)M$\f,FE\EX_0_u&kqoDnqI,J3DW*C\*Jp5.
%!=oVhiS%/a"BG!<G%blPkV&2HDln+e$@8P:8I)YDm3lnJpB^@7,*7*s/^.EL?/JedP@X&/AqKa_nlE(V``Vi.aK+$3iZb=!X]6-Q
%oH%#h3]*t@2D**V.3cqkM3;U/Js(BGg/5+_U\@=NN]DVh43]6e14gu)?=grBQ%`FS(JRcY^!/25SH`T+aK$lEW3UBc4G21"ogD.r
%g($fUnuC+r3m->8_J$@60q)e#?%m$#`./0NUY.^e<JQ=^fQkma_#k[GASRjg^i%OS4-Q0-fd=]?C3HHnL;ULe[8!0:#AW6LTVc?_
%@^pg/L>0Y7\"P.o!c!%Y,DOCNm(,o]GqWpl/>/kQ3b#UHbLYFdR5^ogc2qa,VB^i=\*UkDcE\rX*?PTdl'[PK0&Nr@2f\irOdDeT
%3b#XIc]Og]CnBIB!"hZGFMr.oSfelp=^kYnk7JN*ka@GJ0&I=!V)_1bPib(0VA)2B&]<^72Wc@34JeQ-$`N<XNYjD+16\:ho5&I,
%/>/kQ3b#UH:UH%G`)M:>F,8V%k=@HbEWP&BMeUS/UPrgY".j143+Y"a4gA9KHO8`$fai>%H/Y"@"J=Mb3RM[/YHY*4I+(F4n3llb
%.C0?K\J_@7E1;%O'rl.e.gn7]cQ-nug=I(YJZA&+_gi'MFD(SXlg'/[!/D-%-uEDeL_H<DI+d9Z-:/6<Vub_KrU=.RbN(N'V4]Q#
%Rc#3l)WrSW(ZYe!1eL5W'>-iFjBUs8K&-Km(<e1EK(fPhS1B"ncr2TU8FEF#^qfB#iAoHaZFL:=1l\<4L#&MFFK4nC;\MjDAk?,5
%]15<T<9;<#-C>,nPHksI:WSsZ%p*kfgM3/qQaO&ekjkip:"Q>lUrHstlmB;k(L1[RN[ff*lC\@;e9/JqDIN9QWQH6#P!<dghP85R
%Bc<e;lJ$!lAM$T@^#O,p$)#<6DED?sL([:IZ50=[hJoS:!iS78lCbCSG#Q5AGcI"90NIh4]Bi-eFjrEN;$Bn`WM?[(hP7&2DKh9U
%lK74jljQW_L5P7ED.0I6/U,f<%$b<0KLc=q-;$mQ'K8<Xr0C"A8mt^S)'Z$^e8hRa]T(dCZ8sUYCRJ2IAI,+^P[lr+gK!_NoH'u3
%\(9.c(.r^2ZrZ!d?cYCCWMM(D$*,N`2L:G@We<f4EtRm;l2*?J[mh'2M5q*g-E,)EVmu#TgR!?[fNDIs_HQpWXuo&=h$)4>8%3sQ
%Ag<(J]/fKK^\u@5r:6b8s8/Gfo_UlPiQ#=)n_:e^p?-<bH**>2inIi>f0B6)q`k#HgRnMr?iB,bTDnTN^\mUt5N9/%na55lQi@Qq
%q;@H1FiKZs-HE))@DJ)9(N!Z.CY=/M,LfIs9g6<N_LO"P0A=G<f!>8$7bH9<mJ56;".m0=BH,E)bP":B+igHfs4.GXT"MaM)q/$7
%p-Tdmj>mt!l+IZ54F);$2Q!sLm:S>oL0VtP]T3O0T"IK%kk,kE9jh(PBG3A$IP1)!K7^M;(G0-DCY=/M,Le/ALuHhh".m0=BH,E)
%bP":B+hFP%s4.GXT"MaM)q/$7p-TcBeMU&DQ*).&>X,G3Y]o=*bP(@i%?$@d[f,tj."/i$]&\A*m=<m2@G?6C,E,4ooHrcJJpQKt
%pIcSd/Tb_F_t#UQ5gaf!RX70_E-9.UP.!4^oA2nICfDr*VVPn]^MRQ81Beue"rOT<<HSm#3jjKHq3asMhGrAHfWXe`q`[j4&K$h+
%f`\<"bM/1I%WCC%gXjC\(Z#A3/!u;9[dBtN6<UaVoJF"\\D>3^#Qde>KsWh+^&t^(_m]Nj7Mm4ggm9V\nU4Z4h3)Dt!OIp+[f+QB
%fR2H>qn[ugKos)]G]IR^gC'C.*4G6i2F@,\l<<tg?dcCV7MtXU(/jM\\6[!gjKNJc[1UQEbDrL.mZhhHH6W\X\[A9Qa6brB)`_`h
%%rDHFptLn]I'4W2m^cX*IIg&PXUVUr_mK?g(9#,t^o](WTC'@n9b):98KOplZA$3'qc*Ue&of5qLH;CB`V7?7TT`/oW`->;Y#)QG
%R!,+iIu6l*/SrgHJ*!Z&CuI)852H6"ZMQetq`jmeHR^FJ3)$q[pYY/1?^s$b?hl-a.t8BoTC07JFl&;:S+"KAb=BCYoO6I$]'h.`
%8r)our8a+0Wh<h\YUr)P$!^cnQLNc"cV@d@atT;E/@uF:hf%n,s)l0V_Fk*DpgMj'\EdR1G0JlO(Yg[VA<;]kQHc>=mclP;iO=)8
%2dZD:R)5"?Ol]a%MA&l$jPkr+o;Sm29k&esH>.>EQGlqChSc;BGdmHEa8)FjdddXUVC.3p*BrZ>ifXik@"MY]Y\ZMQoloi-9.uKE
%P34/O\Sedp'3uE0p7[9e?p[aPhd:4Ggtq#oaMe\5k/1J#fX6u#^^e@FF^N`UHYJ(:r31!$gi[dRE]nLnP0$?1SD(ko\L5#7%Sa)f
%KR(3n?ON?,_e?M,3ds8_R):$.UC<!#\:UVAJ+MUYM2cK:s8%bb'(KuG:Q8bjbnD&Tbl;hQXb8lDTMlMk/b?b)(r9ud'.A*G<[-J)
%@,2*Cm>!U:RK)S7hF]?['g+@*feuWBKJWY[GJ'3>fIM2]"LDs:fEc-hYO?]dn^1G-e-K[@4L#LDr*S@O<[-Y/i2I=4[Wu=,SGBq6
%j/n1MZ/MYobdMe?,Nq+CX(Qe<m=9=iJ78?FNM,;SD#TdX%Tl4*(q-'j#ds7Ro\Jdl#R+"AXcS4l:>QI_7g9g=T@sS:')W[)iZJr:
%h249>>uSCjF_$#2qk9"Rnj2p_#GGPm<\/rXX0,8>(gpHpAeW,=MLl]/jAdaC'Z>NECr"`p6X-3YmG"^C7mRQ*ngT>Xq6Np=)fW7_
%<<(RQ7B3+*#!2ReD-[7n7WiO_g$V6+Q`$aV+9jn&<%%]]>0@Y\@ft#"+6rm7[sK,o'Z<6aT@2;&KGUSI%QN3kWrIW'77n94^a>--
%"JAKaD0//O]\@h4kLe/<9:Vb"#-.U;rbj":;$5:@!G@ltot<P_>hiNt`.055TFqoi^I"j>!5n@pRt+jN*<e1Sk1Q_qlJt-8_E'm=
%AG<(kqms!^m=8PuI0M'SOQ%6`R3p"o&'O*&>n=JcVdo.dZpqjQ+Wm"%XjI?`pgMj'Wp=Fni**ln?Y=?6oaY$jH1h.-G'-iLbAMr;
%r31!$e9)%T6O^Y'fAoO@A!9,m=ZdD>9sBsJ%#YYhgQf?4WH7_n+iWuk94M1SCU_)3`hgslM[fC.LLK_HIR@$oeo,`8K3$<b/_K,Y
%mFG<VA%h5;fR'RK89MSKO?R^.l;R%VGXq(oX=d2pm#VNGq89T9;"'O=3i%F>9<%DaL;B%=2=e+S>/UKQpgMj'W9_)'eZV&EqUJ'=
%L/,q/o]uKgn"F(Z.T:P/N(s6f02bM@\&FiUL\f8B:=Yo[q`^H'#l4JD"4u*WCRH:]5:i97Fa_:M4?@KGV*X0U`1j%jb5/3qIK<42
%nS[rtY4k(JG%fU26o"dD4HsJmJl@$/gO,maFhURoZ.Yb9_N;`"p;EJ@G72'f0\mN5p7CPl?8CRcfq"H6lXJAGCD+mHg/5I[Y$g'0
%-bBn5J%.<o5c)67R,7bMdA^.42LKNYkYGO#l0DqW9i-?1-^tWj?$GoVGM>akF[pqeq/FsYn8<6T]bF9RmjFS8G9&0=gY2rt9iikn
%"mi&r_rAT4L8;!<;d"aal(VQjpol;5gi8*$Q5&4=f,g>tNWG0`+/[SdH]QFI?"@[Yp(s;1PV!lPh5C.2,bZs*qlbFR4]N/cDW*;:
%52C_LQRjGtq6,4P4WPqT3)$q[pE'][K7E4V-_G3N#Kdele*b]`7ip:[52].!fq&\</KCYDVu'ip-$bj6r7=-cSdpu:*2_PIqX8BJ
%iq@<;QX%#<&W%O!HpYI`S\EaT=?'!d&,"h8A]OUuGJ<cbrSEj5DF\s)[a..jW)u#Q]+=R!j<`b9AbMbDfi,L_/5H_e&+q#'c&`t]
%3HSb,]erVsWSQ1mB:j!>/0(PCVtqK^5'lqe25,/U+1Au:%b@3UhF=DD3SAh\s*6'-\DbnP6L3X6\C18]=F9mrbrm#:>30;hl2J"b
%ZiB\QqAeBU[F(sRX;62js6S5$Isnl6n#?K-;]D92`G34Zqp.INrqj@<Sp*bOC84_.==s;]s4O='J(i(O[l7*"FD;Pk"X!+rq_\2b
%Y04ENCc0+/)kC0OC;EF;cTY)&QYi]HH'o[1_7<:Ap3WP.`ODV"q<88Jq6]P^+8^58:/Cn#pS%QsTB[[Sk.^T1k`1=0]V1ZiIHiQA
%TThZ7Wt4m;Y1t!;?r#Q73]Y=ne-'FQ:KF+QI;X6WfVOo=$hE/ZRscc%@8hNc>C<=.:_Y=ihfR)"?ogCrQ-s-H9Mi^0]N]c^h_+Re
%W`j4KnM(5hDS%ll5:4Ij&'O*&?2%p`&Rm]0cJ[c[fcGm7B:BES4o-HJ@^*#QEq90OB5fAZkEhS7YqReX=;E"D\GE#_$s17/:msU_
%'@b'l-^tWj?(]m[3/&Q\QR8Zc_eQ^e\pg*Y:=Il9R]OpoF#CdJNbcjnTBnU#1qAXr]3G;e`Cgl7g;@U7-bIY69s2ODm&n!HBnB91
%(bPJMfAC)#hTdcs(nM=rAk"@TnP/bhrn@sZCdmc9MPC(NHVT^Lne>>![ak+;qq]fM$PuDf@5`/Y[\*@Vm%Mq<et3jh^lu5DD.@m-
%fm[TZ,eo"l<"Yus)"?VR7GF3d>.,O,#TJ(LIqjW;:YoEbNTmQVqk9"2CZh8ZHQ*5Oq0LFDVQYa9LUP!YOk[X[J=r+,G.UkJ)Km4e
%^L,SRC"l7M)aM<)YOK]4n%d(MbP":B_647&RXT%*!@r(Ag?-7VbP":B+lM3rnaDGki5s`3[P>J'Cd59=@]lbYGA;d3:YoEbNTmQV
%qk9"ReXs>+;%]7ldBuF\nE(K.bI^h6asIVQo&H2^`5Nmrg?Xq%V7-P=,DU.5Oc?"]qs$>3Q3QoulWUPEohX2<C)P4c1RgZ$YEW1m
%?,6h_J^@0b98W&Sit>rKmqjl=k;@iuF'Spt,ZhC)6C"bNjh?81YD2./[X`g6<HiEP)IL2M$<H&tAc%ULTY!"PQ[i>1De!:YV0^q#
%*X"-(2KIHY+5.!Cfpa"XG&VV1@M<;$nDom2ond"MCuVZN5I:`+>%40AG$XFs>C$qkG]q7^HZ\.rfuRUVIV9tUQ+p,*5-;-@Ep\6V
%TsIh\dFp;/3)%L+D1TqbCPIj_%WiogR_[%A=I)q,Jh+2I3%V++FhZ@L)<hsc^21GS&5YGfLV\N%*&cH-+-t0,\t7BV3@ID;D/nG*
%`IX\G8,P&8ONS`CeVAHXI-o!Jrq8_KPsafm$Te)/&(F)%_I;/HWrKUMp\`tCAIZAWMZfSuWc.h'hAp0hb9*V3VgFJ5WpnqbZ+k7B
%5q[YS<ZgaX=_\2]SXr:L_Tr^4n\_[.E7]N7JCqQe"aA_CNcF$qZM8CZ6_1R'nE0N,OQC#n\F<p0I(83ZQElc=c&PR0=\a.!$Qk\R
%LHAh_Bcf[3*M4=WSEq(/4tMU&GJ$[>1'EeJ(YijT42usbbMpD[0DcBn31J%GG*4r"?ML`U51OY^Ca:%eO>MUa\HQ:;;RV!IgE=[]
%KsHEM[/3i&[j<</%A-rFSXsMLjQ(Ibc>@U-qG?YBfm*jXY#uN[rJ>]3dC*G@bI6P+PV!lPh1tiV@fO%51qI7P%,1qHq/<[`'E'":
%Q-*P$rLTZtWq5r2hfPJp-K,>s/KCYDVu+6kg0MZOqnL2F(/KsZTThZ7Wt4rr?(.9:[HP38q.YFZM\p=*ACoM.a`Sj:mt,Vu9,!iL
%_e?S.\pchlGRJPZ%P("*_Z`/>l^LB`:Mb\?s4;J-*H<YIn9hZQ[ET@(iQV=El)ftb\q$\J0\b`8NM*#q<#[6-nl=])CfG[pfR9^u
%-ha`Z:Ih)<"['2CeLjX6JM[8VGFT]DXr$TW#%l=HYn>:Z?f1Bs6p=tn;^7ZHo>F*Xo7)2/gCXO;!De\_[`oI)iQV>p*H+sULCI%=
%@(+<))^00L5o&FQiQ3[\el?&5Y$lJ@DqTSQ,Ii^h7ue\sKhbCF8Au4V"05p]_t$0!?q#r@KWV3b#DGoJPrdoCe\WW6:At^G:MkZ*
%$$hDI(moKFPc\5G]0OEas2jCZ4YM.&[?,,k`A]2Aq,?iEkWsd[i;[WbTro1V^-SIHUPr"R+"fg$l>KdQW;"@tZ%k<X2^ie=BnL_)
%\O=uQ^L?l9rcbnB*T*O:af!Xb/MBqCn8Hs-W;kW'p31Y4K0grXlI9uIB!i"GSc'LNTB\X=VloGl=b>CS`4LPb]_=L3n&[/qH@(4K
%J]"ei;!1Jf+knueg"*<L->9AS3UN<KcT+8e_?-S3@9S)XpGjiFij0e8)uF_I^q;8bb"pL:l-#AdN!g_n`J6Lgjgn4EGOd+lIcicu
%1$;iVm7<EW$ff*ZAaua[pWo$$R6L=HQ9?!JJ(5l*293>RLV(hA9s09*8ZuD$6+f%jWBH3+Ha;u(d,_c^9A.lUHYJ(1HPe@/ACoM.
%f>ZZi0oVOf@C4f'?/He^>I"$1B$R/(@,)Ru2Hgt0(Hj<r%sPXr1HAaue\#d;p<a"C>F\m`a\LH-\!4%9,[_XV6HK&jTa>c0_m9)W
%fA.?7ibXPNKpuSX(.M'`Zdkt#n$ZfRm`kX^-ehQcftq1OICfGe?'7k8S,\[J[\n__Ku::p9`J\Ee]$1,-*IWGHn*2WmedgB((Sg]
%6iH1BGDAnK^!!eo1km;%l,i7K*3%jL:pt>1Fs$!6T.V5ic+`po%0N_b<fAK?q.-7:i@sX_eGkUHLD;^"?e;cq5CYto)lY2bX-b;>
%3)$ppofq#VMUG,d1OVu2S_V^Mlr.3!;ITtPS_f6fh1tj!rNbg50g<APJkeM+I6i%B.s-+;:NdiF^Ta@,^Yu0Wl1UL1D;F4e3q[tM
%]+=SLCiu9=rlopY-Vqce@A8tc-bE1I5;tl7n`_p)^<Uhkk]XqB>'tlrX`C`E;#bapWlN)2YV)*#GbB2VQX&UmXg5mq?_VAq0^V'P
%J%r.#M>Q"iNDLJOCI12Do(MS8PDul%_mK;;s61XQ]_a@\o$hOlgJc#X6iG%k>Zif1GBLb8qlN"I?!`\I0oJgcaqbK9mN_\&^N<WY
%%TKWRa-U\=H<#3uqfMl2mY@H]UI-"Y_7<:Ap3WP.Vg7\mqt7[`?28o?CST@KfU>#hg4/g1p4"Z:S.Fl/;]D92`G34Zqp.H#rpORk
%g]$?6$-mBs[GM)"5OIo7>@5k1]t'bRmK=JU`rDc*hs7c/r7sT80moP3ms("p:2]g=[52+O;gjn8-l?9n]5QXiDf@3!D5Tfe_f":>
%$gqf@NC(ehNq`k7!_p*"Uq".2W%q17NaPp<_&WVp[?D8%!EM"aS&O7E\h8!?gJtpjEitqI:j8o1N,8g4\L#l-I+sQ`9(8BH-'H"0
%*a(<K[iRoEk'c'O/[1Rp@TUbAGurAMr9DT4)D^_22^S4P[S-*/`8Nj7qB2Kpl=rb7f%<3;V+^KZdEb%ZisDI82!/;s6l6c2FS2OH
%.1/8;i;ufk`PQk?U&#`@BD4@[BukBY#<9/cagm5Nfee>\hfB:,9N_7^f=IJfO(c?%=dKk!dtQ3_d^`0n@LF.*T)3ru:u<ele(4:q
%qm?lsJr,!4Qd+JD$gaMmR3ILR(Yk"nI_te^HX1\*-UFM3>?$l/.F_FU2J(8[CI.3r&o0-q7#"k28J%e!TB(mQ[fR5@b/=l>JXn=D
%bAA2kF^4Ma:KXXS(BQXRe:9L=WstF&A_B;%nOtSqDEL1uXCASOdh[b(I#W`0;m!9Q_+qmjGuZpGj;)_IJ)+b=IfJdr3B/It:13Aq
%J<c(\*1uT./,5i6bYcud^&c/gPSWted97hKpZ(9Am6t.uP'u8SG9&7L<:(H+s%@]>BQ^^n#i<rf+iSO$iU0\T$Kslc:XFcIaaGhe
%StOI_@>4Q.<0?ZJ,8bK@&Vq8ZDa@for>VS'QQ^J[Lrk%4/_EOLhd-a+^&(%go<cilFrtJN^6H4skSnc?[b@lm[mNWC(+S(IigN$9
%&T?kjED3Xfc[='DIA]/k3-V#d2S+1V:n3kG)`epaq:^s3/F4WT31umW6b%:j.CeW/cF4IN>#-H7i\k3Gf,s_;`sk#YM>!<7")_61
%HP_C<rUq-g2"+a4Y*Dn^D_5pcTRFkp4Mln'P)r;b..S%2hjLt;l9O;q7e,37QU#nC>GX/D+k.R`[n]H?qSD4jKKjV$Qe-m8+8"E$
%0,gn;W;`smj*jE`^Ch9-9P>FgldLaK4Jf\X@e=EAG/J;o':,>eZ=Yf=0\TpX;t8S9/ShN/.QQc)^:8Crc-<hMamGFa071T-Gjc*:
%k2=Ysh@Rp"]8Vl(?%!Wb^6!I[9(c+Ndqp.GY5qc(nFemV;V4cN/Y\44lDM&'I=l8f'l/"`;R'YOfPAK9e$hM?_fZAiK=%r")!t]d
%ehnH,:[-urap+qnQYDW!&.tppC.ROqe1Vh+*./sOj&J2&!j$j""^cKp%[ZNTC5`?:+l(e\$3lAB[FCnkYH-uH&F0-UJ*K7HEcTjE
%G>d'&c6r:*2S$Q8o+8Dq[b1!q<NM4nE=W^`42r$")ThXQf1mROr[\a%>*l$8Wl%V#VJj_91$U7R5O'qk(!J%'>L".ih8d6SlDp_X
%$#?&7s!&pRE6L$5W[m'ed@@'ernONG?5`Z>LQ8K37pMO:,QI&_JmL@2f3Thl`X=irTl)SQqG]/<hlsq&s4_GXT_1.#F28paWo2TN
%-;5fQ2c*`)@?a',ZoV?f/cdbXl@p-CDi5.9pZge:os8B)Z'krYqOY!;W!q3[l@[.'Lspm:E%L1DDbsj6=\XAK\OJr&CCjR&%pCDI
%S#:I>*<W4(EH)BTOnpMqLK;,CSr#/G:*W'ThlXS&$JfKIR<-[f-#d0FHI8alNmREYATVh"0h@K7&ka,[1%LFM0%2In3).SX@8J)G
%RMZ@$+@8t]HX_Z5,k'ebmIBHHJ:6k>+HWP)9i1"<%QtUt_4;Fj!*ptt`$crJp-BA4LsII"Dlq:pW7gL@:W$b7->`HL'@rHAj(O-^
%a6Gel"ltAs42.k"LG>6oe>B7`#gHU`m?H@+CT=_+l:2ee,7^^-n6VTbCc"RM)?o3ZU<,1TWE/9i[DjI9VE,ddRJQ46Gb#nAJ/Kb)
%g"]V`[B$4%6@e5JV?q>-Ps]o6=KhFiNT"B%j4^t;lB8e<"0H>'>?_>IV_L#'Y&?K!Uu9rc'ouBp=>aF:(hLRG@hrS/(DdUhfK`or
%a>M@6g\+_]WUbekieWLO)#<"QKW=^($EiDjS*f.a._+-1H]_6Vo93?YeA%f&hl!VUl7f`W]f6FC*-9TU$Df(q?6M@UEuOXmA[mNR
%g/CgeW"[ju?<2#n%I!MVWlUP';gRO1-,I=lGK(gr*N"n,:3#Js5Znq2eYl&J9PXP,`J%fRLUX$*Bp?GjTeE`HruVb4=ARGU\\D:[
%c*Tnen"l68,lG*"P5)m%XoLacDp*Pka6+=[X=tbBg%0=rL=]%k*Yoni"2T6+`2GoQlGp0gN5e`0h3$E'<*+2=!%X?2V-p%bB+P_@
%(Ua?RVk?k1LG:NJc$tZE95,=lkf!1CUV<ikZ_Y"Ue24PYRlXa>f%%$GDkD"p-a7_j]:ZOf!.r`3k?%L'B"N1f%TmY8h7#s9ARY5,
%WjD.$_?>$L.d]t1Xq&[0B!_X<:&UWU!@l!ic%1Je^+O9fi*n`*o`E^p.;7oel45E$^AU9F\G,uP5dIR<&DX$<c*#52Xhj^abm?\V
%K;p/%m8Q79d%M=MG-9*gBR!<gS[:oEVk+2ND$AH;];ImrW'WEUk/m:q@+C0t-e.+HDJ*A<n?Jdt#?]lg7XN2!9)TI!#;"k3`h6/@
%O,c+VYSMA(h&o7i'*LpA!A4F7m'kU.E.([N\nUnUH+@"&eW%_.`d*LUe00<9h\`-`Rd)RCF3q\XW,n"VR]PnJQ%C,<NWB>kdm2<'
%f@A>/AWAuXj4i/^7R#>T7bm6&/"!QgZ=8?,2OFU;An"d&0Z-NqkqD<?gfJf=l6-`$e//5pbubh%R\E!m[c]?%O*=hY;6PBmo/45S
%E0Ksm#?o1"3pWgS+/pJms.iD(^'uh!&Oe$!-nL72UU[\KW+80;k0%MYn+PsfMHjM]4aan45Q7Ya^\NrTDu]YEs8D`_++O:OLEA#8
%li6nCmsb7S^\mm(s7Pt:^\Y:orV_fWnFO+2s6p7mp%.(k5CNFb00fL8TDnW/cena$J,]!<!'qbWnEXH]omcfK^\Y;:$Qo@r#6~>
%AI9_PrivateDataEnd
